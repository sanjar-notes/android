{
  "paths": [
    {
      "type": "file",
      "value": "README.md"
    },
    {
      "type": "dir",
      "name": "1._Basics_-_Android_UI",
      "children": [
        {
          "type": "file",
          "value": "1._Basics_-_Android_UI/0_index.md"
        },
        {
          "type": "dir",
          "name": "L0_-_About_Android",
          "children": [
            {
              "type": "file",
              "value": "1._Basics_-_Android_UI/L0_-_About_Android/0_index.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "L1_-_Building_Layouts",
          "children": [
            {
              "type": "file",
              "value": "1._Basics_-_Android_UI/L1_-_Building_Layouts/1._Views.md"
            },
            {
              "type": "file",
              "value": "1._Basics_-_Android_UI/L1_-_Building_Layouts/2._IDE_and_XML.md"
            },
            {
              "type": "dir",
              "name": "3._XML_Syntax",
              "children": [
                {
                  "type": "file",
                  "value": "1._Basics_-_Android_UI/L1_-_Building_Layouts/3._XML_Syntax/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "4._dp_units",
              "children": [
                {
                  "type": "file",
                  "value": "1._Basics_-_Android_UI/L1_-_Building_Layouts/4._dp_units/0_index.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "1._Basics_-_Android_UI/L1_-_Building_Layouts/5._wrap_content.md"
            },
            {
              "type": "file",
              "value": "1._Basics_-_Android_UI/L1_-_Building_Layouts/6._colors.md"
            },
            {
              "type": "file",
              "value": "1._Basics_-_Android_UI/L1_-_Building_Layouts/7._sp_units.md"
            },
            {
              "type": "dir",
              "name": "8._Some_attributes",
              "children": [
                {
                  "type": "file",
                  "value": "1._Basics_-_Android_UI/L1_-_Building_Layouts/8._Some_attributes/0_index.md"
                }
              ]
            }
          ]
        },
        {
          "type": "dir",
          "name": "L2_-_Building_Layouts_2",
          "children": [
            {
              "type": "dir",
              "name": "1._View_groups",
              "children": [
                {
                  "type": "file",
                  "value": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/1._View_groups/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "2._XML_namespace_declaration",
              "children": [
                {
                  "type": "file",
                  "value": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/2._XML_namespace_declaration/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "3._match_parent",
              "children": [
                {
                  "type": "file",
                  "value": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/3._match_parent/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "4._layout_weight",
              "children": [
                {
                  "type": "file",
                  "value": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/4._layout_weight/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "5._RelativeLayout",
              "children": [
                {
                  "type": "file",
                  "value": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/5._RelativeLayout/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "6._Padding_and_Margin",
              "children": [
                {
                  "type": "file",
                  "value": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/6._Padding_and_Margin/0_index.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/wqeqewqwe.md"
            },
            {
              "type": "file",
              "value": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/zConclusion.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "L3_-_Practice_-_Building_Layouts",
          "children": [
            {
              "type": "file",
              "value": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/0_index.md"
            },
            {
              "type": "file",
              "value": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/1._Troubleshooting.md"
            },
            {
              "type": "dir",
              "name": "2._Hello_World_App",
              "children": [
                {
                  "type": "file",
                  "value": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/2._Hello_World_App/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "3._Birthday_Card_App",
              "children": [
                {
                  "type": "file",
                  "value": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/3._Birthday_Card_App/0_index.md"
                },
                {
                  "type": "file",
                  "value": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/3._Birthday_Card_App/Attributes_learned.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "4._Overlapping_Views",
              "children": [
                {
                  "type": "file",
                  "value": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/4._Overlapping_Views/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "5._Project",
              "children": [
                {
                  "type": "file",
                  "value": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/5._Project/0_index.md"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "dir",
      "name": "2._Basics_-_User_Input",
      "children": [
        {
          "type": "file",
          "value": "2._Basics_-_User_Input/0_index.md"
        },
        {
          "type": "dir",
          "name": "L1_-_Activities",
          "children": [
            {
              "type": "file",
              "value": "2._Basics_-_User_Input/L1_-_Activities/0_index.md"
            },
            {
              "type": "dir",
              "name": "1._Make_the_layout",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L1_-_Activities/1._Make_the_layout/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "2._Activities",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L1_-_Activities/2._Activities/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "3._Displaying_text_using_Java",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L1_-_Activities/3._Displaying_text_using_Java/0_index.md"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "value": "2._Basics_-_User_Input/L1_-_Making_An_App_interactive_1.md"
        },
        {
          "type": "file",
          "value": "2._Basics_-_User_Input/L2_-_Making_An_App_interactive_2.md"
        },
        {
          "type": "dir",
          "name": "L2_-_Nested_ViewGroups",
          "children": [
            {
              "type": "file",
              "value": "2._Basics_-_User_Input/L2_-_Nested_ViewGroups/0_index.md"
            },
            {
              "type": "dir",
              "name": "1._Changing_the_layout",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L2_-_Nested_ViewGroups/1._Changing_the_layout/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "2._Nested_Viewgroups",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L2_-_Nested_ViewGroups/2._Nested_Viewgroups/0_index.md"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "value": "2._Basics_-_User_Input/L3_-_Making_an_App_Interactive_3.md"
        },
        {
          "type": "dir",
          "name": "L3_-_Steps_for_making_an_app",
          "children": [
            {
              "type": "file",
              "value": "2._Basics_-_User_Input/L3_-_Steps_for_making_an_app/0_index.md"
            },
            {
              "type": "dir",
              "name": "1._Making_the_layout",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L3_-_Steps_for_making_an_app/1._Making_the_layout/0_index.md"
                }
              ]
            }
          ]
        },
        {
          "type": "dir",
          "name": "L4_-_Details_of_an_Android_app",
          "children": [
            {
              "type": "file",
              "value": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/0_index.md"
            },
            {
              "type": "file",
              "value": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/1._Anatomy_of_an_Android_app.md"
            },
            {
              "type": "dir",
              "name": "2._Resource_IDs",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/2._Resource_IDs/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "2._Resources",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/2._Resources/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "3._Relation_between_Java_and_XML",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/3._Relation_between_Java_and_XML/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "4._Java_objects",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/4._Java_objects/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "5._setContentView_method",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/5._setContentView_method/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "6._Capturing_views",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/6._Capturing_views/0_index.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/7._Get_data_from_views.md"
            },
            {
              "type": "file",
              "value": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/8._Logging_events.md"
            }
          ]
        },
        {
          "type": "file",
          "value": "2._Basics_-_User_Input/L4_-_Details_of_the_workflow.md"
        },
        {
          "type": "dir",
          "name": "L5_-_More_details",
          "children": [
            {
              "type": "file",
              "value": "2._Basics_-_User_Input/L5_-_More_details/0_index.md"
            },
            {
              "type": "dir",
              "name": "1._CheckBox",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L5_-_More_details/1._CheckBox/0_index.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "2._Basics_-_User_Input/L5_-_More_details/10._Final_Lecture.md"
            },
            {
              "type": "dir",
              "name": "2._RadioGroup",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L5_-_More_details/2._RadioGroup/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "3._Scrolling",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L5_-_More_details/3._Scrolling/0_index.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "2._Basics_-_User_Input/L5_-_More_details/4._Googler_suggestions.md"
            },
            {
              "type": "dir",
              "name": "5._TextInput",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L5_-_More_details/5._TextInput/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "6._Intent",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L5_-_More_details/6._Intent/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "7._Localization",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L5_-_More_details/7._Localization/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "8._Styles",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L5_-_More_details/8._Styles/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "9._Themes",
              "children": [
                {
                  "type": "file",
                  "value": "2._Basics_-_User_Input/L5_-_More_details/9._Themes/0_index.md"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "dir",
      "name": "3._Basics_-_Multiscreen_Apps",
      "children": [
        {
          "type": "file",
          "value": "3._Basics_-_Multiscreen_Apps/0_index.md"
        },
        {
          "type": "dir",
          "name": "L1_-_Intents_and_Activities",
          "children": [
            {
              "type": "dir",
              "name": "1._Intro",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/1._Intro/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "10._Event_Listeners_-_Intro",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/10._Event_Listeners_-_Intro/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "11._Event_Listeners_in_Android_-_Details",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/11._Event_Listeners_in_Android_-_Details/0_index.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/12._Why_use_interfaces.md"
            },
            {
              "type": "dir",
              "name": "13._How_to_setup_an_event_listener",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/13._How_to_setup_an_event_listener/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "2._Android_app_directory_structure",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/2._Android_app_directory_structure/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "3._Overview_of_the_App",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/3._Overview_of_the_App/0_index.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/4._Gradle_files.md"
            },
            {
              "type": "dir",
              "name": "5._Create_New_Activities",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/5._Create_New_Activities/0_index.md"
                },
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/5._Create_New_Activities/xtra.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/6._AndroidManifest.xml_file.md"
            },
            {
              "type": "dir",
              "name": "7._Use_an_Intent_to_open_another_Activity",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/7._Use_an_Intent_to_open_another_Activity/0_index.md"
                },
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/7._Use_an_Intent_to_open_another_Activity/resources.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "8._Implicit_vs_Explicit_Intents",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/8._Implicit_vs_Explicit_Intents/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "9._Modifying_the_label(heading)",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/9._Modifying_the_label(heading)/0_index.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/Conclusion.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "L2_-_DS,_loops_and_custom_classes",
          "children": [
            {
              "type": "file",
              "value": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/1._Course_Map.md"
            },
            {
              "type": "dir",
              "name": "10._Completing_changes_for_all_sections",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/10._Completing_changes_for_all_sections/0_index.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/2._Add_views_using_Java.md"
            },
            {
              "type": "dir",
              "name": "3._Memory_is_Limited",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/3._Memory_is_Limited/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "4._View_Recycling",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/4._View_Recycling/0_index.md"
                },
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/4._View_Recycling/Questions.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/5._Analogy_for_ListView.md"
            },
            {
              "type": "dir",
              "name": "6._ListView_and_Array_Adapter",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/6._ListView_and_Array_Adapter/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "7._Code_for_ListView_and_ArrayAdapter",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/7._Code_for_ListView_and_ArrayAdapter/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "8._Custom_Adapter_-_Concept",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/8._Custom_Adapter_-_Concept/0_index.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/9._Custom_Adapter_-_Concept.md"
            },
            {
              "type": "dir",
              "name": "9._Custom_adapter_-_Practical",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/9._Custom_adapter_-_Practical/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "zConclusion",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/zConclusion/0_index.md"
                }
              ]
            }
          ]
        },
        {
          "type": "dir",
          "name": "L3_-_Report_Card_app",
          "children": [
            {
              "type": "file",
              "value": "3._Basics_-_Multiscreen_Apps/L3_-_Report_Card_app/0_index.md"
            },
            {
              "type": "file",
              "value": "3._Basics_-_Multiscreen_Apps/L3_-_Report_Card_app/1._Project_Overview.md"
            },
            {
              "type": "file",
              "value": "3._Basics_-_Multiscreen_Apps/L3_-_Report_Card_app/2._Building_the_project.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "L4",
          "children": [
            {
              "type": "dir",
              "name": "1._Lesson_Intro",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L4/1._Lesson_Intro/0_index.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "3._Basics_-_Multiscreen_Apps/L4/10._Different_colors_for_each_activity.md"
            },
            {
              "type": "file",
              "value": "3._Basics_-_Multiscreen_Apps/L4/11._Playing_Audio.md"
            },
            {
              "type": "file",
              "value": "3._Basics_-_Multiscreen_Apps/L4/12._Adding_audio.md"
            },
            {
              "type": "dir",
              "name": "13._Trying_out_audio_playback",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L4/13._Trying_out_audio_playback/0_index.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "3._Basics_-_Multiscreen_Apps/L4/14._MediaPlayer_class.md"
            },
            {
              "type": "dir",
              "name": "2._Scoping_out_work_for_a_new_feature",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L4/2._Scoping_out_work_for_a_new_feature/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "3._What_Order_to_make_changes_in",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L4/3._What_Order_to_make_changes_in/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "4._Modify_list_item_layout",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L4/4._Modify_list_item_layout/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "5._Assets",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L4/5._Assets/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "6._Modifying_the_Word_class",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L4/6._Modifying_the_Word_class/0_index.md"
                }
              ]
            },
            {
              "type": "file",
              "value": "3._Basics_-_Multiscreen_Apps/L4/7._Modifying_WordAdapter_class.md"
            },
            {
              "type": "dir",
              "name": "8._Hiding_the_image_in_the_PhrasesActivity",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L4/8._Hiding_the_image_in_the_PhrasesActivity/0_index.md"
                }
              ]
            },
            {
              "type": "dir",
              "name": "9._Visual_Polish",
              "children": [
                {
                  "type": "file",
                  "value": "3._Basics_-_Multiscreen_Apps/L4/9._Visual_Polish/0_index.md"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "dir",
      "name": "Home",
      "children": [
        {
          "type": "file",
          "value": "Home/0._Prerequisites.md"
        },
        {
          "type": "file",
          "value": "Home/0_index.md"
        },
        {
          "type": "dir",
          "name": "1._Roadmap",
          "children": [
            {
              "type": "file",
              "value": "Home/1._Roadmap/0_index.md"
            },
            {
              "type": "file",
              "value": "Home/1._Roadmap/road_map_android.md"
            }
          ]
        },
        {
          "type": "file",
          "value": "Home/2._Code.md"
        },
        {
          "type": "file",
          "value": "Home/3._References.md"
        }
      ]
    },
    {
      "type": "file",
      "value": "notebook.md"
    }
  ],
  "contents": [
    {
      "path": "README.md",
      "url": "README.html",
      "content": "# Android Basics\nThese are notes I make while doing the 8 free courses on Udacity, as part of the Android Developer NanoDegree.\nIt's not complete, as I'm still doing them.\n",
      "html": "<h1 id=\"android-basics\">Android Basics <a class=\"heading-anchor-permalink\" href=\"#android-basics\">#</a></h1>\n<p>These are notes I make while doing the 8 free courses on Udacity, as part of the Android Developer NanoDegree.\nIt’s not complete, as I’m still doing them.</p>\n",
      "id": 0
    },
    {
      "path": "1._Basics_-_Android_UI/0_index.md",
      "url": "1._Basics_-_Android_UI/0_index.html",
      "content": "# 1. Basics - Android UI\nCreated Saturday 24 October 2020\n\nCourse link - <https://classroom.udacity.com/courses/ud834>\n\n",
      "html": "<h1 id=\"1.-basics---android-ui\">1. Basics - Android UI <a class=\"heading-anchor-permalink\" href=\"#1.-basics---android-ui\">#</a></h1>\n<p>Created Saturday 24 October 2020</p>\n<p>Course link - <a href=\"https://classroom.udacity.com/courses/ud834\">https://classroom.udacity.com/courses/ud834</a></p>\n",
      "id": 1
    },
    {
      "path": "1._Basics_-_Android_UI/L0_-_About_Android/0_index.md",
      "url": "1._Basics_-_Android_UI/L0_-_About_Android/0_index.html",
      "content": "# L0 - About Android\nCreated Sunday 10 January 2021\n\n#### The Android stack\n![](./L0_-_About_Android/pasted_image.png)\n\n",
      "html": "<h1 id=\"l0---about-android\">L0 - About Android <a class=\"heading-anchor-permalink\" href=\"#l0---about-android\">#</a></h1>\n<p>Created Sunday 10 January 2021</p>\n<h4 id=\"the-android-stack\">The Android stack <a class=\"heading-anchor-permalink\" href=\"#the-android-stack\">#</a></h4>\n<p><img src=\"./L0_-_About_Android/pasted_image.png\" alt=\"\"></p>\n",
      "id": 2
    },
    {
      "path": "1._Basics_-_Android_UI/L1_-_Building_Layouts/1._Views.md",
      "url": "1._Basics_-_Android_UI/L1_-_Building_Layouts/1._Views.html",
      "content": "# 1. Views\nCreated Saturday 24 October 2020\n\n\n* Every visual element in Android is actually a **view** - an invisible rectangular box.\n* Some examples are TextView, ImageView and Button, all in titlecase.\n\n\n",
      "html": "<h1 id=\"1.-views\">1. Views <a class=\"heading-anchor-permalink\" href=\"#1.-views\">#</a></h1>\n<p>Created Saturday 24 October 2020</p>\n<ul>\n<li>Every visual element in Android is actually a <strong>view</strong> - an invisible rectangular box.</li>\n<li>Some examples are TextView, ImageView and Button, all in titlecase.</li>\n</ul>\n",
      "id": 3
    },
    {
      "path": "1._Basics_-_Android_UI/L1_-_Building_Layouts/2._IDE_and_XML.md",
      "url": "1._Basics_-_Android_UI/L1_-_Building_Layouts/2._IDE_and_XML.html",
      "content": "# 2. IDE and XML\nCreated Saturday 24 October 2020\n\n\n* An IDE is a tool used in programming, Android Studio is the IDE for making Android apps.\n\n\n",
      "html": "<h1 id=\"2.-ide-and-xml\">2. IDE and XML <a class=\"heading-anchor-permalink\" href=\"#2.-ide-and-xml\">#</a></h1>\n<p>Created Saturday 24 October 2020</p>\n<ul>\n<li>An IDE is a tool used in programming, Android Studio is the IDE for making Android apps.</li>\n</ul>\n",
      "id": 4
    },
    {
      "path": "1._Basics_-_Android_UI/L1_-_Building_Layouts/3._XML_Syntax/0_index.md",
      "url": "1._Basics_-_Android_UI/L1_-_Building_Layouts/3._XML_Syntax/0_index.html",
      "content": "# 3. XML Syntax\nCreated Saturday 24 October 2020\n\nRules for valid XML\n\n* A tag must have a closing tag. Tags with no(enclosing) content are self-closing.\n* Tags can be nested.\n* Tags have attributes and values(strings).\n\n\nExamples\n![](./3._XML_Syntax/pasted_image001.png)\n![](./3._XML_Syntax/pasted_image002.png)\n![](./3._XML_Syntax/pasted_image.png)\n\n",
      "html": "<h1 id=\"3.-xml-syntax\">3. XML Syntax <a class=\"heading-anchor-permalink\" href=\"#3.-xml-syntax\">#</a></h1>\n<p>Created Saturday 24 October 2020</p>\n<p>Rules for valid XML</p>\n<ul>\n<li>A tag must have a closing tag. Tags with no(enclosing) content are self-closing.</li>\n<li>Tags can be nested.</li>\n<li>Tags have attributes and values(strings).</li>\n</ul>\n<p>Examples\n<img src=\"./3._XML_Syntax/pasted_image001.png\" alt=\"\">\n<img src=\"./3._XML_Syntax/pasted_image002.png\" alt=\"\">\n<img src=\"./3._XML_Syntax/pasted_image.png\" alt=\"\"></p>\n",
      "id": 5
    },
    {
      "path": "1._Basics_-_Android_UI/L1_-_Building_Layouts/4._dp_units/0_index.md",
      "url": "1._Basics_-_Android_UI/L1_-_Building_Layouts/4._dp_units/0_index.html",
      "content": "# 4. dp units\nCreated Saturday 24 October 2020\n\n#### px → Normal pixel\n![](./4._dp_units/pasted_image002.png)\n\n* There is a problem when we use **px** unit: it size of elements depends on the screen resolution.\n* dp solves this problem - making all the elements of the **same physical** dimensions.\n\n\n#### dp → Density independent pixel\n![](./4._dp_units/pasted_image001.png)\n\n* Touch targets must be atleast 48 dp by 48dp. i.e around 9mm x 9 mm\n\n\n*****\n\n\n* Each view must have width and height specified.\n* \"dips\" ≡ dp units\n\n\n",
      "html": "<h1 id=\"4.-dp-units\">4. dp units <a class=\"heading-anchor-permalink\" href=\"#4.-dp-units\">#</a></h1>\n<p>Created Saturday 24 October 2020</p>\n<h4 id=\"px-%E2%86%92-normal-pixel\">px → Normal pixel <a class=\"heading-anchor-permalink\" href=\"#px-%E2%86%92-normal-pixel\">#</a></h4>\n<p><img src=\"./4._dp_units/pasted_image002.png\" alt=\"\"></p>\n<ul>\n<li>There is a problem when we use <strong>px</strong> unit: it size of elements depends on the screen resolution.</li>\n<li>dp solves this problem - making all the elements of the <strong>same physical</strong> dimensions.</li>\n</ul>\n<h4 id=\"dp-%E2%86%92-density-independent-pixel\">dp → Density independent pixel <a class=\"heading-anchor-permalink\" href=\"#dp-%E2%86%92-density-independent-pixel\">#</a></h4>\n<p><img src=\"./4._dp_units/pasted_image001.png\" alt=\"\"></p>\n<ul>\n<li>Touch targets must be atleast 48 dp by 48dp. i.e around 9mm x 9 mm</li>\n</ul>\n<hr>\n<ul>\n<li>Each view must have width and height specified.</li>\n<li>“dips” ≡ dp units</li>\n</ul>\n",
      "id": 6
    },
    {
      "path": "1._Basics_-_Android_UI/L1_-_Building_Layouts/5._wrap_content.md",
      "url": "1._Basics_-_Android_UI/L1_-_Building_Layouts/5._wrap_content.html",
      "content": "# 5. wrap content\nCreated Saturday 24 October 2020\n\nThis is a relational value, i.e dimension is not specified explicitly.\n``wrap_content`` wraps around the content/text, i.e tightly enclosure.\n\n",
      "html": "<h1 id=\"5.-wrap-content\">5. wrap content <a class=\"heading-anchor-permalink\" href=\"#5.-wrap-content\">#</a></h1>\n<p>Created Saturday 24 October 2020</p>\n<p>This is a relational value, i.e dimension is not specified explicitly.\n<code>wrap_content</code> wraps around the content/text, i.e tightly enclosure.</p>\n",
      "id": 7
    },
    {
      "path": "1._Basics_-_Android_UI/L1_-_Building_Layouts/6._colors.md",
      "url": "1._Basics_-_Android_UI/L1_-_Building_Layouts/6._colors.html",
      "content": "# 6. colors\nCreated Saturday 24 October 2020\n\n\n* Colors are expressed as hex values, just like in HTML. They are just strings.\n* Some attributes for which take color:\n\t1. ``android:background`` - sets the background color for the view.\n\t2. ``android:textColor`` - sets the text color for a textView.\n\n\n",
      "html": "<h1 id=\"6.-colors\">6. colors <a class=\"heading-anchor-permalink\" href=\"#6.-colors\">#</a></h1>\n<p>Created Saturday 24 October 2020</p>\n<ul>\n<li>Colors are expressed as hex values, just like in HTML. They are just strings.</li>\n<li>Some attributes for which take color:\n<ol>\n<li><code>android:background</code> - sets the background color for the view.</li>\n<li><code>android:textColor</code> - sets the text color for a textView.</li>\n</ol>\n</li>\n</ul>\n",
      "id": 8
    },
    {
      "path": "1._Basics_-_Android_UI/L1_-_Building_Layouts/7._sp_units.md",
      "url": "1._Basics_-_Android_UI/L1_-_Building_Layouts/7._sp_units.html",
      "content": "# 7. sp units\nCreated Saturday 24 October 2020\n\n#### Scale Independent Pixels\n\n* ``sp`` is used for text size\n* It makes textsize consistent across devices with different screen resolutions.\n* It takes the user font size preference into account.\n\n\n",
      "html": "<h1 id=\"7.-sp-units\">7. sp units <a class=\"heading-anchor-permalink\" href=\"#7.-sp-units\">#</a></h1>\n<p>Created Saturday 24 October 2020</p>\n<h4 id=\"scale-independent-pixels\">Scale Independent Pixels <a class=\"heading-anchor-permalink\" href=\"#scale-independent-pixels\">#</a></h4>\n<ul>\n<li><code>sp</code> is used for text size</li>\n<li>It makes textsize consistent across devices with different screen resolutions.</li>\n<li>It takes the user font size preference into account.</li>\n</ul>\n",
      "id": 9
    },
    {
      "path": "1._Basics_-_Android_UI/L1_-_Building_Layouts/8._Some_attributes/0_index.md",
      "url": "1._Basics_-_Android_UI/L1_-_Building_Layouts/8._Some_attributes/0_index.html",
      "content": "# 8. Some attributes\nCreated Saturday 24 October 2020\n\n![](./8._Some_attributes/pasted_image.png)\n![](./8._Some_attributes/pasted_image001.png)\n\n",
      "html": "<h1 id=\"8.-some-attributes\">8. Some attributes <a class=\"heading-anchor-permalink\" href=\"#8.-some-attributes\">#</a></h1>\n<p>Created Saturday 24 October 2020</p>\n<p><img src=\"./8._Some_attributes/pasted_image.png\" alt=\"\">\n<img src=\"./8._Some_attributes/pasted_image001.png\" alt=\"\"></p>\n",
      "id": 10
    },
    {
      "path": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/1._View_groups/0_index.md",
      "url": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/1._View_groups/0_index.html",
      "content": "# 1. View groups\nCreated Saturday 24 October 2020\n\n\n* A view group just a view. \n* It is supposed to be the container for other views.\n* It is invisible and rectangular, just like any other view.\n\n![](./1._View_groups/pasted_image.png)\n\n* View groups are also called parent views.\n* A view group can control the children inside it, using some rules.\n\n\n*****\n\nThere are two types of view groups:\n\n1. **LinearLayout** - Children views are arranged as an array(i.e as rows or columns).\n\n![](./1._View_groups/pasted_image001.png)  ![](./1._View_groups/pasted_image002.png)\n\n2. **RelativeLayout** - Children are arranged with respect to the parent and/or siblings.\n\n![](./1._View_groups/pasted_image003.png) ![](./1._View_groups/pasted_image004.png)\n\n*****\n\n\n#### XML Syntax for LinearLayout\n\t<LinearLayout\n\t    android:layout_height=\"wrap_content\"\n\t    android:layout_width=\"wrap_content\"\n\t    android:orientation=\"vertical\">\n\t\n\t    <TextView\n\t        android:layout_height=\"wrap_content\"\n\t        android:layout_width=\"wrap_content\"\n\t        android:text=\"Guest List\" />\n\t    <TextView android:text=\"Kunal\" />\n\t<LinearLayout />\n\n![](./1._View_groups/pasted_image005.png)\nNote - In this picture, background colors have been added for clarity, code for them is actually absent.\n\n*****\n\n\n* View groups are have an explicit closing bracket, because they have the child views as content.\n* The mode for LinearLayout is set using ``orientation`` = ``vertical`` or ``horizontal``(the default).\n\n![](./1._View_groups/pasted_image006.png)\n\n",
      "html": "<h1 id=\"1.-view-groups\">1. View groups <a class=\"heading-anchor-permalink\" href=\"#1.-view-groups\">#</a></h1>\n<p>Created Saturday 24 October 2020</p>\n<ul>\n<li>A view group just a view.</li>\n<li>It is supposed to be the container for other views.</li>\n<li>It is invisible and rectangular, just like any other view.</li>\n</ul>\n<p><img src=\"./1._View_groups/pasted_image.png\" alt=\"\"></p>\n<ul>\n<li>View groups are also called parent views.</li>\n<li>A view group can control the children inside it, using some rules.</li>\n</ul>\n<hr>\n<p>There are two types of view groups:</p>\n<ol>\n<li><strong>LinearLayout</strong> - Children views are arranged as an array(i.e as rows or columns).</li>\n</ol>\n<p><img src=\"./1._View_groups/pasted_image001.png\" alt=\"\">  <img src=\"./1._View_groups/pasted_image002.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li><strong>RelativeLayout</strong> - Children are arranged with respect to the parent and/or siblings.</li>\n</ol>\n<p><img src=\"./1._View_groups/pasted_image003.png\" alt=\"\"> <img src=\"./1._View_groups/pasted_image004.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"xml-syntax-for-linearlayout\">XML Syntax for LinearLayout <a class=\"heading-anchor-permalink\" href=\"#xml-syntax-for-linearlayout\">#</a></h4>\n<pre><code>&lt;LinearLayout\n    android:layout_height=&quot;wrap_content&quot;\n    android:layout_width=&quot;wrap_content&quot;\n    android:orientation=&quot;vertical&quot;&gt;\n\n    &lt;TextView\n        android:layout_height=&quot;wrap_content&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:text=&quot;Guest List&quot; /&gt;\n    &lt;TextView android:text=&quot;Kunal&quot; /&gt;\n&lt;LinearLayout /&gt;\n</code></pre>\n<p><img src=\"./1._View_groups/pasted_image005.png\" alt=\"\">\nNote - In this picture, background colors have been added for clarity, code for them is actually absent.</p>\n<hr>\n<ul>\n<li>View groups are have an explicit closing bracket, because they have the child views as content.</li>\n<li>The mode for LinearLayout is set using <code>orientation</code> = <code>vertical</code> or <code>horizontal</code>(the default).</li>\n</ul>\n<p><img src=\"./1._View_groups/pasted_image006.png\" alt=\"\"></p>\n",
      "id": 11
    },
    {
      "path": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/2._XML_namespace_declaration/0_index.md",
      "url": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/2._XML_namespace_declaration/0_index.html",
      "content": "# 2. XML namespace declaration\nCreated Saturday 24 October 2020\n\n#### Namespace\nA namespace contains information about the attributes and their allowed values.\n\n* The most common is ``android``\n\n\t<LinearLayout \n\t\txmlns:android=\"http://schemas.android.com/apk/res/android\" \n\t\tandroid:layout_height=\"500dp\"\n\t\t>\n\t<LinearLayout/>\n\n\n#### Syntax for namespaces\n\n* Declaration of namespace\n\n``xlmns:android=\"namespace_location_or_URL\"``\n\n* Using the namespace anywhere inside the tag.\n\n``android:``**``attribute``**``=\"value\"``\n\nNote: Double quotes are necessary for values.\n\n*****\n\nThere are other namespaces, like ``tools``\n\n* Namespaces are usually declared in the root tag where the attributes will be used inside.\n\n\t<RootTag xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\txmlns:tools=\"http://schemas.android.com/tools\" >\n\n\n#### Design Time attributes\nThese are attributes that are for preview in Android Studio, i.e they don't show up at runtime.\n![](./2._XML_namespace_declaration/pasted_image.png)\n\n* ``android:text`` is different from this. It is still accessible.\n\n\n",
      "html": "<h1 id=\"2.-xml-namespace-declaration\">2. XML namespace declaration <a class=\"heading-anchor-permalink\" href=\"#2.-xml-namespace-declaration\">#</a></h1>\n<p>Created Saturday 24 October 2020</p>\n<h4 id=\"namespace\">Namespace <a class=\"heading-anchor-permalink\" href=\"#namespace\">#</a></h4>\n<p>A namespace contains information about the attributes and their allowed values.</p>\n<ul>\n<li>\n<p>The most common is <code>android</code></p>\n<p><LinearLayout \n  \txmlns:android=\"http://schemas.android.com/apk/res/android\" \n  \tandroid:layout_height=\"500dp\"\n  \t>\n<LinearLayout/></p>\n</li>\n</ul>\n<h4 id=\"syntax-for-namespaces\">Syntax for namespaces <a class=\"heading-anchor-permalink\" href=\"#syntax-for-namespaces\">#</a></h4>\n<ul>\n<li>Declaration of namespace</li>\n</ul>\n<p><code>xlmns:android=&quot;namespace_location_or_URL&quot;</code></p>\n<ul>\n<li>Using the namespace anywhere inside the tag.</li>\n</ul>\n<p><code>android:</code><strong><code>attribute</code></strong><code>=&quot;value&quot;</code></p>\n<p>Note: Double quotes are necessary for values.</p>\n<hr>\n<p>There are other namespaces, like <code>tools</code></p>\n<ul>\n<li>\n<p>Namespaces are usually declared in the root tag where the attributes will be used inside.</p>\n<p><RootTag xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:tools=\"http://schemas.android.com/tools\" ></p>\n</li>\n</ul>\n<h4 id=\"design-time-attributes\">Design Time attributes <a class=\"heading-anchor-permalink\" href=\"#design-time-attributes\">#</a></h4>\n<p>These are attributes that are for preview in Android Studio, i.e they don’t show up at runtime.\n<img src=\"./2._XML_namespace_declaration/pasted_image.png\" alt=\"\"></p>\n<ul>\n<li><code>android:text</code> is different from this. It is still accessible.</li>\n</ul>\n",
      "id": 12
    },
    {
      "path": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/3._match_parent/0_index.md",
      "url": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/3._match_parent/0_index.html",
      "content": "# 3. match parent\nCreated Saturday 24 October 2020\n\nFor setting dimensions, we have seen fixed(i.e explicit) and ``wrap_content``(wrap tightly around the content).\nThere is another size value, called ``match_parent``**.**\n\n* It sets the size equal to the width/height of the parent. i.e Child stretches to match parent's width/height.\n\n![](./3._match_parent/pasted_image.png)\n![](./3._match_parent/pasted_image001.png)\n\n* When we use this value, the **succeeding** elements(which are non-match_parent) are pushed out of the screen(if the dimension is tha same as orientation of siblings).\n* This value does not affect preceding *elements*.\n\n[wqeqewqwe](./wqeqewqwe.md)\n\n",
      "html": "<h1 id=\"3.-match-parent\">3. match parent <a class=\"heading-anchor-permalink\" href=\"#3.-match-parent\">#</a></h1>\n<p>Created Saturday 24 October 2020</p>\n<p>For setting dimensions, we have seen fixed(i.e explicit) and <code>wrap_content</code>(wrap tightly around the content).\nThere is another size value, called <code>match_parent</code><strong>.</strong></p>\n<ul>\n<li>It sets the size equal to the width/height of the parent. i.e Child stretches to match parent’s width/height.</li>\n</ul>\n<p><img src=\"./3._match_parent/pasted_image.png\" alt=\"\">\n<img src=\"./3._match_parent/pasted_image001.png\" alt=\"\"></p>\n<ul>\n<li>When we use this value, the <strong>succeeding</strong> elements(which are non-match_parent) are pushed out of the screen(if the dimension is tha same as orientation of siblings).</li>\n<li>This value does not affect preceding <em>elements</em>.</li>\n</ul>\n<p><a href=\"./wqeqewqwe.html\">wqeqewqwe</a></p>\n",
      "id": 13
    },
    {
      "path": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/4._layout_weight/0_index.md",
      "url": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/4._layout_weight/0_index.html",
      "content": "# 4. layout weight\nCreated Saturday 24 October 2020\n\nSuppose we have a linear layout(vertical orientation), and we want to fill it completely with four TextViews such each takes up the same space as others.\nApproaches:\n\n1. hard code(dp) - does **not** work for all devices.\n2. ``wrap_content`` - does **not** fill the view completely.\n3. ``match_parent`` - the first TextView will take up all space.\n\n\n* We are out of options.\n\n\n*****\n\nWe need the concept of **weight** here.\n\n* All views(children) that need weight are assigned a *__non-zero__* ``layout_weight`` value, and the relevant(the one being set) dimension is set to **zero**(this is compulsory).\n* A child with no weight attribute has a default weight of zero. Dimensions for such a view must be specified. It can be though of as a non-participating child.\n* layout_weights determine the sharing ratio of the remaining screen real estate, i.e *after* placing all the non-participating children.\n\n\n*****\n\nSyntax: This attribute is set for children only. The parent remains untouched.\nSteps:\n\n1. Set the ratios(integral)\n2. Set the participating children dimensions to zero(because dimensions are mandatory).\n\nNote: \n\n* If all ratios are the same, it is the same as 1:1:1....\n* If there's only one participating child, then weight does not matter, because it will fill up the whole(remaining) space.\n* If a participating child has a dimension set to non-zero, it does not affect anything. But doing this is discouraged.\n* layout_weight works only for a LinearLayout.\n\n\n*****\n\n**Example**\n\t<LinearLayout\n\t    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    android:orientation=\"vertical\"\n\t    android:layout_width=\"match_parent\"\n\t    android:layout_height=\"match_parent\"\n\t    android:background=\"@android:color/darker_gray\">\n\t\n\t    <TextView\n\t        android:text=\"VIP List\"\n\t        android:layout_width=\"wrap_content\"\n\t        android:layout_weight=\"1\"\n\t           android:layout_height=\"10dp\"\n\t        android:background=\"#4CAF50\"\n\t        android:textSize=\"24sp\" />\n\t\n\t    <TextView\n\t        android:text=\"Kunal\"\n\t        android:layout_width=\"wrap_content\"\n\t       android:layout_weight=\"1\"\n\t           android:layout_height=\"0dp\"\n\t        android:background=\"#4CAFFF\"\n\t        android:textSize=\"24sp\" />\n\t\n\t    <TextView\n\t        android:text=\"Kagure\"\n\t        android:layout_width=\"wrap_content\"\n\t        android:layout_weight=\"1\"\n\t           android:layout_height=\"0dp\"\n\t        android:background=\"#4CFF90\"\n\t        android:textSize=\"24sp\" />\n\t\n\t    <TextView\n\t        android:text=\"Lyla\"\n\t        android:layout_width=\"wrap_content\"\n\t        android:layout_height=\"0dp\"\n\t      android:layout_weight=\"1\"\n\t        android:background=\"#FFAF50\"\n\t        android:textSize=\"24sp\" />\n\t\n\t</LinearLayout>\n\n![](./4._layout_weight/pasted_image.png)\n\n*****\n\nHow do weights work?\n\n* Initially, the non-participating children(which have non-zero dimensions) are placed on the screen. The remaining(weighted children) are flat(because we set them to 0dp).\n* The remaining space is then divided amongst the flat views, inflating them in the process.\n\n\n*****\n\n**Example - 1**\n![](./4._layout_weight/pasted_image001.png)\nHow can we make this?\n\n* We want the icons to be of fixed sizes, and the EditText to expand/shrink on different devices.\n* Set ``layout_height`` to ``wrap_content``, for all views.\n* Set ``layout_width`` to ``wrap_content`` for the icons.\n* For the EditText, set **layout_weight** as 1 and ``layout_width``=0dp.\n* This way our EditText can resize on all devices.\n\n**Solution**\n![](./4._layout_weight/pasted_image002.png)\n\n**Example - 2**\n![](./4._layout_weight/pasted_image003.png)\n\n**Example - 3**\n![](./4._layout_weight/pasted_image004.png)\n\n* Weights are for managing space dynamically inside a LinearLayout.\n\n\n",
      "html": "<h1 id=\"4.-layout-weight\">4. layout weight <a class=\"heading-anchor-permalink\" href=\"#4.-layout-weight\">#</a></h1>\n<p>Created Saturday 24 October 2020</p>\n<p>Suppose we have a linear layout(vertical orientation), and we want to fill it completely with four TextViews such each takes up the same space as others.\nApproaches:</p>\n<ol>\n<li>hard code(dp) - does <strong>not</strong> work for all devices.</li>\n<li><code>wrap_content</code> - does <strong>not</strong> fill the view completely.</li>\n<li><code>match_parent</code> - the first TextView will take up all space.</li>\n</ol>\n<ul>\n<li>We are out of options.</li>\n</ul>\n<hr>\n<p>We need the concept of <strong>weight</strong> here.</p>\n<ul>\n<li>All views(children) that need weight are assigned a <em><strong>non-zero</strong></em> <code>layout_weight</code> value, and the relevant(the one being set) dimension is set to <strong>zero</strong>(this is compulsory).</li>\n<li>A child with no weight attribute has a default weight of zero. Dimensions for such a view must be specified. It can be though of as a non-participating child.</li>\n<li>layout_weights determine the sharing ratio of the remaining screen real estate, i.e <em>after</em> placing all the non-participating children.</li>\n</ul>\n<hr>\n<p>Syntax: This attribute is set for children only. The parent remains untouched.\nSteps:</p>\n<ol>\n<li>Set the ratios(integral)</li>\n<li>Set the participating children dimensions to zero(because dimensions are mandatory).</li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>If all ratios are the same, it is the same as 1:1:1…</li>\n<li>If there’s only one participating child, then weight does not matter, because it will fill up the whole(remaining) space.</li>\n<li>If a participating child has a dimension set to non-zero, it does not affect anything. But doing this is discouraged.</li>\n<li>layout_weight works only for a LinearLayout.</li>\n</ul>\n<hr>\n<p><strong>Example</strong>\n<LinearLayout\n\t    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    android:orientation=\"vertical\"\n\t    android:layout_width=\"match_parent\"\n\t    android:layout_height=\"match_parent\"\n\t    android:background=\"@android:color/darker_gray\"></p>\n<pre><code>    &lt;TextView\n        android:text=&quot;VIP List&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_weight=&quot;1&quot;\n           android:layout_height=&quot;10dp&quot;\n        android:background=&quot;#4CAF50&quot;\n        android:textSize=&quot;24sp&quot; /&gt;\n\n    &lt;TextView\n        android:text=&quot;Kunal&quot;\n        android:layout_width=&quot;wrap_content&quot;\n       android:layout_weight=&quot;1&quot;\n           android:layout_height=&quot;0dp&quot;\n        android:background=&quot;#4CAFFF&quot;\n        android:textSize=&quot;24sp&quot; /&gt;\n\n    &lt;TextView\n        android:text=&quot;Kagure&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_weight=&quot;1&quot;\n           android:layout_height=&quot;0dp&quot;\n        android:background=&quot;#4CFF90&quot;\n        android:textSize=&quot;24sp&quot; /&gt;\n\n    &lt;TextView\n        android:text=&quot;Lyla&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;0dp&quot;\n      android:layout_weight=&quot;1&quot;\n        android:background=&quot;#FFAF50&quot;\n        android:textSize=&quot;24sp&quot; /&gt;\n\n&lt;/LinearLayout&gt;\n</code></pre>\n<p><img src=\"./4._layout_weight/pasted_image.png\" alt=\"\"></p>\n<hr>\n<p>How do weights work?</p>\n<ul>\n<li>Initially, the non-participating children(which have non-zero dimensions) are placed on the screen. The remaining(weighted children) are flat(because we set them to 0dp).</li>\n<li>The remaining space is then divided amongst the flat views, inflating them in the process.</li>\n</ul>\n<hr>\n<p><strong>Example - 1</strong>\n<img src=\"./4._layout_weight/pasted_image001.png\" alt=\"\">\nHow can we make this?</p>\n<ul>\n<li>We want the icons to be of fixed sizes, and the EditText to expand/shrink on different devices.</li>\n<li>Set <code>layout_height</code> to <code>wrap_content</code>, for all views.</li>\n<li>Set <code>layout_width</code> to <code>wrap_content</code> for the icons.</li>\n<li>For the EditText, set <strong>layout_weight</strong> as 1 and <code>layout_width</code>=0dp.</li>\n<li>This way our EditText can resize on all devices.</li>\n</ul>\n<p><strong>Solution</strong>\n<img src=\"./4._layout_weight/pasted_image002.png\" alt=\"\"></p>\n<p><strong>Example - 2</strong>\n<img src=\"./4._layout_weight/pasted_image003.png\" alt=\"\"></p>\n<p><strong>Example - 3</strong>\n<img src=\"./4._layout_weight/pasted_image004.png\" alt=\"\"></p>\n<ul>\n<li>Weights are for managing space dynamically inside a LinearLayout.</li>\n</ul>\n",
      "id": 14
    },
    {
      "path": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/5._RelativeLayout/0_index.md",
      "url": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/5._RelativeLayout/0_index.html",
      "content": "# 5. RelativeLayout\nCreated Saturday 24 October 2020\n\nHere, we arrange children relative to the parent/siblings.\n\n#### **Arrange w.r.t the parent**\n\n* Align(stick to the insides) child to a side of the parent. There are four boolean attributes(obvious) for the operand view\n\n![](./5._RelativeLayout/pasted_image.png)\nTwo options can be used in tandem to stick to a corner.\n\n* Center the child. It has 3 boolean attributes(obvious) for the operand view\n\t1. ``android:layout_centerVertical``\n\t2. ``android:layout_centerHorizontal``\n\t3. ``android:layout_centerInParent`` - center both horizontally and vertically\n\n**Notes**\n\n* By default, views align to the top-left of the parent. This means that even if ``layout_alignParentLeft`` is set to false, the child does not go to the right. It still stays on the left.\n* Unspecified attributes have false as default values.\n* If all 4 are true, the view is stretched.\n\nAdvice: Specify only what you need, everything else falls to top-left, just like English.\n\n*****\n\n\n#### **Arrange w.r.t a sibling**\n\n* To do this, we first need atleast one sibling which is aligned w.r.t the parent. This is informally called anchoring. Children are positioned relative to other siblings. **Explicit Anchoring is not necessary, but preferable.** The top-left anchoring is present anyway.\n* In XML: views are addressed by their **id**, after they've been declared.\n\t1. Declaration: ``android:id=\"@+id/``*``name_of_view``*``\"``. Here ``+`` denotes declaration.\n\t2. Use: ``\"@id/``*``name_of_view``*``\"``. ``+`` is not required here.\n* There are 8 ways to position a view w.r.t a sibling\n\nArgument is ``id`` of the sibling view.\nThese options can be classified into two types:\nAlign(stick from inside)\n\n1. ``layout_alignLeft``\n2. ``layout_alignRight``\n3. ``layout_alignTop``\n4. ``layout_alignBottom``\n\n\t\nStick from outside\n\n1. ``layout_toLeftOf``\n2. ``layout_toRightOf``\n3. ``layout_above``\n4. ``layout_below``\n\nNote:\n\n* Below only specifies verticality, it does not affect horizontal alignment. Same with all other attributes.\n* RelativeLayout is special because it allows views to **overlap** each other.\n* These attributes respect margins at contact edges.\n\n\n*****\n\nExample 1 - Default anchoring(top-left) is used here.\n![](./5._RelativeLayout/pasted_image001.png)\n\nExample 2 - One alignment attribute does only one thing. Here we set Omoju to be below Amy. We also made Amy align to the right: this did not cause Omoju to move with Amy top the right. This is because Omoju's attribute specified only vertical alignment, and not horizontal. Very intuitive.\n![](./5._RelativeLayout/pasted_image002.png)\n\n*****\n\nBecause Android supports all locales, there are additional attributes named start/end, used for all RTL flow, as in Arabic/Hebrew.\nSo we have 2 x (parent, alignSib, stickOut) = 6 extra attributes.\n\nThere are 2 other attributes.\n[Everything is listed here](https://developer.android.com/reference/android/widget/RelativeLayout.LayoutParams)\n\n",
      "html": "<h1 id=\"5.-relativelayout\">5. RelativeLayout <a class=\"heading-anchor-permalink\" href=\"#5.-relativelayout\">#</a></h1>\n<p>Created Saturday 24 October 2020</p>\n<p>Here, we arrange children relative to the parent/siblings.</p>\n<h4 id=\"arrange-w.r.t-the-parent\"><strong>Arrange w.r.t the parent</strong> <a class=\"heading-anchor-permalink\" href=\"#arrange-w.r.t-the-parent\">#</a></h4>\n<ul>\n<li>Align(stick to the insides) child to a side of the parent. There are four boolean attributes(obvious) for the operand view</li>\n</ul>\n<p><img src=\"./5._RelativeLayout/pasted_image.png\" alt=\"\">\nTwo options can be used in tandem to stick to a corner.</p>\n<ul>\n<li>Center the child. It has 3 boolean attributes(obvious) for the operand view\n<ol>\n<li><code>android:layout_centerVertical</code></li>\n<li><code>android:layout_centerHorizontal</code></li>\n<li><code>android:layout_centerInParent</code> - center both horizontally and vertically</li>\n</ol>\n</li>\n</ul>\n<p><strong>Notes</strong></p>\n<ul>\n<li>By default, views align to the top-left of the parent. This means that even if <code>layout_alignParentLeft</code> is set to false, the child does not go to the right. It still stays on the left.</li>\n<li>Unspecified attributes have false as default values.</li>\n<li>If all 4 are true, the view is stretched.</li>\n</ul>\n<p>Advice: Specify only what you need, everything else falls to top-left, just like English.</p>\n<hr>\n<h4 id=\"arrange-w.r.t-a-sibling\"><strong>Arrange w.r.t a sibling</strong> <a class=\"heading-anchor-permalink\" href=\"#arrange-w.r.t-a-sibling\">#</a></h4>\n<ul>\n<li>To do this, we first need atleast one sibling which is aligned w.r.t the parent. This is informally called anchoring. Children are positioned relative to other siblings. <strong>Explicit Anchoring is not necessary, but preferable.</strong> The top-left anchoring is present anyway.</li>\n<li>In XML: views are addressed by their <strong>id</strong>, after they’ve been declared.\n<ol>\n<li>Declaration: <code>android:id=&quot;@+id/</code><em><code>name_of_view</code></em><code>&quot;</code>. Here <code>+</code> denotes declaration.</li>\n<li>Use: <code>&quot;@id/</code><em><code>name_of_view</code></em><code>&quot;</code>. <code>+</code> is not required here.</li>\n</ol>\n</li>\n<li>There are 8 ways to position a view w.r.t a sibling</li>\n</ul>\n<p>Argument is <code>id</code> of the sibling view.\nThese options can be classified into two types:\nAlign(stick from inside)</p>\n<ol>\n<li><code>layout_alignLeft</code></li>\n<li><code>layout_alignRight</code></li>\n<li><code>layout_alignTop</code></li>\n<li><code>layout_alignBottom</code></li>\n</ol>\n<p>Stick from outside</p>\n<ol>\n<li><code>layout_toLeftOf</code></li>\n<li><code>layout_toRightOf</code></li>\n<li><code>layout_above</code></li>\n<li><code>layout_below</code></li>\n</ol>\n<p>Note:</p>\n<ul>\n<li>Below only specifies verticality, it does not affect horizontal alignment. Same with all other attributes.</li>\n<li>RelativeLayout is special because it allows views to <strong>overlap</strong> each other.</li>\n<li>These attributes respect margins at contact edges.</li>\n</ul>\n<hr>\n<p>Example 1 - Default anchoring(top-left) is used here.\n<img src=\"./5._RelativeLayout/pasted_image001.png\" alt=\"\"></p>\n<p>Example 2 - One alignment attribute does only one thing. Here we set Omoju to be below Amy. We also made Amy align to the right: this did not cause Omoju to move with Amy top the right. This is because Omoju’s attribute specified only vertical alignment, and not horizontal. Very intuitive.\n<img src=\"./5._RelativeLayout/pasted_image002.png\" alt=\"\"></p>\n<hr>\n<p>Because Android supports all locales, there are additional attributes named start/end, used for all RTL flow, as in Arabic/Hebrew.\nSo we have 2 x (parent, alignSib, stickOut) = 6 extra attributes.</p>\n<p>There are 2 other attributes.\n<a href=\"https://developer.android.com/reference/android/widget/RelativeLayout.LayoutParams\">Everything is listed here</a></p>\n",
      "id": 15
    },
    {
      "path": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/6._Padding_and_Margin/0_index.md",
      "url": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/6._Padding_and_Margin/0_index.html",
      "content": "# 6. Padding and Margin\nCreated Sunday 25 October 2020\n\n\n* We need to have some whitepace, to avoid overcrowding.\n\n\n#### Padding\nWhitespace between content(inside) and the border of the view.\n![](./6._Padding_and_Margin/pasted_image.png)\n\n* If padding is set, all 4 directions also get the same value, unless they are individually set.\n* By default, padding is zero for all directions.\n\n\n#### Margin\nWhitespace outside the border of the view. Like a force field!\n![](./6._Padding_and_Margin/pasted_image001.png)\n\n* If padding is set, all 4 directions also get the same value, unless they are set indvidually.\n* Note the layout_, because we are changing the 'outside' of the view, not the content.\n\n\n*****\n\n**Question **- Is the choice between padding and margin irrelevant, if the display looks identical when either is used.\n**Answer** - No, margin and padding are fundamentally different. They may \"look\" identical. This can be demonstrated by setting the background color of the view group and the child. In case of padding, the child will be enlarged to accomodate pad the text inside. If margin is used, the parent enlarges itself due to the margin.\n![](./6._Padding_and_Margin/pasted_image002.png)\nNote:\n\n* Padding attributes don't start with ``layout_``, because padding changes the content inside the view.\n* Margin attributes start with ``layout_`` because margin does not affect the content. It only affects outside of the view.\n\n\n",
      "html": "<h1 id=\"6.-padding-and-margin\">6. Padding and Margin <a class=\"heading-anchor-permalink\" href=\"#6.-padding-and-margin\">#</a></h1>\n<p>Created Sunday 25 October 2020</p>\n<ul>\n<li>We need to have some whitepace, to avoid overcrowding.</li>\n</ul>\n<h4 id=\"padding\">Padding <a class=\"heading-anchor-permalink\" href=\"#padding\">#</a></h4>\n<p>Whitespace between content(inside) and the border of the view.\n<img src=\"./6._Padding_and_Margin/pasted_image.png\" alt=\"\"></p>\n<ul>\n<li>If padding is set, all 4 directions also get the same value, unless they are individually set.</li>\n<li>By default, padding is zero for all directions.</li>\n</ul>\n<h4 id=\"margin\">Margin <a class=\"heading-anchor-permalink\" href=\"#margin\">#</a></h4>\n<p>Whitespace outside the border of the view. Like a force field!\n<img src=\"./6._Padding_and_Margin/pasted_image001.png\" alt=\"\"></p>\n<ul>\n<li>If padding is set, all 4 directions also get the same value, unless they are set indvidually.</li>\n<li>Note the layout_, because we are changing the ‘outside’ of the view, not the content.</li>\n</ul>\n<hr>\n<p>**Question **- Is the choice between padding and margin irrelevant, if the display looks identical when either is used.\n<strong>Answer</strong> - No, margin and padding are fundamentally different. They may “look” identical. This can be demonstrated by setting the background color of the view group and the child. In case of padding, the child will be enlarged to accomodate pad the text inside. If margin is used, the parent enlarges itself due to the margin.\n<img src=\"./6._Padding_and_Margin/pasted_image002.png\" alt=\"\">\nNote:</p>\n<ul>\n<li>Padding attributes don’t start with <code>layout_</code>, because padding changes the content inside the view.</li>\n<li>Margin attributes start with <code>layout_</code> because margin does not affect the content. It only affects outside of the view.</li>\n</ul>\n",
      "id": 16
    },
    {
      "path": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/wqeqewqwe.md",
      "url": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/wqeqewqwe.html",
      "content": "# wqeqewqwe\n\n",
      "html": "<h1 id=\"wqeqewqwe\">wqeqewqwe <a class=\"heading-anchor-permalink\" href=\"#wqeqewqwe\">#</a></h1>\n",
      "id": 17
    },
    {
      "path": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/zConclusion.md",
      "url": "1._Basics_-_Android_UI/L2_-_Building_Layouts_2/zConclusion.html",
      "content": "# zConclusion\nCreated Sunday 25 October 2020\n\n\n* LinearLayout does not allow overlapping views.\n* RelativeLayout does not allow weights, but it does allow overlap.\n\n\n\n* All attributes which set the outsides of a view(i.e don't affect content) start with ``layout_``.\n* Orientation must be specified for a LinearLayout.\n* alignRight and layout_alignParentRight are two different things.\n* The root view covers the whole screen only if both width and height are set to ``match_parent``.\n* For attribute names, spaces are replaced by underscores and hypenated words are written in camelcase.\n* Attribute names are actually a type of active voice. This quells ambiguity. e.g ``layout_toRightOf`` is better than ``layout_right`` which is ambiguous.\n* 0dp for weighted children in LinearLayout improves readability.\n* Prefer LinearLayout over RelativeLayout unless necessary, KISS.\n* All ``id``s, and resource references are simply integers in Java. They are not a special class or data type.\n\n\n*****\n\n\n* Reuse code - helps in updates, decreases impact of change etc.\n* Start from figuring out the data and logic, then design the app UI.\n* Steps for UI design:\n\t1. Decide the views\n\t2. Position the views\n\t3. Style the views\n* Get news from the Android Dev Blog.\n* Read things, and what they do. If it is required, see how it's done.\n* Not all elements in Android end with view, e.g Button.\n\n\n",
      "html": "<h1 id=\"zconclusion\">zConclusion <a class=\"heading-anchor-permalink\" href=\"#zconclusion\">#</a></h1>\n<p>Created Sunday 25 October 2020</p>\n<ul>\n<li>\n<p>LinearLayout does not allow overlapping views.</p>\n</li>\n<li>\n<p>RelativeLayout does not allow weights, but it does allow overlap.</p>\n</li>\n<li>\n<p>All attributes which set the outsides of a view(i.e don’t affect content) start with <code>layout_</code>.</p>\n</li>\n<li>\n<p>Orientation must be specified for a LinearLayout.</p>\n</li>\n<li>\n<p>alignRight and layout_alignParentRight are two different things.</p>\n</li>\n<li>\n<p>The root view covers the whole screen only if both width and height are set to <code>match_parent</code>.</p>\n</li>\n<li>\n<p>For attribute names, spaces are replaced by underscores and hypenated words are written in camelcase.</p>\n</li>\n<li>\n<p>Attribute names are actually a type of active voice. This quells ambiguity. e.g <code>layout_toRightOf</code> is better than <code>layout_right</code> which is ambiguous.</p>\n</li>\n<li>\n<p>0dp for weighted children in LinearLayout improves readability.</p>\n</li>\n<li>\n<p>Prefer LinearLayout over RelativeLayout unless necessary, KISS.</p>\n</li>\n<li>\n<p>All <code>id</code>s, and resource references are simply integers in Java. They are not a special class or data type.</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>Reuse code - helps in updates, decreases impact of change etc.</li>\n<li>Start from figuring out the data and logic, then design the app UI.</li>\n<li>Steps for UI design:\n<ol>\n<li>Decide the views</li>\n<li>Position the views</li>\n<li>Style the views</li>\n</ol>\n</li>\n<li>Get news from the Android Dev Blog.</li>\n<li>Read things, and what they do. If it is required, see how it’s done.</li>\n<li>Not all elements in Android end with view, e.g Button.</li>\n</ul>\n",
      "id": 18
    },
    {
      "path": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/0_index.md",
      "url": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/0_index.html",
      "content": "# L3 - Practice - Building Layouts\nCreated Sunday 25 October 2020\n\nWe install JDK and Android Studio.\n\n",
      "html": "<h1 id=\"l3---practice---building-layouts\">L3 - Practice - Building Layouts <a class=\"heading-anchor-permalink\" href=\"#l3---practice---building-layouts\">#</a></h1>\n<p>Created Sunday 25 October 2020</p>\n<p>We install JDK and Android Studio.</p>\n",
      "id": 19
    },
    {
      "path": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/1._Troubleshooting.md",
      "url": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/1._Troubleshooting.html",
      "content": "# 1. Troubleshooting\nCreated Sunday 25 October 2020\n\nThe SDK is not a utility or application software. \nIt is necessary.\nIt is program which gives enables us to create and run Java programs.\n\n",
      "html": "<h1 id=\"1.-troubleshooting\">1. Troubleshooting <a class=\"heading-anchor-permalink\" href=\"#1.-troubleshooting\">#</a></h1>\n<p>Created Sunday 25 October 2020</p>\n<p>The SDK is not a utility or application software.\nIt is necessary.\nIt is program which gives enables us to create and run Java programs.</p>\n",
      "id": 20
    },
    {
      "path": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/2._Hello_World_App/0_index.md",
      "url": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/2._Hello_World_App/0_index.html",
      "content": "# 2. Hello World App\nCreated Sunday 25 October 2020\n\n[./_HappyBirthday](./2._Hello_World_App/_HappyBirthday)\n\n* The package name must uniquely identify an app in the Play Store.\n* Package name is actually company_domain_reversed.ApplicationName\n\n![](./2._Hello_World_App/pasted_image.png)\n\n*****\n\nWhich OS to target?\n\n* Select an OS which supports your customer base. Apps are forward compatible.\n\n![](./2._Hello_World_App/pasted_image001.png)\n\n* Why not select the oldest OS?\n\nOld OSs have less features.\n\n*****\n\n**How to create basic scaffold and see that it works?**\n\n* Make an app with an empty activity.\n* Run it.\n\n\n*****\n\nThere are two ways to test an app:\n\n1. Using a real device - The device is connected to the computer via USB cable or WiFi. To do this via USB, first make yourself a developer by tapping the build number until the message \"You are now a developer\" pops up. Developer Options are now available, enable them and switch on USB Debugging(allow connection when prompted on phone). Connect the USB. Select your device from Android Studio, then run the app. That's all. The WiFi method requires a plugin.\n2. Using the AVD - Android Virtual Device. It is written as \"<device> <OS_level> <architecture>\", e.g \"Nexus 5 API 21 x86\". The AVD is used to manage virtual devices. To make a virtual device, go to AVD > New Device. Select the API Level and other specs, name the device. Some OS API's may be downloaded automatically. To run the app, select current device. And run.\n\n\n",
      "html": "<h1 id=\"2.-hello-world-app\">2. Hello World App <a class=\"heading-anchor-permalink\" href=\"#2.-hello-world-app\">#</a></h1>\n<p>Created Sunday 25 October 2020</p>\n<p><a href=\"./2._Hello_World_App/_HappyBirthday\">./_HappyBirthday</a></p>\n<ul>\n<li>The package name must uniquely identify an app in the Play Store.</li>\n<li>Package name is actually company_domain_reversed.ApplicationName</li>\n</ul>\n<p><img src=\"./2._Hello_World_App/pasted_image.png\" alt=\"\"></p>\n<hr>\n<p>Which OS to target?</p>\n<ul>\n<li>Select an OS which supports your customer base. Apps are forward compatible.</li>\n</ul>\n<p><img src=\"./2._Hello_World_App/pasted_image001.png\" alt=\"\"></p>\n<ul>\n<li>Why not select the oldest OS?</li>\n</ul>\n<p>Old OSs have less features.</p>\n<hr>\n<p><strong>How to create basic scaffold and see that it works?</strong></p>\n<ul>\n<li>Make an app with an empty activity.</li>\n<li>Run it.</li>\n</ul>\n<hr>\n<p>There are two ways to test an app:</p>\n<ol>\n<li>Using a real device - The device is connected to the computer via USB cable or WiFi. To do this via USB, first make yourself a developer by tapping the build number until the message “You are now a developer” pops up. Developer Options are now available, enable them and switch on USB Debugging(allow connection when prompted on phone). Connect the USB. Select your device from Android Studio, then run the app. That’s all. The WiFi method requires a plugin.</li>\n<li>Using the AVD - Android Virtual Device. It is written as &quot;<device> &lt;OS_level&gt; <architecture>&quot;, e.g “Nexus 5 API 21 x86”. The AVD is used to manage virtual devices. To make a virtual device, go to AVD &gt; New Device. Select the API Level and other specs, name the device. Some OS API’s may be downloaded automatically. To run the app, select current device. And run.</li>\n</ol>\n",
      "id": 21
    },
    {
      "path": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/3._Birthday_Card_App/0_index.md",
      "url": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/3._Birthday_Card_App/0_index.html",
      "content": "# 3. Birthday Card App\nCreated Monday 26 October 2020\n\n\n* Similar to a webpage, first the skeleton, then the stylistic elements.\n\n![](./3._Birthday_Card_App/pasted_image.png)\n\n* We first copy the image into the res/drawable folder. The image is accessed using ``android:src=\"@drawable/androidparty\"``\n* We use a ``RelativeLayout``, and add the image and texts.\n\n\t<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    xmlns:tools=\"http://schemas.android.com/tools\"\n\t    android:layout_width=\"match_parent\"\n\t    android:layout_height=\"match_parent\"\n\t    tools:context=\".MainActivity\">\n\t\n\t    <ImageView\n\t        android:layout_width=\"match_parent\"\n\t        android:layout_height=\"match_parent\"\n\t        android:src=\"@drawable/androidparty\"\n\t        android:layout_centerHorizontal=\"true\"\n\t        android:layout_centerVertical=\"true\"/>\n\t\n\t    <TextView\n\t        android:layout_width=\"wrap_content\"\n\t        android:layout_height=\"wrap_content\"\n\t        android:text=\"Happy Birthday Jatin\"\n\t        android:textSize=\"20sp\"/>\n\t    <TextView\n\t        android:layout_alignParentBottom=\"true\"\n\t        android:layout_alignParentRight=\"true\"\n\t        android:layout_width=\"wrap_content\"\n\t        android:layout_height=\"wrap_content\"\n\t        android:text=\"From Sanjar\"\n\t        android:textSize=\"20sp\"/>\n\t</RelativeLayout>\n\nResult\n![](./3._Birthday_Card_App/pasted_image001.png)\n\n*****\n\n\n* Our goal is this\n\n![](./3._Birthday_Card_App/pasted_image002.png)\nThings to be done:\n\n* Make the text larger, set textColor, fontFamily etc. Note than if a font is not available for an old Android version, the font falls back to the default.\n* Stretching the image - We use the 'scaleType' attribute. It can take many values, but we'll look at two important ones:\n\t1. center - centers the image.\n\t2. centerCrop - Scales uniformly till the min(new_width, new_height) is >= min(width, height) - padding, then crops off the image and places it to the center.\n\n![](./3._Birthday_Card_App/pasted_image003.png)\n\n*****\n\n\n17. We need to add some space around the text - What to use? padding or layout_margin\n18. Both look the same, but are different. And don't apply both!\n\n\n",
      "html": "<h1 id=\"3.-birthday-card-app\">3. Birthday Card App <a class=\"heading-anchor-permalink\" href=\"#3.-birthday-card-app\">#</a></h1>\n<p>Created Monday 26 October 2020</p>\n<ul>\n<li>Similar to a webpage, first the skeleton, then the stylistic elements.</li>\n</ul>\n<p><img src=\"./3._Birthday_Card_App/pasted_image.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>We first copy the image into the res/drawable folder. The image is accessed using <code>android:src=&quot;@drawable/androidparty&quot;</code></p>\n</li>\n<li>\n<p>We use a <code>RelativeLayout</code>, and add the image and texts.</p>\n<p><RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".MainActivity\"></p>\n<pre><code>  &lt;ImageView\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;match_parent&quot;\n      android:src=&quot;@drawable/androidparty&quot;\n      android:layout_centerHorizontal=&quot;true&quot;\n      android:layout_centerVertical=&quot;true&quot;/&gt;\n\n  &lt;TextView\n      android:layout_width=&quot;wrap_content&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:text=&quot;Happy Birthday Jatin&quot;\n      android:textSize=&quot;20sp&quot;/&gt;\n  &lt;TextView\n      android:layout_alignParentBottom=&quot;true&quot;\n      android:layout_alignParentRight=&quot;true&quot;\n      android:layout_width=&quot;wrap_content&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:text=&quot;From Sanjar&quot;\n      android:textSize=&quot;20sp&quot;/&gt;\n</code></pre>\n  </RelativeLayout>\n</li>\n</ul>\n<p>Result\n<img src=\"./3._Birthday_Card_App/pasted_image001.png\" alt=\"\"></p>\n<hr>\n<ul>\n<li>Our goal is this</li>\n</ul>\n<p><img src=\"./3._Birthday_Card_App/pasted_image002.png\" alt=\"\">\nThings to be done:</p>\n<ul>\n<li>Make the text larger, set textColor, fontFamily etc. Note than if a font is not available for an old Android version, the font falls back to the default.</li>\n<li>Stretching the image - We use the ‘scaleType’ attribute. It can take many values, but we’ll look at two important ones:\n<ol>\n<li>center - centers the image.</li>\n<li>centerCrop - Scales uniformly till the min(new_width, new_height) is &gt;= min(width, height) - padding, then crops off the image and places it to the center.</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"./3._Birthday_Card_App/pasted_image003.png\" alt=\"\"></p>\n<hr>\n<ol start=\"17\">\n<li>We need to add some space around the text - What to use? padding or layout_margin</li>\n<li>Both look the same, but are different. And don’t apply both!</li>\n</ol>\n",
      "id": 22
    },
    {
      "path": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/3._Birthday_Card_App/Attributes_learned.md",
      "url": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/3._Birthday_Card_App/Attributes_learned.html",
      "content": "# Attributes learned\nCreated Monday 26 October 2020\n\nAll belong to the ``android`` namespace\n\n* text = \"I am a dev\"\n* textSize = \"20sp\"\n* textColor = \"@color/white\"\n* textStyle = \"italic\" or \"bold\"\n* textAlignment\n* fontFamily = \"sans-serif-light\"\n\n\n",
      "html": "<h1 id=\"attributes-learned\">Attributes learned <a class=\"heading-anchor-permalink\" href=\"#attributes-learned\">#</a></h1>\n<p>Created Monday 26 October 2020</p>\n<p>All belong to the <code>android</code> namespace</p>\n<ul>\n<li>text = “I am a dev”</li>\n<li>textSize = “20sp”</li>\n<li>textColor = “@color/white”</li>\n<li>textStyle = “italic” or “bold”</li>\n<li>textAlignment</li>\n<li>fontFamily = “sans-serif-light”</li>\n</ul>\n",
      "id": 23
    },
    {
      "path": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/4._Overlapping_Views/0_index.md",
      "url": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/4._Overlapping_Views/0_index.html",
      "content": "# 4. Overlapping Views\nCreated Monday 26 October 2020\n\n\n* Ordering of views in the XML code(top-down and nesting) determines the overlap order. \n* The first one(i.e in code) is at the bottom.\n* This can be seen in a ``RelativeLayout``.\n\n![](./4._Overlapping_Views/pasted_image.png) ![](./4._Overlapping_Views/pasted_image001.png)\n\n",
      "html": "<h1 id=\"4.-overlapping-views\">4. Overlapping Views <a class=\"heading-anchor-permalink\" href=\"#4.-overlapping-views\">#</a></h1>\n<p>Created Monday 26 October 2020</p>\n<ul>\n<li>Ordering of views in the XML code(top-down and nesting) determines the overlap order.</li>\n<li>The first one(i.e in code) is at the bottom.</li>\n<li>This can be seen in a <code>RelativeLayout</code>.</li>\n</ul>\n<p><img src=\"./4._Overlapping_Views/pasted_image.png\" alt=\"\"> <img src=\"./4._Overlapping_Views/pasted_image001.png\" alt=\"\"></p>\n",
      "id": 24
    },
    {
      "path": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/5._Project/0_index.md",
      "url": "1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/5._Project/0_index.html",
      "content": "# 5. Project\nCreated Monday 26 October 2020\n\nHorizontal\n![](./5._Project/pasted_image001.png)\n\n*****\n\nVertical\n![](./5._Project/pasted_image.png)\n\nWorks in both orientations out of the box.\n\n",
      "html": "<h1 id=\"5.-project\">5. Project <a class=\"heading-anchor-permalink\" href=\"#5.-project\">#</a></h1>\n<p>Created Monday 26 October 2020</p>\n<p>Horizontal\n<img src=\"./5._Project/pasted_image001.png\" alt=\"\"></p>\n<hr>\n<p>Vertical\n<img src=\"./5._Project/pasted_image.png\" alt=\"\"></p>\n<p>Works in both orientations out of the box.</p>\n",
      "id": 25
    },
    {
      "path": "2._Basics_-_User_Input/0_index.md",
      "url": "2._Basics_-_User_Input/0_index.html",
      "content": "# 2. Basics - User Input\nCreated Tuesday 27 October 2020\n\n Android User input - (4 days) - (<https://www.udacity.com/course/android-basics-user-input--ud836>)\n\n",
      "html": "<h1 id=\"2.-basics---user-input\">2. Basics - User Input <a class=\"heading-anchor-permalink\" href=\"#2.-basics---user-input\">#</a></h1>\n<p>Created Tuesday 27 October 2020</p>\n<p>Android User input - (4 days) - (<a href=\"https://www.udacity.com/course/android-basics-user-input--ud836\">https://www.udacity.com/course/android-basics-user-input--ud836</a>)</p>\n",
      "id": 26
    },
    {
      "path": "2._Basics_-_User_Input/L1_-_Activities/0_index.md",
      "url": "2._Basics_-_User_Input/L1_-_Activities/0_index.html",
      "content": "# L1 - Activities\nCreated Wednesday 28 October 2020\n\n[../_App_1](./_App_1)\n\n",
      "html": "<h1 id=\"l1---activities\">L1 - Activities <a class=\"heading-anchor-permalink\" href=\"#l1---activities\">#</a></h1>\n<p>Created Wednesday 28 October 2020</p>\n<p><a href=\"./_App_1\">…/_App_1</a></p>\n",
      "id": 27
    },
    {
      "path": "2._Basics_-_User_Input/L1_-_Activities/1._Make_the_layout/0_index.md",
      "url": "2._Basics_-_User_Input/L1_-_Activities/1._Make_the_layout/0_index.html",
      "content": "# 1. Make the layout\nCreated Tuesday 27 October 2020\n\n\n* Build a simple layout.\n* Steps:\n\t1. Decide the views\n\t2. Position the views\n\t3. Style them\n\n![](./1._Make_the_layout/pasted_image.png)\n\t<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    android:layout_width=\"match_parent\"\n\t    android:layout_height=\"match_parent\">\n\t\n\t    <LinearLayout\n\t        android:layout_width=\"match_parent\"\n\t        android:layout_height=\"wrap_content\"\n\t        android:orientation=\"vertical\"\n\t        android:padding=\"16dp\">\n\t\n\t        <TextView\n\t            android:layout_width=\"wrap_content\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:text=\"Quantity\"\n\t            android:textAllCaps=\"true\" />\n\t\n\t        <TextView\n\t            android:layout_width=\"wrap_content\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:paddingTop=\"16dp\"\n\t            android:paddingBottom=\"16dp\"\n\t            android:text=\"0\"\n\t            android:textColor=\"@color/black\"\n\t            android:textSize=\"16sp\" />\n\t\n\t        <Button\n\t            android:layout_width=\"wrap_content\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:text=\"Order\" />\n\t    </LinearLayout>\n\t</RelativeLayout>\n\n\n",
      "html": "<h1 id=\"1.-make-the-layout\">1. Make the layout <a class=\"heading-anchor-permalink\" href=\"#1.-make-the-layout\">#</a></h1>\n<p>Created Tuesday 27 October 2020</p>\n<ul>\n<li>Build a simple layout.</li>\n<li>Steps:\n<ol>\n<li>Decide the views</li>\n<li>Position the views</li>\n<li>Style them</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"./1._Make_the_layout/pasted_image.png\" alt=\"\">\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    android:layout_width=\"match_parent\"\n\t    android:layout_height=\"match_parent\"></p>\n<pre><code>    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:orientation=&quot;vertical&quot;\n        android:padding=&quot;16dp&quot;&gt;\n\n        &lt;TextView\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Quantity&quot;\n            android:textAllCaps=&quot;true&quot; /&gt;\n\n        &lt;TextView\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:paddingTop=&quot;16dp&quot;\n            android:paddingBottom=&quot;16dp&quot;\n            android:text=&quot;0&quot;\n            android:textColor=&quot;@color/black&quot;\n            android:textSize=&quot;16sp&quot; /&gt;\n\n        &lt;Button\n            android:layout_width=&quot;wrap_content&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:text=&quot;Order&quot; /&gt;\n    &lt;/LinearLayout&gt;\n&lt;/RelativeLayout&gt;\n</code></pre>\n",
      "id": 28
    },
    {
      "path": "2._Basics_-_User_Input/L1_-_Activities/2._Activities/0_index.md",
      "url": "2._Basics_-_User_Input/L1_-_Activities/2._Activities/0_index.html",
      "content": "# 2. Activities\nCreated Wednesday 28 October 2020\n\n\n* When we made the 'Just Java' app, we used a single 'activity'.\n* Activity - A single focused thing that a user can do.\n* An activity may have one or more screens(i.e layouts).\n\nFor example, the ConversationListActivity in Gmail consists of multiple layouts. Some of these layouts contain buttons to change the activity.\t\n![](./2._Activities/pasted_image.png)\nSingle activity but multiple screens(layouts). All the tabs viz Social, Promotions, Updates etc and their corresponding screens belong to the same activity, i.e viewing emails.\n\nAnother example of an activity is\n![](./2._Activities/pasted_image001.png)\n\n*****\n\n\n* An activity is focused on a single goal. Number of screens used is irrelevant.\n* Activities *contain* layouts, they are *not* layouts(screens) themselves.\n\nExample of activities - all have a different purpose\n![](./2._Activities/pasted_image002.png)\n\n*****\n\n\n* Each activity has atleast one logic file associated with it. It can be a Java or Kotlin file.\n* Our activity file, called MainActivity.java was created automatically, because we had selected Empty Activity while intializing the project in Android Studio.\n\n\n",
      "html": "<h1 id=\"2.-activities\">2. Activities <a class=\"heading-anchor-permalink\" href=\"#2.-activities\">#</a></h1>\n<p>Created Wednesday 28 October 2020</p>\n<ul>\n<li>When we made the ‘Just Java’ app, we used a single ‘activity’.</li>\n<li>Activity - A single focused thing that a user can do.</li>\n<li>An activity may have one or more screens(i.e layouts).</li>\n</ul>\n<p>For example, the ConversationListActivity in Gmail consists of multiple layouts. Some of these layouts contain buttons to change the activity.\t\n<img src=\"./2._Activities/pasted_image.png\" alt=\"\">\nSingle activity but multiple screens(layouts). All the tabs viz Social, Promotions, Updates etc and their corresponding screens belong to the same activity, i.e viewing emails.</p>\n<p>Another example of an activity is\n<img src=\"./2._Activities/pasted_image001.png\" alt=\"\"></p>\n<hr>\n<ul>\n<li>An activity is focused on a single goal. Number of screens used is irrelevant.</li>\n<li>Activities <em>contain</em> layouts, they are <em>not</em> layouts(screens) themselves.</li>\n</ul>\n<p>Example of activities - all have a different purpose\n<img src=\"./2._Activities/pasted_image002.png\" alt=\"\"></p>\n<hr>\n<ul>\n<li>Each activity has atleast one logic file associated with it. It can be a Java or Kotlin file.</li>\n<li>Our activity file, called MainActivity.java was created automatically, because we had selected Empty Activity while intializing the project in Android Studio.</li>\n</ul>\n",
      "id": 29
    },
    {
      "path": "2._Basics_-_User_Input/L1_-_Activities/3._Displaying_text_using_Java/0_index.md",
      "url": "2._Basics_-_User_Input/L1_-_Activities/3._Displaying_text_using_Java/0_index.html",
      "content": "# 3. Displaying text using Java\nCreated Friday 30 October 2020\n\n\n* Java code is run as methods. It is not like JavaScript.\n* Specify the callback method in the ``onClick`` attribute. The callback executes on clicking.\n* This callback function must be ``public`` have one ``View`` argument.\n* The argument passed(by the app) to the callback function is the host view itself(having the 'onClick' attribute). This makes it easy to interact with the host view, we don't have to locate it using an ``id``.\n\n\n*****\n\n\n#### Understanding Java code\n\n* onCreate() function runs as soon as our app is started.\n* It injects the views on the screen.\n\n\tpackage com.example.justjava;\n\t\n\timport androidx.appcompat.app.AppCompatActivity;\n\t\n\timport android.os.Bundle;\n\timport android.view.View;\n\timport android.widget.TextView;\n\t\n\timport java.text.NumberFormat;\n\t\n\tpublic class MainActivity extends AppCompatActivity {\n\t\n\t    @Override\n\t    protected void onCreate(Bundle savedInstanceState) {\n\t        super.onCreate(savedInstanceState);\n\t        setContentView(R.layout.activity_main);\n\t    }\n\t\n\t    /**\n\t     * This method is called when the order button is called\n\t     */\n\t    public void submitOrder(View view) {\n\t        display(011);\n\t        displayPrice(23);\n\t    }\n\t\n\t    /**\n\t     * This method displays the given quantity value on the screen.\n\t     It is set as an onClick attribute\n\t     Note that onClick needs a function name, and not code. The function will be executed when the button is clicked.\n\t     */\n\t    private void display(int number) {\n\t        TextView quantityTextView = (TextView) findViewById(R.id.quantity_text_view);\n\t        number += 1;\n\t        quantityTextView.setText(\"\" + number);\n\t    }\n\t\n\t    /**\n\t     * This method displays the given price on the screen.\n\t     */\n\t    private void displayPrice(int number) {\n\t        TextView priceTextView = (TextView) findViewById(R.id.price_text_view);\n\t        priceTextView.setText(NumberFormat.getCurrencyInstance().format(number));\n\t    }\n\t\n\t}\n\nthe XML\n![](./3._Displaying_text_using_Java/pasted_image.png)\n\nthe app, intial and after clicking the button.\n![](./3._Displaying_text_using_Java/pasted_image001.png)  ![](./3._Displaying_text_using_Java/pasted_image002.png)\n\n*****\n\nThe TextView changes size according to the text, because it set to wrap_content.\n\n",
      "html": "<h1 id=\"3.-displaying-text-using-java\">3. Displaying text using Java <a class=\"heading-anchor-permalink\" href=\"#3.-displaying-text-using-java\">#</a></h1>\n<p>Created Friday 30 October 2020</p>\n<ul>\n<li>Java code is run as methods. It is not like JavaScript.</li>\n<li>Specify the callback method in the <code>onClick</code> attribute. The callback executes on clicking.</li>\n<li>This callback function must be <code>public</code> have one <code>View</code> argument.</li>\n<li>The argument passed(by the app) to the callback function is the host view itself(having the ‘onClick’ attribute). This makes it easy to interact with the host view, we don’t have to locate it using an <code>id</code>.</li>\n</ul>\n<hr>\n<h4 id=\"understanding-java-code\">Understanding Java code <a class=\"heading-anchor-permalink\" href=\"#understanding-java-code\">#</a></h4>\n<ul>\n<li>\n<p>onCreate() function runs as soon as our app is started.</p>\n</li>\n<li>\n<p>It injects the views on the screen.</p>\n<p>package com.example.justjava;</p>\n<p>import androidx.appcompat.app.AppCompatActivity;</p>\n<p>import android.os.Bundle;\nimport android.view.View;\nimport android.widget.TextView;</p>\n<p>import java.text.NumberFormat;</p>\n<p>public class MainActivity extends AppCompatActivity {</p>\n<pre><code>  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n      super.onCreate(savedInstanceState);\n      setContentView(R.layout.activity_main);\n  }\n\n  /**\n   * This method is called when the order button is called\n   */\n  public void submitOrder(View view) {\n      display(011);\n      displayPrice(23);\n  }\n\n  /**\n   * This method displays the given quantity value on the screen.\n   It is set as an onClick attribute\n   Note that onClick needs a function name, and not code. The function will be executed when the button is clicked.\n   */\n  private void display(int number) {\n      TextView quantityTextView = (TextView) findViewById(R.id.quantity_text_view);\n      number += 1;\n      quantityTextView.setText(&quot;&quot; + number);\n  }\n\n  /**\n   * This method displays the given price on the screen.\n   */\n  private void displayPrice(int number) {\n      TextView priceTextView = (TextView) findViewById(R.id.price_text_view);\n      priceTextView.setText(NumberFormat.getCurrencyInstance().format(number));\n  }\n</code></pre>\n<p>}</p>\n</li>\n</ul>\n<p>the XML\n<img src=\"./3._Displaying_text_using_Java/pasted_image.png\" alt=\"\"></p>\n<p>the app, intial and after clicking the button.\n<img src=\"./3._Displaying_text_using_Java/pasted_image001.png\" alt=\"\">  <img src=\"./3._Displaying_text_using_Java/pasted_image002.png\" alt=\"\"></p>\n<hr>\n<p>The TextView changes size according to the text, because it set to wrap_content.</p>\n",
      "id": 30
    },
    {
      "path": "2._Basics_-_User_Input/L1_-_Making_An_App_interactive_1.md",
      "url": "2._Basics_-_User_Input/L1_-_Making_An_App_interactive_1.html",
      "content": "# L1 - Making An App interactive 1\nCreated Wednesday 28 October 2020\n\n[../_App_1](./_App_1)\n\n",
      "html": "<h1 id=\"l1---making-an-app-interactive-1\">L1 - Making An App interactive 1 <a class=\"heading-anchor-permalink\" href=\"#l1---making-an-app-interactive-1\">#</a></h1>\n<p>Created Wednesday 28 October 2020</p>\n<p><a href=\"./_App_1\">…/_App_1</a></p>\n",
      "id": 31
    },
    {
      "path": "2._Basics_-_User_Input/L2_-_Making_An_App_interactive_2.md",
      "url": "2._Basics_-_User_Input/L2_-_Making_An_App_interactive_2.html",
      "content": "# L2 - Making An App interactive 2\nCreated Friday 30 October 2020\n\n[../_App_1](./_App_1)\n\n",
      "html": "<h1 id=\"l2---making-an-app-interactive-2\">L2 - Making An App interactive 2 <a class=\"heading-anchor-permalink\" href=\"#l2---making-an-app-interactive-2\">#</a></h1>\n<p>Created Friday 30 October 2020</p>\n<p><a href=\"./_App_1\">…/_App_1</a></p>\n",
      "id": 32
    },
    {
      "path": "2._Basics_-_User_Input/L2_-_Nested_ViewGroups/0_index.md",
      "url": "2._Basics_-_User_Input/L2_-_Nested_ViewGroups/0_index.html",
      "content": "# L2 - Nested ViewGroups\nCreated Friday 30 October 2020\n\n[../_App_1](./_App_1)\n\n",
      "html": "<h1 id=\"l2---nested-viewgroups\">L2 - Nested ViewGroups <a class=\"heading-anchor-permalink\" href=\"#l2---nested-viewgroups\">#</a></h1>\n<p>Created Friday 30 October 2020</p>\n<p><a href=\"./_App_1\">…/_App_1</a></p>\n",
      "id": 33
    },
    {
      "path": "2._Basics_-_User_Input/L2_-_Nested_ViewGroups/1._Changing_the_layout/0_index.md",
      "url": "2._Basics_-_User_Input/L2_-_Nested_ViewGroups/1._Changing_the_layout/0_index.html",
      "content": "# 1. Changing the layout\nCreated Friday 30 October 2020\n\n![](./1._Changing_the_layout/pasted_image.png)\nSteps to achieve this:\n\n* Wrap the three field, i.e '+',  quantityText and '-' into a horizontal LinearLayout.\n* Change the vertical margins and give the text a pading on the left and right.\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    android:layout_width=\"match_parent\"\n\t    android:layout_height=\"match_parent\">\n\t\n\t    <LinearLayout\n\t        android:layout_width=\"match_parent\"\n\t        android:layout_height=\"wrap_content\"\n\t        android:orientation=\"vertical\"\n\t        android:padding=\"16dp\">\n\t\n\t        <TextView\n\t            android:layout_width=\"wrap_content\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:text=\"Quantity\"\n\t            android:textAllCaps=\"true\" />\n\t\n\t        <LinearLayout\n\t            android:layout_width=\"wrap_content\"\n\t            android:layout_height=\"wrap_content\"\n\t\n\t            android:orientation=\"horizontal\">\n\t\n\t            <Button\n\t                android:id=\"@+id/decrement_button\"\n\t                android:layout_width=\"48dp\"\n\t                android:layout_height=\"48dp\"\n\t                android:onClick=\"decrement\"\n\t                android:text=\"-\"\n\t                android:tooltipText=\"Remove a cup\" />\n\t\n\t            <TextView\n\t                android:id=\"@+id/quantity_text_view\"\n\t                android:layout_width=\"wrap_content\"\n\t                android:layout_height=\"wrap_content\"\n\t                android:paddingLeft=\"16dp\"\n\t                android:paddingRight=\"16dp\"\n\t                android:text=\"0\"\n\t                android:textColor=\"@color/black\"\n\t                android:textSize=\"16sp\" />\n\t\n\t\n\t            <Button\n\t                android:id=\"@+id/increment_button\"\n\t                android:layout_width=\"48dp\"\n\t                android:layout_height=\"48dp\"\n\t                android:onClick=\"increment\"\n\t                android:text=\"+\"\n\t                android:tooltipText=\"Add another cup\" />\n\t\n\t        </LinearLayout>\n\t\n\t        <TextView\n\t            android:layout_width=\"wrap_content\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:text=\"price\"\n\t            android:textAllCaps=\"true\" />\n\t\n\t        <TextView\n\t            android:id=\"@+id/price_text_view\"\n\t            android:layout_width=\"wrap_content\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:paddingTop=\"16dp\"\n\t            android:paddingBottom=\"16dp\"\n\t            android:text=\"$0\"\n\t            android:textColor=\"@color/black\"\n\t            android:textSize=\"16sp\" />\n\t\n\t        <Button\n\t            android:layout_width=\"wrap_content\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:onClick=\"submitOrder\"\n\t            android:text=\"Order\"\n\t            android:tooltipText=\"Submit your order\" />\n\t    </LinearLayout>\n\t</RelativeLayout>\n\n\n\n",
      "html": "<h1 id=\"1.-changing-the-layout\">1. Changing the layout <a class=\"heading-anchor-permalink\" href=\"#1.-changing-the-layout\">#</a></h1>\n<p>Created Friday 30 October 2020</p>\n<p><img src=\"./1._Changing_the_layout/pasted_image.png\" alt=\"\">\nSteps to achieve this:</p>\n<ul>\n<li>\n<p>Wrap the three field, i.e ‘+’,  quantityText and ‘-’ into a horizontal LinearLayout.</p>\n</li>\n<li>\n<p>Change the vertical margins and give the text a pading on the left and right.</p>\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<p><RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"></p>\n<pre><code>  &lt;LinearLayout\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:orientation=&quot;vertical&quot;\n      android:padding=&quot;16dp&quot;&gt;\n\n      &lt;TextView\n          android:layout_width=&quot;wrap_content&quot;\n          android:layout_height=&quot;wrap_content&quot;\n          android:text=&quot;Quantity&quot;\n          android:textAllCaps=&quot;true&quot; /&gt;\n\n      &lt;LinearLayout\n          android:layout_width=&quot;wrap_content&quot;\n          android:layout_height=&quot;wrap_content&quot;\n\n          android:orientation=&quot;horizontal&quot;&gt;\n\n          &lt;Button\n              android:id=&quot;@+id/decrement_button&quot;\n              android:layout_width=&quot;48dp&quot;\n              android:layout_height=&quot;48dp&quot;\n              android:onClick=&quot;decrement&quot;\n              android:text=&quot;-&quot;\n              android:tooltipText=&quot;Remove a cup&quot; /&gt;\n\n          &lt;TextView\n              android:id=&quot;@+id/quantity_text_view&quot;\n              android:layout_width=&quot;wrap_content&quot;\n              android:layout_height=&quot;wrap_content&quot;\n              android:paddingLeft=&quot;16dp&quot;\n              android:paddingRight=&quot;16dp&quot;\n              android:text=&quot;0&quot;\n              android:textColor=&quot;@color/black&quot;\n              android:textSize=&quot;16sp&quot; /&gt;\n\n\n          &lt;Button\n              android:id=&quot;@+id/increment_button&quot;\n              android:layout_width=&quot;48dp&quot;\n              android:layout_height=&quot;48dp&quot;\n              android:onClick=&quot;increment&quot;\n              android:text=&quot;+&quot;\n              android:tooltipText=&quot;Add another cup&quot; /&gt;\n\n      &lt;/LinearLayout&gt;\n\n      &lt;TextView\n          android:layout_width=&quot;wrap_content&quot;\n          android:layout_height=&quot;wrap_content&quot;\n          android:text=&quot;price&quot;\n          android:textAllCaps=&quot;true&quot; /&gt;\n\n      &lt;TextView\n          android:id=&quot;@+id/price_text_view&quot;\n          android:layout_width=&quot;wrap_content&quot;\n          android:layout_height=&quot;wrap_content&quot;\n          android:paddingTop=&quot;16dp&quot;\n          android:paddingBottom=&quot;16dp&quot;\n          android:text=&quot;$0&quot;\n          android:textColor=&quot;@color/black&quot;\n          android:textSize=&quot;16sp&quot; /&gt;\n\n      &lt;Button\n          android:layout_width=&quot;wrap_content&quot;\n          android:layout_height=&quot;wrap_content&quot;\n          android:onClick=&quot;submitOrder&quot;\n          android:text=&quot;Order&quot;\n          android:tooltipText=&quot;Submit your order&quot; /&gt;\n  &lt;/LinearLayout&gt;\n</code></pre>\n  </RelativeLayout>\n</li>\n</ul>\n",
      "id": 34
    },
    {
      "path": "2._Basics_-_User_Input/L2_-_Nested_ViewGroups/2._Nested_Viewgroups/0_index.md",
      "url": "2._Basics_-_User_Input/L2_-_Nested_ViewGroups/2._Nested_Viewgroups/0_index.html",
      "content": "# 2. Nested Viewgroups\nCreated Friday 30 October 2020\n\nWe can nest views.\nWe have learnt about LinearLayout and RelativeLayout, but there are others as well.\n\nHierarchy tree for views - It is a tree representing hierarchy of the views in the screen(i.e in the root layout).\n![](./2._Nested_Viewgroups/pasted_image.png)\n![](./2._Nested_Viewgroups/pasted_image001.png)\n![](./2._Nested_Viewgroups/pasted_image002.png)\n\n* Simple thing, nothing special.\n\n\n",
      "html": "<h1 id=\"2.-nested-viewgroups\">2. Nested Viewgroups <a class=\"heading-anchor-permalink\" href=\"#2.-nested-viewgroups\">#</a></h1>\n<p>Created Friday 30 October 2020</p>\n<p>We can nest views.\nWe have learnt about LinearLayout and RelativeLayout, but there are others as well.</p>\n<p>Hierarchy tree for views - It is a tree representing hierarchy of the views in the screen(i.e in the root layout).\n<img src=\"./2._Nested_Viewgroups/pasted_image.png\" alt=\"\">\n<img src=\"./2._Nested_Viewgroups/pasted_image001.png\" alt=\"\">\n<img src=\"./2._Nested_Viewgroups/pasted_image002.png\" alt=\"\"></p>\n<ul>\n<li>Simple thing, nothing special.</li>\n</ul>\n",
      "id": 35
    },
    {
      "path": "2._Basics_-_User_Input/L3_-_Making_an_App_Interactive_3.md",
      "url": "2._Basics_-_User_Input/L3_-_Making_an_App_Interactive_3.html",
      "content": "# L3 - Making an App Interactive 3\nCreated Saturday 31 October 2020\n\n[../_App_2](./_App_2)\n\n",
      "html": "<h1 id=\"l3---making-an-app-interactive-3\">L3 - Making an App Interactive 3 <a class=\"heading-anchor-permalink\" href=\"#l3---making-an-app-interactive-3\">#</a></h1>\n<p>Created Saturday 31 October 2020</p>\n<p><a href=\"./_App_2\">…/_App_2</a></p>\n",
      "id": 36
    },
    {
      "path": "2._Basics_-_User_Input/L3_-_Steps_for_making_an_app/0_index.md",
      "url": "2._Basics_-_User_Input/L3_-_Steps_for_making_an_app/0_index.html",
      "content": "# L3 - Steps for making an app\nCreated Saturday 31 October 2020\n\n[../_App_2](./_App_2)\n\n",
      "html": "<h1 id=\"l3---steps-for-making-an-app\">L3 - Steps for making an app <a class=\"heading-anchor-permalink\" href=\"#l3---steps-for-making-an-app\">#</a></h1>\n<p>Created Saturday 31 October 2020</p>\n<p><a href=\"./_App_2\">…/_App_2</a></p>\n",
      "id": 37
    },
    {
      "path": "2._Basics_-_User_Input/L3_-_Steps_for_making_an_app/1._Making_the_layout/0_index.md",
      "url": "2._Basics_-_User_Input/L3_-_Steps_for_making_an_app/1._Making_the_layout/0_index.html",
      "content": "# 1. Making the layout\nCreated Sunday 01 November 2020\n\nWe need app which looks like this:\n![](./1._Making_the_layout/pasted_image.png)\nTo make this, we follow the usual steps:\n\n1. Select the views\n2. Position the views\n3. Style the views\n\n\n*****\n\nWe first divide the root layout into 4 components:\n\n1. Team name(wrap content width)\n2. Team score(wrap content width)\n3. Buttons(weight=1)\n4. Reset button\n\nXML code: [../../_App_3/app/src/main/res/layout/activity_main.xml](../_App_3/app/src/main/res/layout/activity_main.xml)\nJava Code: [../../_App_3/app/src/main/java/com/example/android/courtcounter/MainActivity.java](../_App_3/app/src/main/java/com/example/android/courtcounter/MainActivity.java)\n\n*****\n\nWe have used two attributes here:\n\n1. ``gravity`` - arranges the content *inside* a view. Works for text inside the TextView.\n2. ``layout_gravity`` - arranges the view's position w.r.t the parent. This is set inside the child view.\n\n**Note**\n\n* Both have the same set of possible values - ``left``, ``right``, ``center``, ``center_horizontal``, ``center_vertical`` etc.\n* Gravity does not work for ``RelativeLayout``, as we already have ``centerInParent`` and other stuff.\n\n\n",
      "html": "<h1 id=\"1.-making-the-layout\">1. Making the layout <a class=\"heading-anchor-permalink\" href=\"#1.-making-the-layout\">#</a></h1>\n<p>Created Sunday 01 November 2020</p>\n<p>We need app which looks like this:\n<img src=\"./1._Making_the_layout/pasted_image.png\" alt=\"\">\nTo make this, we follow the usual steps:</p>\n<ol>\n<li>Select the views</li>\n<li>Position the views</li>\n<li>Style the views</li>\n</ol>\n<hr>\n<p>We first divide the root layout into 4 components:</p>\n<ol>\n<li>Team name(wrap content width)</li>\n<li>Team score(wrap content width)</li>\n<li>Buttons(weight=1)</li>\n<li>Reset button</li>\n</ol>\n<p>XML code: <a href=\"../_App_3/app/src/main/res/layout/activity_main.xml\">…/…/_App_3/app/src/main/res/layout/activity_main.xml</a>\nJava Code: <a href=\"../_App_3/app/src/main/java/com/example/android/courtcounter/MainActivity.java\">…/…/_App_3/app/src/main/java/com/example/android/courtcounter/MainActivity.java</a></p>\n<hr>\n<p>We have used two attributes here:</p>\n<ol>\n<li><code>gravity</code> - arranges the content <em>inside</em> a view. Works for text inside the TextView.</li>\n<li><code>layout_gravity</code> - arranges the view’s position w.r.t the parent. This is set inside the child view.</li>\n</ol>\n<p><strong>Note</strong></p>\n<ul>\n<li>Both have the same set of possible values - <code>left</code>, <code>right</code>, <code>center</code>, <code>center_horizontal</code>, <code>center_vertical</code> etc.</li>\n<li>Gravity does not work for <code>RelativeLayout</code>, as we already have <code>centerInParent</code> and other stuff.</li>\n</ul>\n",
      "id": 38
    },
    {
      "path": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/0_index.md",
      "url": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/0_index.html",
      "content": "# L4 - Details of an Android app\nCreated Monday 02 November 2020\n\n[../_App_4](./_App_4)\n\n",
      "html": "<h1 id=\"l4---details-of-an-android-app\">L4 - Details of an Android app <a class=\"heading-anchor-permalink\" href=\"#l4---details-of-an-android-app\">#</a></h1>\n<p>Created Monday 02 November 2020</p>\n<p><a href=\"./_App_4\">…/_App_4</a></p>\n",
      "id": 39
    },
    {
      "path": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/1._Anatomy_of_an_Android_app.md",
      "url": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/1._Anatomy_of_an_Android_app.html",
      "content": "# 1. Anatomy of an Android app\nCreated Monday 02 November 2020\n\nAn Android app is made of two kinds of things:\n\n1. Resources - layout, strings, styles - all in XML. Resources also include music, videos, images etc. **Anything which is fixed(hardcorded)**.\n2. Java code - the logic.\n\n\nWhy is it this way:\n\n1. Separation of concerns - Code is orgarnized and can be worked on by multiple people.\n2. Adaptability - We can use the same logic files but provide different resources for different devices/locales(w.r.t size, type, region etc).\n\n\n",
      "html": "<h1 id=\"1.-anatomy-of-an-android-app\">1. Anatomy of an Android app <a class=\"heading-anchor-permalink\" href=\"#1.-anatomy-of-an-android-app\">#</a></h1>\n<p>Created Monday 02 November 2020</p>\n<p>An Android app is made of two kinds of things:</p>\n<ol>\n<li>Resources - layout, strings, styles - all in XML. Resources also include music, videos, images etc. <strong>Anything which is fixed(hardcorded)</strong>.</li>\n<li>Java code - the logic.</li>\n</ol>\n<p>Why is it this way:</p>\n<ol>\n<li>Separation of concerns - Code is orgarnized and can be worked on by multiple people.</li>\n<li>Adaptability - We can use the same logic files but provide different resources for different devices/locales(w.r.t size, type, region etc).</li>\n</ol>\n",
      "id": 40
    },
    {
      "path": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/2._Resource_IDs/0_index.md",
      "url": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/2._Resource_IDs/0_index.html",
      "content": "# 2. Resource IDs\nCreated Tuesday 03 November 2020\n\n\n* Resources can be put in different folders.\n* When we build our app, a tool called **aapt** generates a class file called R(a file named R.java), which contains resource IDs for all resources in the project folder.\n* For each type of resource, there exists an R subclass(e.g R.drawable, R.string).\n\n\n*****\n\nAccessing resources:\n\n1. In Java - ``R.string.hello`` - string named hello\n2. In XML - A special syntax symbol similar to ``@string/hello``\n\n![](./2._Resource_IDs/pasted_image.png)\n\nNote: In the Java code, resource ids are just integers(assigned values automatically). They are not a special data type.\n\n*****\n\nThe onCreate function is an important function in our app, which accesses the main layout file\n![](./2._Resource_IDs/pasted_image001.png)\n\nAnother example is accessing buttons/textviews etc\n![](./2._Resource_IDs/pasted_image002.png)\n\n",
      "html": "<h1 id=\"2.-resource-ids\">2. Resource IDs <a class=\"heading-anchor-permalink\" href=\"#2.-resource-ids\">#</a></h1>\n<p>Created Tuesday 03 November 2020</p>\n<ul>\n<li>Resources can be put in different folders.</li>\n<li>When we build our app, a tool called <strong>aapt</strong> generates a class file called R(a file named R.java), which contains resource IDs for all resources in the project folder.</li>\n<li>For each type of resource, there exists an R subclass(e.g R.drawable, R.string).</li>\n</ul>\n<hr>\n<p>Accessing resources:</p>\n<ol>\n<li>In Java - <code>R.string.hello</code> - string named hello</li>\n<li>In XML - A special syntax symbol similar to <code>@string/hello</code></li>\n</ol>\n<p><img src=\"./2._Resource_IDs/pasted_image.png\" alt=\"\"></p>\n<p>Note: In the Java code, resource ids are just integers(assigned values automatically). They are not a special data type.</p>\n<hr>\n<p>The onCreate function is an important function in our app, which accesses the main layout file\n<img src=\"./2._Resource_IDs/pasted_image001.png\" alt=\"\"></p>\n<p>Another example is accessing buttons/textviews etc\n<img src=\"./2._Resource_IDs/pasted_image002.png\" alt=\"\"></p>\n",
      "id": 41
    },
    {
      "path": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/2._Resources/0_index.md",
      "url": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/2._Resources/0_index.html",
      "content": "# 2. Resources\nCreated Tuesday 03 November 2020\n\n\n* Resources are put in different folders based only on two [criteria](https://developer.android.com/guide/topics/resources/providing-resources#ResourceTypes):\n\t1. Resource type - string, style, image, icon, audio etc.\n\t2. Quality - mdpi images, hdpi images etc.\n\n\n#### Readying resources\n\n* When we build our app, a tool called **aapt** generates a class file called R(a file named ``R.java``), which contains resource IDs(i.e names) for all resources in the project folder.\n* The **aapt **also creates various subclasses of resources based on ``type`` only like icons(drawable), styles, strings, colors etc. We don't need to specify quality, the OS handles it.\n* This way we don't have to interact directly with the file system for resources, which is often problematic. The ``R`` class provides a systematic and dependable way to access all our resources.\n\n\nNote:\n\n* Non-media resources like styles, strings are specified in XML files. See [this](../L5_-_More_details/8._Styles.md).\n\n\n#### Accessing resources\n\n1. In Java - ``R.string.hello`` - string named hello\n2. In XML - ``@string/hello``\n\n![](./2._Resources/pasted_image.png)\nNote: In the Java code, all resource_id(s) are actually just integers(assigned values by AAPT). This makes it very easy to work with resources.\n\n*****\n\nThe onCreate function is an important function in our app, which accesses the main layout file\n![](./2._Resources/pasted_image001.png)\n\nAnother example is accessing buttons/textviews etc\n![](./2._Resources/pasted_image002.png)\n\n",
      "html": "<h1 id=\"2.-resources\">2. Resources <a class=\"heading-anchor-permalink\" href=\"#2.-resources\">#</a></h1>\n<p>Created Tuesday 03 November 2020</p>\n<ul>\n<li>Resources are put in different folders based only on two <a href=\"https://developer.android.com/guide/topics/resources/providing-resources#ResourceTypes\">criteria</a>:\n<ol>\n<li>Resource type - string, style, image, icon, audio etc.</li>\n<li>Quality - mdpi images, hdpi images etc.</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"readying-resources\">Readying resources <a class=\"heading-anchor-permalink\" href=\"#readying-resources\">#</a></h4>\n<ul>\n<li>When we build our app, a tool called <strong>aapt</strong> generates a class file called R(a file named <code>R.java</code>), which contains resource IDs(i.e names) for all resources in the project folder.</li>\n<li>The **aapt **also creates various subclasses of resources based on <code>type</code> only like icons(drawable), styles, strings, colors etc. We don’t need to specify quality, the OS handles it.</li>\n<li>This way we don’t have to interact directly with the file system for resources, which is often problematic. The <code>R</code> class provides a systematic and dependable way to access all our resources.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>Non-media resources like styles, strings are specified in XML files. See <a href=\"../L5_-_More_details/8._Styles.html\">this</a>.</li>\n</ul>\n<h4 id=\"accessing-resources\">Accessing resources <a class=\"heading-anchor-permalink\" href=\"#accessing-resources\">#</a></h4>\n<ol>\n<li>In Java - <code>R.string.hello</code> - string named hello</li>\n<li>In XML - <code>@string/hello</code></li>\n</ol>\n<p><img src=\"./2._Resources/pasted_image.png\" alt=\"\">\nNote: In the Java code, all resource_id(s) are actually just integers(assigned values by AAPT). This makes it very easy to work with resources.</p>\n<hr>\n<p>The onCreate function is an important function in our app, which accesses the main layout file\n<img src=\"./2._Resources/pasted_image001.png\" alt=\"\"></p>\n<p>Another example is accessing buttons/textviews etc\n<img src=\"./2._Resources/pasted_image002.png\" alt=\"\"></p>\n",
      "id": 42
    },
    {
      "path": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/3._Relation_between_Java_and_XML/0_index.md",
      "url": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/3._Relation_between_Java_and_XML/0_index.html",
      "content": "# 3. Relation between Java and XML\nCreated Tuesday 03 November 2020\n\nHow do Java and XML work together to create an app experience.\n\n* When the app is run, some initialization takes place and the MainActivity.java file is run.\n* Its onCreate function accesses the layout from the activity_layout.xml file.\n* This XML file is parsed and a hierarchy tree is created in memory.\n* The tree is rendered on the display.\n* The nodes of the tree consist of objects called views, and they can be manipulated by the Java file. These objects have attributes which can be manipulated using their functions.\n\n![](./3._Relation_between_Java_and_XML/pasted_image.png)\n\n*****\n\nAll views are objects.\n\n![](./3._Relation_between_Java_and_XML/pasted_image001.png)\n\n",
      "html": "<h1 id=\"3.-relation-between-java-and-xml\">3. Relation between Java and XML <a class=\"heading-anchor-permalink\" href=\"#3.-relation-between-java-and-xml\">#</a></h1>\n<p>Created Tuesday 03 November 2020</p>\n<p>How do Java and XML work together to create an app experience.</p>\n<ul>\n<li>When the app is run, some initialization takes place and the MainActivity.java file is run.</li>\n<li>Its onCreate function accesses the layout from the activity_layout.xml file.</li>\n<li>This XML file is parsed and a hierarchy tree is created in memory.</li>\n<li>The tree is rendered on the display.</li>\n<li>The nodes of the tree consist of objects called views, and they can be manipulated by the Java file. These objects have attributes which can be manipulated using their functions.</li>\n</ul>\n<p><img src=\"./3._Relation_between_Java_and_XML/pasted_image.png\" alt=\"\"></p>\n<hr>\n<p>All views are objects.</p>\n<p><img src=\"./3._Relation_between_Java_and_XML/pasted_image001.png\" alt=\"\"></p>\n",
      "id": 43
    },
    {
      "path": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/4._Java_objects/0_index.md",
      "url": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/4._Java_objects/0_index.html",
      "content": "# 4. Java objects\nCreated Tuesday 03 November 2020\n\nCreating objects:\n\n1. Using the constructor\n\n![](./4._Java_objects/pasted_image.png)\n\n2. Using a factory method\n\n![](./4._Java_objects/pasted_image001.png)\n\n*****\n\nBefore making a new object, do a Google search to decide which method is used for object creation.\n\n",
      "html": "<h1 id=\"4.-java-objects\">4. Java objects <a class=\"heading-anchor-permalink\" href=\"#4.-java-objects\">#</a></h1>\n<p>Created Tuesday 03 November 2020</p>\n<p>Creating objects:</p>\n<ol>\n<li>Using the constructor</li>\n</ol>\n<p><img src=\"./4._Java_objects/pasted_image.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>Using a factory method</li>\n</ol>\n<p><img src=\"./4._Java_objects/pasted_image001.png\" alt=\"\"></p>\n<hr>\n<p>Before making a new object, do a Google search to decide which method is used for object creation.</p>\n",
      "id": 44
    },
    {
      "path": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/5._setContentView_method/0_index.md",
      "url": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/5._setContentView_method/0_index.html",
      "content": "# 5. setContentView method\nCreated Tuesday 03 November 2020\n\nBy default the ``onCreate`` method sets the intial activity for the app.\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t    super.onCreate(savedInstanceState);\n\t    setContentView(R.layout.activity_main);\n\t}\n\n\nBut this is not necessary, we can load any activity.\nIf we change this to:\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t    super.onCreate(savedInstanceState);\n\t    //setContentView(R.layout.activity_main);\n\t    TextView tv = new TextView(this); // requires context\n\t    tv.setText(\"Hello, manually injected view\");\n\t    setContentView(tv);  // set content\n\t}\n\n\n![](./5._setContentView_method/pasted_image.png)\n\nThis demonstrates the workflow of XML and Java.\n\n*****\n\nThe first activity(Java file to be run) is actually specified in AndroidManifest.xml\n![](./5._setContentView_method/pasted_image001.png)\n\n",
      "html": "<h1 id=\"5.-setcontentview-method\">5. setContentView method <a class=\"heading-anchor-permalink\" href=\"#5.-setcontentview-method\">#</a></h1>\n<p>Created Tuesday 03 November 2020</p>\n<p>By default the <code>onCreate</code> method sets the intial activity for the app.\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\n}</p>\n<p>But this is not necessary, we can load any activity.\nIf we change this to:\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\n//setContentView(R.layout.activity_main);\nTextView tv = new TextView(this); // requires context\ntv.setText(“Hello, manually injected view”);\nsetContentView(tv);  // set content\n}</p>\n<p><img src=\"./5._setContentView_method/pasted_image.png\" alt=\"\"></p>\n<p>This demonstrates the workflow of XML and Java.</p>\n<hr>\n<p>The first activity(Java file to be run) is actually specified in AndroidManifest.xml\n<img src=\"./5._setContentView_method/pasted_image001.png\" alt=\"\"></p>\n",
      "id": 45
    },
    {
      "path": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/6._Capturing_views/0_index.md",
      "url": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/6._Capturing_views/0_index.html",
      "content": "# 6. Capturing views\nCreated Tuesday 03 November 2020\n\nIn Android we can capture elements(views) from an activity to manipulate them.\nThis is done mostly using the ``findViewById`` method.\n\n* findViewById is the method which takes the id(an int actually) as argument.\n* Returns a View object. A type cast is necessary if you wish to work with the View.\n* This view can now be manipulated, and the changes can be seen on the device screen.\n\n\t(TextView) findViewById(R.layout.textView1);\t// explicit cast is required\n\nExample:\n![](./6._Capturing_views/pasted_image001.png)\n![](./6._Capturing_views/pasted_image.png)\n\nNote\n\n* ``findViewById`` is context specific. By default it searches for views only in the current activity.\n* It can also be used for capturing children views.\n\n\tmyViewGroup.findViewById();  // this is a view specific capture\n\n\n\n17. How can findViewById work for both an activity and a view?\n18. Because it is implemented seperately in both ``View.java`` and ``AppCompatActivity.java``.\n\n\n",
      "html": "<h1 id=\"6.-capturing-views\">6. Capturing views <a class=\"heading-anchor-permalink\" href=\"#6.-capturing-views\">#</a></h1>\n<p>Created Tuesday 03 November 2020</p>\n<p>In Android we can capture elements(views) from an activity to manipulate them.\nThis is done mostly using the <code>findViewById</code> method.</p>\n<ul>\n<li>\n<p>findViewById is the method which takes the id(an int actually) as argument.</p>\n</li>\n<li>\n<p>Returns a View object. A type cast is necessary if you wish to work with the View.</p>\n</li>\n<li>\n<p>This view can now be manipulated, and the changes can be seen on the device screen.</p>\n<p>(TextView) findViewById(R.layout.textView1);\t// explicit cast is required</p>\n</li>\n</ul>\n<p>Example:\n<img src=\"./6._Capturing_views/pasted_image001.png\" alt=\"\">\n<img src=\"./6._Capturing_views/pasted_image.png\" alt=\"\"></p>\n<p>Note</p>\n<ul>\n<li>\n<p><code>findViewById</code> is context specific. By default it searches for views only in the current activity.</p>\n</li>\n<li>\n<p>It can also be used for capturing children views.</p>\n<p>myViewGroup.findViewById();  // this is a view specific capture</p>\n</li>\n</ul>\n<ol start=\"17\">\n<li>How can findViewById work for both an activity and a view?</li>\n<li>Because it is implemented seperately in both <code>View.java</code> and <code>AppCompatActivity.java</code>.</li>\n</ol>\n",
      "id": 46
    },
    {
      "path": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/7._Get_data_from_views.md",
      "url": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/7._Get_data_from_views.html",
      "content": "# 7. Get data from views\nCreated Tuesday 03 November 2020\n\n\n* Just use the correct gettter methods for the type of view.\n* They just have 'get' instead of 'set' in the setter name prefix, mostly.\n\n\n",
      "html": "<h1 id=\"7.-get-data-from-views\">7. Get data from views <a class=\"heading-anchor-permalink\" href=\"#7.-get-data-from-views\">#</a></h1>\n<p>Created Tuesday 03 November 2020</p>\n<ul>\n<li>Just use the correct gettter methods for the type of view.</li>\n<li>They just have ‘get’ instead of ‘set’ in the setter name prefix, mostly.</li>\n</ul>\n",
      "id": 47
    },
    {
      "path": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/8._Logging_events.md",
      "url": "2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/8._Logging_events.html",
      "content": "# 8. Logging events\nCreated Tuesday 03 November 2020\n\n\n* Logcat is a CLI tool which dumps messages when an app is run.\n* It is widely used for debugging Android apps.\n* The Android logging system has a fixed set of buffers which write to Logcat. Some important ones are:\n\t\t1. main - the app\n\t\t2. system - the Android OS\n\t\t3. crash - stores crash logs\n\n\n*****\n\n\n### Anatomy of a log\nA log statement has 3 parts:\n\n1. **Priority level** - 6 options.\n\t0. **``Log.wtf``** - Fatal - An error that causes tha app to close in order to preserve data. Needs immediate investigation.\n\t1. **``Log.e``** - Error - This is for when bad stuff happens. Used in places like inside a catch clause. You know that an error has occurred and therefore you're logging an error.\n\t2. **``Log.w``** - Warning - Some shady stuff going on, but recoverable. Non-normal execution. e.g Retrying an operation, missing secondary data, slow connection etc.\n\t3. **``Log.i``** - Information - Basically use it to report successes. Present in production code too.\n\t4. **``Log.d``** - Debug - For debugging. To track program flow, variable values etc.\n\t5. **``Log.v``** - Verbose - Print anything here.\n2. A **tag** - location of the log statement - a String.\n3. A **message** - the what - a String.\n\n\n\n* Log statement are present in Java/Kotlin files only.\n\n\n*****\n\n**Syntax - ``Log.i(String tag, String message);``**\n\tLog.i(\"Button\", \"button clicked..\"); // priority is the function. Location and message are arguments.\n\t\n\tLog.i(\"MyActivity\", \"MyClass.getView() — get item number \" + position);\n\n\n\n",
      "html": "<h1 id=\"8.-logging-events\">8. Logging events <a class=\"heading-anchor-permalink\" href=\"#8.-logging-events\">#</a></h1>\n<p>Created Tuesday 03 November 2020</p>\n<ul>\n<li>Logcat is a CLI tool which dumps messages when an app is run.</li>\n<li>It is widely used for debugging Android apps.</li>\n<li>The Android logging system has a fixed set of buffers which write to Logcat. Some important ones are:\n1. main - the app\n2. system - the Android OS\n3. crash - stores crash logs</li>\n</ul>\n<hr>\n<h3 id=\"anatomy-of-a-log\">Anatomy of a log <a class=\"heading-anchor-permalink\" href=\"#anatomy-of-a-log\">#</a></h3>\n<p>A log statement has 3 parts:</p>\n<ol>\n<li><strong>Priority level</strong> - 6 options.\n<ol start=\"0\">\n<li><strong><code>Log.wtf</code></strong> - Fatal - An error that causes tha app to close in order to preserve data. Needs immediate investigation.</li>\n<li><strong><code>Log.e</code></strong> - Error - This is for when bad stuff happens. Used in places like inside a catch clause. You know that an error has occurred and therefore you’re logging an error.</li>\n<li><strong><code>Log.w</code></strong> - Warning - Some shady stuff going on, but recoverable. Non-normal execution. e.g Retrying an operation, missing secondary data, slow connection etc.</li>\n<li><strong><code>Log.i</code></strong> - Information - Basically use it to report successes. Present in production code too.</li>\n<li><strong><code>Log.d</code></strong> - Debug - For debugging. To track program flow, variable values etc.</li>\n<li><strong><code>Log.v</code></strong> - Verbose - Print anything here.</li>\n</ol>\n</li>\n<li>A <strong>tag</strong> - location of the log statement - a String.</li>\n<li>A <strong>message</strong> - the what - a String.</li>\n</ol>\n<ul>\n<li>Log statement are present in Java/Kotlin files only.</li>\n</ul>\n<hr>\n<p><strong>Syntax - <code>Log.i(String tag, String message);</code></strong>\nLog.i(“Button”, “button clicked…”); // priority is the function. Location and message are arguments.</p>\n<pre><code>Log.i(&quot;MyActivity&quot;, &quot;MyClass.getView() — get item number &quot; + position);\n</code></pre>\n",
      "id": 48
    },
    {
      "path": "2._Basics_-_User_Input/L4_-_Details_of_the_workflow.md",
      "url": "2._Basics_-_User_Input/L4_-_Details_of_the_workflow.html",
      "content": "# L4 - Details of the workflow\nCreated Monday 02 November 2020\n\n[../_App_4](./_App_4)\n\n",
      "html": "<h1 id=\"l4---details-of-the-workflow\">L4 - Details of the workflow <a class=\"heading-anchor-permalink\" href=\"#l4---details-of-the-workflow\">#</a></h1>\n<p>Created Monday 02 November 2020</p>\n<p><a href=\"./_App_4\">…/_App_4</a></p>\n",
      "id": 49
    },
    {
      "path": "2._Basics_-_User_Input/L5_-_More_details/0_index.md",
      "url": "2._Basics_-_User_Input/L5_-_More_details/0_index.html",
      "content": "# L5 - More details\nCreated Wednesday 04 November 2020\n\n[../_App_4](./_App_4)\n\n",
      "html": "<h1 id=\"l5---more-details\">L5 - More details <a class=\"heading-anchor-permalink\" href=\"#l5---more-details\">#</a></h1>\n<p>Created Wednesday 04 November 2020</p>\n<p><a href=\"./_App_4\">…/_App_4</a></p>\n",
      "id": 50
    },
    {
      "path": "2._Basics_-_User_Input/L5_-_More_details/1._CheckBox/0_index.md",
      "url": "2._Basics_-_User_Input/L5_-_More_details/1._CheckBox/0_index.html",
      "content": "# 1. CheckBox\nCreated Wednesday 04 November 2020\n\n\n* It is a view which can hold a boolean value, and has a label.\n\n![](./1._CheckBox/pasted_image.png)\n\n*****\n\n**Syntax in XML**\n\t<CheckBox\n\t    android:layout_width=\"wrap_content\"\n\t    android:layout_height=\"wrap_content\"\n\t    android:checked=\"true\"\n\t    android:text=\"Bingo\"/>\n\n\n* In XML, a checkbox is unchecked by default. It can set using the 'checked' field.\n\n![](./1._CheckBox/pasted_image002.png)\n\n**Syntax in Java**\n\n* To get the value, use **``isChecked()``**.\n\n![](./1._CheckBox/pasted_image001.png)\n\n* To set a value, use **``setChecked(boolean value)``**.\n* To toggle, use **``toggle()``**.\n\n![](./1._CheckBox/pasted_image003.png)\n\n*****\n\n\n",
      "html": "<h1 id=\"1.-checkbox\">1. CheckBox <a class=\"heading-anchor-permalink\" href=\"#1.-checkbox\">#</a></h1>\n<p>Created Wednesday 04 November 2020</p>\n<ul>\n<li>It is a view which can hold a boolean value, and has a label.</li>\n</ul>\n<p><img src=\"./1._CheckBox/pasted_image.png\" alt=\"\"></p>\n<hr>\n<p><strong>Syntax in XML</strong>\n<CheckBox\n\t    android:layout_width=\"wrap_content\"\n\t    android:layout_height=\"wrap_content\"\n\t    android:checked=\"true\"\n\t    android:text=\"Bingo\"/></p>\n<ul>\n<li>In XML, a checkbox is unchecked by default. It can set using the ‘checked’ field.</li>\n</ul>\n<p><img src=\"./1._CheckBox/pasted_image002.png\" alt=\"\"></p>\n<p><strong>Syntax in Java</strong></p>\n<ul>\n<li>To get the value, use <strong><code>isChecked()</code></strong>.</li>\n</ul>\n<p><img src=\"./1._CheckBox/pasted_image001.png\" alt=\"\"></p>\n<ul>\n<li>To set a value, use <strong><code>setChecked(boolean value)</code></strong>.</li>\n<li>To toggle, use <strong><code>toggle()</code></strong>.</li>\n</ul>\n<p><img src=\"./1._CheckBox/pasted_image003.png\" alt=\"\"></p>\n<hr>\n",
      "id": 51
    },
    {
      "path": "2._Basics_-_User_Input/L5_-_More_details/10._Final_Lecture.md",
      "url": "2._Basics_-_User_Input/L5_-_More_details/10._Final_Lecture.html",
      "content": "# 10. Final Lecture\nCreated Thursday 05 November 2020\n\n### Advanced Resources and The Possibilities\nIn addition to all that we’ll cover here, if you're wondering what other possibilities are for Android Apps, there is a lot of material to explore. Much of it will require knowledge from the intermediate Developing Android Apps course, so these are considered pretty advanced resources.\n\nWhat follow are some ideas for deeper dives:\n\n**Build for tablets** - We've be focusing on designs for phones, but with resource files, you can actually create custom layouts for your larger devices, such as tablets.\n\n**Do background operations** - Perhaps you want to create an app that does something, even when it's not visibly on the screen. For example, a music player application, that plays music as you so other things on your phone. Or a messaging application that pulls down the latest chats sent to you. For this, you'll need to learn more about creating services.\n\n**Store data on the device** - Does your app need any information saved between launches? Maybe you want to keep a history of all coffees bought with JustJava. To do this, you would need to save some data associated with the app. Check out the google documentation on data storage for your options.\n\n**Create lists** - Many android apps that have long lists of items a user could click on - think of messages in an inbox or stories in a news feed. Learn to optimize the creation of these lists by using views such as the RecyclerView.\n\n**Play sound** - Add sounds to your apps, whether it be short clips for a game or playback capabilities for a podcast app. Check out Google's guide to Media Playback.\n\n**Load up things from the internet** - Want to load text or images from the internet? Check out the volley library, for general purpose loading of web data. Glide is a great choice for loading images from the web. You can check out this lesson from the Libraries lesson of Advanced Android Development to see how to incorporate libraries like these.\n\n**Persist data** - The ability to store and retrieve data is a core function of any mobile application. Android Framework provides several data storage options. In particular, learn how to leverage the SQLite Database by learning the SQL programming language and table design.\n\n**Build for tablets** - We've be focusing on designs for phones, but with resource files, you can actually create custom layouts for your larger devices, such as tablets. Here's some documentation to get you started.\n\n**Create cards** - Cards, not to be confused with your awesome Birthday Card, are a special kind of Material Design inspired view that has rounded corners and a slight shadow. If you've ever used Google Now, you've seen a card. Check out this documentation to see how to add card elements to your app.\n\n**Post notifications** - Notifications are messages that the user sees outside of your app. They appear in the status bar. You can then pull the status bar down to see more details about the notification. When you get a text message, for example, many times your phone will beep and show you a notification so that you can easily view the text. To learn more about designing notifications, check out this google guide.\n\n**Use Google Play services** - Google Play Services is a library of Google code that gives you access to popular functionality, such as phone location, authentication (information and ability to “log in\") and even fitness data. Check out some of the recent updates here.\n\n**Use location** - Access to location is one of the many capabilities offered by Google Play services. By figuring out where a user is physically located, your app can give them more data about their surrounding and customize itself to their specific needs. Google Maps, for example, can find nearby restaurants in this manner. Check out our class on Location and Context, which is part of a larger series of mini courses on all of the Google Play Services.\n\n**Add analytics** - Ever wondered who is using your app? Or how they are using it? By collecting this data you can make informed decisions about what features to add, update or fix. Analytics is also included in the Google Play Services libraries. Check out our course on Analytics.\n\n**Build for other form factors** - It doesn't stop at tablets; the android operating system (and therefore your apps) run on watches, TVs, even in cars. If it makes sense, you can have different versions of your app for these different “form factors\". The Maps App, for example, can give you directions on your phone, or your watch, or while you're driving around. The base functionality is the same, but it's been re-designed and tweaked for each interface. Check out our Ubiquitious Design course.\n\n**Animations** - Subtle animations that give your views a real sense of space and physical existence are an integral part of material design. Check out the documentation on animations to add things like cross fading, zooming and flipping animations to your layouts.\n\n**Create server backend for your app** - A stand alone app is great, but what makes an app really powerful is if it is connected to your own web server. Web servers can help organize and process data from across the world and send it to your user's phone. Any Google App more complicated than the alarm is accessing some sort of google server. Servers store everything from your Calendar events, to your friend's G+ photos. Learn more about building a scalable web server in Java or Python.\n\nFitness - Ever wanted to make an app that will help users take control of their health and fitness? Google Fit is google's open platform with user fitness data. Check out the documentation.\n\n",
      "html": "<h1 id=\"10.-final-lecture\">10. Final Lecture <a class=\"heading-anchor-permalink\" href=\"#10.-final-lecture\">#</a></h1>\n<p>Created Thursday 05 November 2020</p>\n<h3 id=\"advanced-resources-and-the-possibilities\">Advanced Resources and The Possibilities <a class=\"heading-anchor-permalink\" href=\"#advanced-resources-and-the-possibilities\">#</a></h3>\n<p>In addition to all that we’ll cover here, if you’re wondering what other possibilities are for Android Apps, there is a lot of material to explore. Much of it will require knowledge from the intermediate Developing Android Apps course, so these are considered pretty advanced resources.</p>\n<p>What follow are some ideas for deeper dives:</p>\n<p><strong>Build for tablets</strong> - We’ve be focusing on designs for phones, but with resource files, you can actually create custom layouts for your larger devices, such as tablets.</p>\n<p><strong>Do background operations</strong> - Perhaps you want to create an app that does something, even when it’s not visibly on the screen. For example, a music player application, that plays music as you so other things on your phone. Or a messaging application that pulls down the latest chats sent to you. For this, you’ll need to learn more about creating services.</p>\n<p><strong>Store data on the device</strong> - Does your app need any information saved between launches? Maybe you want to keep a history of all coffees bought with JustJava. To do this, you would need to save some data associated with the app. Check out the google documentation on data storage for your options.</p>\n<p><strong>Create lists</strong> - Many android apps that have long lists of items a user could click on - think of messages in an inbox or stories in a news feed. Learn to optimize the creation of these lists by using views such as the RecyclerView.</p>\n<p><strong>Play sound</strong> - Add sounds to your apps, whether it be short clips for a game or playback capabilities for a podcast app. Check out Google’s guide to Media Playback.</p>\n<p><strong>Load up things from the internet</strong> - Want to load text or images from the internet? Check out the volley library, for general purpose loading of web data. Glide is a great choice for loading images from the web. You can check out this lesson from the Libraries lesson of Advanced Android Development to see how to incorporate libraries like these.</p>\n<p><strong>Persist data</strong> - The ability to store and retrieve data is a core function of any mobile application. Android Framework provides several data storage options. In particular, learn how to leverage the SQLite Database by learning the SQL programming language and table design.</p>\n<p><strong>Build for tablets</strong> - We’ve be focusing on designs for phones, but with resource files, you can actually create custom layouts for your larger devices, such as tablets. Here’s some documentation to get you started.</p>\n<p><strong>Create cards</strong> - Cards, not to be confused with your awesome Birthday Card, are a special kind of Material Design inspired view that has rounded corners and a slight shadow. If you’ve ever used Google Now, you’ve seen a card. Check out this documentation to see how to add card elements to your app.</p>\n<p><strong>Post notifications</strong> - Notifications are messages that the user sees outside of your app. They appear in the status bar. You can then pull the status bar down to see more details about the notification. When you get a text message, for example, many times your phone will beep and show you a notification so that you can easily view the text. To learn more about designing notifications, check out this google guide.</p>\n<p><strong>Use Google Play services</strong> - Google Play Services is a library of Google code that gives you access to popular functionality, such as phone location, authentication (information and ability to “log in&quot;) and even fitness data. Check out some of the recent updates here.</p>\n<p><strong>Use location</strong> - Access to location is one of the many capabilities offered by Google Play services. By figuring out where a user is physically located, your app can give them more data about their surrounding and customize itself to their specific needs. Google Maps, for example, can find nearby restaurants in this manner. Check out our class on Location and Context, which is part of a larger series of mini courses on all of the Google Play Services.</p>\n<p><strong>Add analytics</strong> - Ever wondered who is using your app? Or how they are using it? By collecting this data you can make informed decisions about what features to add, update or fix. Analytics is also included in the Google Play Services libraries. Check out our course on Analytics.</p>\n<p><strong>Build for other form factors</strong> - It doesn’t stop at tablets; the android operating system (and therefore your apps) run on watches, TVs, even in cars. If it makes sense, you can have different versions of your app for these different “form factors&quot;. The Maps App, for example, can give you directions on your phone, or your watch, or while you’re driving around. The base functionality is the same, but it’s been re-designed and tweaked for each interface. Check out our Ubiquitious Design course.</p>\n<p><strong>Animations</strong> - Subtle animations that give your views a real sense of space and physical existence are an integral part of material design. Check out the documentation on animations to add things like cross fading, zooming and flipping animations to your layouts.</p>\n<p><strong>Create server backend for your app</strong> - A stand alone app is great, but what makes an app really powerful is if it is connected to your own web server. Web servers can help organize and process data from across the world and send it to your user’s phone. Any Google App more complicated than the alarm is accessing some sort of google server. Servers store everything from your Calendar events, to your friend’s G+ photos. Learn more about building a scalable web server in Java or Python.</p>\n<p>Fitness - Ever wanted to make an app that will help users take control of their health and fitness? Google Fit is google’s open platform with user fitness data. Check out the documentation.</p>\n",
      "id": 52
    },
    {
      "path": "2._Basics_-_User_Input/L5_-_More_details/2._RadioGroup/0_index.md",
      "url": "2._Basics_-_User_Input/L5_-_More_details/2._RadioGroup/0_index.html",
      "content": "# 2. RadioGroup\nCreated Wednesday 04 November 2020\n\nThis is used for displaying radio buttons.\n\n* All RadioButton(s) need to be enclosed in a RadioGroup, because they are connected.\n* A RadioButton has a text field available. This text is part of the button, we don't need an extra TextView\n* Every RadioButton needs to have an id - this is the only way to identify them in Android.\n\n\n*****\n\n**Syntax in XML**\n\t<RadioGroup\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_width=\"wrap_content\">\n\t\t<RadioButton\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:text=\"A\"/>\n\t\t<RadioButton\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:text=\"B\"/>\n\t\t<RadioButton\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:text=\"C\"/>\n\t<RadioGroup>\n\n![](./2._RadioGroup/pasted_image.png)\n\n*****\n\n**Syntax in Java**\n\n1. Using the RadioGroup view:\n\t* To get the checked button - **getCheckedRadioButtonId()**. Returns the id.\n\t* Examine if no button is checked - use **getCheckedRadioButtonId()!=-1**\n\t* Set a particular button using RadioGroup view - **check(button_id)**\n\t* Clear all selections - **clearCheck()**\n2. Using the RadioButton view:\n\t* Get value of a button - **isChecked()** - returns boolean\n\t* Set a button - **setChecked(boolean value)**\n\t* Toggle a button - **toggle()**\n\n\n*****\n\nNote: Avoid using the checked attribute altogether in XML, because it sets the button permanently on some API levels.\n\n",
      "html": "<h1 id=\"2.-radiogroup\">2. RadioGroup <a class=\"heading-anchor-permalink\" href=\"#2.-radiogroup\">#</a></h1>\n<p>Created Wednesday 04 November 2020</p>\n<p>This is used for displaying radio buttons.</p>\n<ul>\n<li>All RadioButton(s) need to be enclosed in a RadioGroup, because they are connected.</li>\n<li>A RadioButton has a text field available. This text is part of the button, we don’t need an extra TextView</li>\n<li>Every RadioButton needs to have an id - this is the only way to identify them in Android.</li>\n</ul>\n<hr>\n<p><strong>Syntax in XML</strong>\n<RadioGroup\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_width=\"wrap_content\">\n<RadioButton\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:text=\"A\"/>\n<RadioButton\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:text=\"B\"/>\n<RadioButton\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:text=\"C\"/>\n<RadioGroup></p>\n<p><img src=\"./2._RadioGroup/pasted_image.png\" alt=\"\"></p>\n<hr>\n<p><strong>Syntax in Java</strong></p>\n<ol>\n<li>Using the RadioGroup view:\n<ul>\n<li>To get the checked button - <strong>getCheckedRadioButtonId()</strong>. Returns the id.</li>\n<li>Examine if no button is checked - use <strong>getCheckedRadioButtonId()!=-1</strong></li>\n<li>Set a particular button using RadioGroup view - <strong>check(button_id)</strong></li>\n<li>Clear all selections - <strong>clearCheck()</strong></li>\n</ul>\n</li>\n<li>Using the RadioButton view:\n<ul>\n<li>Get value of a button - <strong>isChecked()</strong> - returns boolean</li>\n<li>Set a button - <strong>setChecked(boolean value)</strong></li>\n<li>Toggle a button - <strong>toggle()</strong></li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>Note: Avoid using the checked attribute altogether in XML, because it sets the button permanently on some API levels.</p>\n",
      "id": 53
    },
    {
      "path": "2._Basics_-_User_Input/L5_-_More_details/3._Scrolling/0_index.md",
      "url": "2._Basics_-_User_Input/L5_-_More_details/3._Scrolling/0_index.html",
      "content": "# 3. Scrolling\nCreated Wednesday 04 November 2020\n\n\n* To make a screen scrollable, just wrap the views in a ScrollView(in XML).\n* A ScrollView can contain only one root view.\n* There can be multiple scroll views inside the same screen.\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    android:layout_width=\"match_parent\"\n\t    android:layout_height=\"match_parent\">\n\t\t\n\t\t<!-- Root View-->\n\t    <LinearLayout \n\t        android:layout_width=\"match_parent\"\n\t        android:layout_height=\"match_parent\">\n\t    </LinearLayout>\n\t</ScrollView>\n\n![](./3._Scrolling/pasted_image001.png) ![](./3._Scrolling/pasted_image.png)\n\n",
      "html": "<h1 id=\"3.-scrolling\">3. Scrolling <a class=\"heading-anchor-permalink\" href=\"#3.-scrolling\">#</a></h1>\n<p>Created Wednesday 04 November 2020</p>\n<ul>\n<li>\n<p>To make a screen scrollable, just wrap the views in a ScrollView(in XML).</p>\n</li>\n<li>\n<p>A ScrollView can contain only one root view.</p>\n</li>\n<li>\n<p>There can be multiple scroll views inside the same screen.</p>\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<p><ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"></p>\n<pre><code>  &lt;!-- Root View--&gt;\n  &lt;LinearLayout \n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;match_parent&quot;&gt;\n  &lt;/LinearLayout&gt;\n</code></pre>\n  </ScrollView>\n</li>\n</ul>\n<p><img src=\"./3._Scrolling/pasted_image001.png\" alt=\"\"> <img src=\"./3._Scrolling/pasted_image.png\" alt=\"\"></p>\n",
      "id": 54
    },
    {
      "path": "2._Basics_-_User_Input/L5_-_More_details/4._Googler_suggestions.md",
      "url": "2._Basics_-_User_Input/L5_-_More_details/4._Googler_suggestions.html",
      "content": "# 4. Googler suggestions\nCreated Wednesday 04 November 2020\n\n<https://www.thinkful.com/blog/why-learning-to-code-is-so-damn-hard/>\n\n",
      "html": "<h1 id=\"4.-googler-suggestions\">4. Googler suggestions <a class=\"heading-anchor-permalink\" href=\"#4.-googler-suggestions\">#</a></h1>\n<p>Created Wednesday 04 November 2020</p>\n<p><a href=\"https://www.thinkful.com/blog/why-learning-to-code-is-so-damn-hard/\">https://www.thinkful.com/blog/why-learning-to-code-is-so-damn-hard/</a></p>\n",
      "id": 55
    },
    {
      "path": "2._Basics_-_User_Input/L5_-_More_details/5._TextInput/0_index.md",
      "url": "2._Basics_-_User_Input/L5_-_More_details/5._TextInput/0_index.html",
      "content": "# 5. TextInput\nCreated Wednesday 04 November 2020\n\nHow to take text input in Android?\n\n* ``EditText`` view is used for taking text as input. It is a subclass of TextView.\n\n\n#### **Syntax in XML**\n\n* ``EditText`` skeleton - it is a self closing tag.\n\n\t<EditText\n\t\tandroid:layout_width=\"wrap_content\"\n\t\tandroid:layout_height=\"wrap_content\"/>\n\n\n* ``inputType`` - ``text``, ``textMultiline``, ``textCapWords``, ``date``, ``datetime``, ``number``, ``none`` [etc](https://developer.android.com/reference/android/widget/TextView#attr_android:inputType). These types can be combined using the bitwise OR (``|``) operator\n\n![](./5._TextInput/pasted_image001.png)\n\n* ``hint`` - text that is visible only if EditText is empty. Used as a label. It is optional.\n\n![](./5._TextInput/pasted_image002.png)\n\n* ``text`` - used as initial filler text. Optional. Can be overwritten.\n* ``onClick`` - triggered only for a single-line text input, where the 'Enter' key acts as the submit button. Does not work for textMultiline, because the 'Enter' key acts as the newline character.\n* ``selectAllOnFocus``=\"true\", selects everything when the user focuses.\n\n\n*****\n\n\n#### **EditText methods**\n\n* **getText()** - returns an 'Editable' object that contains text. Use **to_string()** to obtain text as a String, because cast does not work.\n* **setInputType(int type_name)** - for setting input type. Takes int as argument. The EditorInfo class has input type constants defined in it. e.g ``EditorInfo.TYPE_CLASS_PHONE``\n\n![](./5._TextInput/pasted_image.png)\n\n* **setText(String)** - used to set value in the field\n* **append(String)** - appends text to the field.\n* **clearFocus()** - clears the focus off the field. By default focus remains on the field even after submit.\n\n\n",
      "html": "<h1 id=\"5.-textinput\">5. TextInput <a class=\"heading-anchor-permalink\" href=\"#5.-textinput\">#</a></h1>\n<p>Created Wednesday 04 November 2020</p>\n<p>How to take text input in Android?</p>\n<ul>\n<li><code>EditText</code> view is used for taking text as input. It is a subclass of TextView.</li>\n</ul>\n<h4 id=\"syntax-in-xml\"><strong>Syntax in XML</strong> <a class=\"heading-anchor-permalink\" href=\"#syntax-in-xml\">#</a></h4>\n<ul>\n<li>\n<p><code>EditText</code> skeleton - it is a self closing tag.</p>\n<p><EditText\n  \tandroid:layout_width=\"wrap_content\"\n  \tandroid:layout_height=\"wrap_content\"/></p>\n</li>\n<li>\n<p><code>inputType</code> - <code>text</code>, <code>textMultiline</code>, <code>textCapWords</code>, <code>date</code>, <code>datetime</code>, <code>number</code>, <code>none</code> <a href=\"https://developer.android.com/reference/android/widget/TextView#attr_android:inputType\">etc</a>. These types can be combined using the bitwise OR (<code>|</code>) operator</p>\n</li>\n</ul>\n<p><img src=\"./5._TextInput/pasted_image001.png\" alt=\"\"></p>\n<ul>\n<li><code>hint</code> - text that is visible only if EditText is empty. Used as a label. It is optional.</li>\n</ul>\n<p><img src=\"./5._TextInput/pasted_image002.png\" alt=\"\"></p>\n<ul>\n<li><code>text</code> - used as initial filler text. Optional. Can be overwritten.</li>\n<li><code>onClick</code> - triggered only for a single-line text input, where the ‘Enter’ key acts as the submit button. Does not work for textMultiline, because the ‘Enter’ key acts as the newline character.</li>\n<li><code>selectAllOnFocus</code>=“true”, selects everything when the user focuses.</li>\n</ul>\n<hr>\n<h4 id=\"edittext-methods\"><strong>EditText methods</strong> <a class=\"heading-anchor-permalink\" href=\"#edittext-methods\">#</a></h4>\n<ul>\n<li><strong>getText()</strong> - returns an ‘Editable’ object that contains text. Use <strong>to_string()</strong> to obtain text as a String, because cast does not work.</li>\n<li><strong>setInputType(int type_name)</strong> - for setting input type. Takes int as argument. The EditorInfo class has input type constants defined in it. e.g <code>EditorInfo.TYPE_CLASS_PHONE</code></li>\n</ul>\n<p><img src=\"./5._TextInput/pasted_image.png\" alt=\"\"></p>\n<ul>\n<li><strong>setText(String)</strong> - used to set value in the field</li>\n<li><strong>append(String)</strong> - appends text to the field.</li>\n<li><strong>clearFocus()</strong> - clears the focus off the field. By default focus remains on the field even after submit.</li>\n</ul>\n",
      "id": 56
    },
    {
      "path": "2._Basics_-_User_Input/L5_-_More_details/6._Intent/0_index.md",
      "url": "2._Basics_-_User_Input/L5_-_More_details/6._Intent/0_index.html",
      "content": "# 6. Intent\nCreated Wednesday 04 November 2020\n\nWe have this app, but we need to send an email when 'Order' is pressed.\n![](./6._Intent/pasted_image.png)\nThere are two ways to do this:\n\n1. Write our own email program - Impractical because there are apps which do this better.\n2. Use an email app - send the summary to the app's compose activity.\n\nThis handover of data and subsequent switching over is done using intents.\n![](./6._Intent/pasted_image001.png)\n\n* Intent is a powerful feature of the Android OS.\n\n\n*****\n\n**How Intents work**\n\n* Intents are analogous to tossing a ball to someone(thrown to the OS), where the ball is automatically caught by a suitable person(i.e data is given to an app by the OS). \n\n![](./6._Intent/pasted_image002.png)\n\n* Intents can also be directed to a specific component of the recieving app.\n\nSome examples of Intents\n![](./6._Intent/pasted_image003.png)\t\t![](./6._Intent/pasted_image004.png)\t\t![](./6._Intent/pasted_image005.png)\n\n* The coolest part - we don't have to specify the reciever app. The OS chooses for us.\n\n![](./6._Intent/pasted_image006.png)![](./6._Intent/pasted_image007.png)\n\n* If multiple apps which are potent, an optional view for choosing an app appears. This view is also called the disambiguation dialog. It appears only if a default app has not been configured by the user.\n\n![](./6._Intent/pasted_image008.png)\n\n*****\n\n**Anatomy of an Intent**\n\n* There are 5 things in an Intent, but only 2 are requisite:\n\t1. Action - what to do - ACTION_DIAL, EMAIL, CAMERA\n\t2. Data URI - Data needed for action - email address, phone number, location coordinates\n\t3. Category - Type of recepient app - __OPTIONAL__\n\t4. Component - __OPTIONAL__\n\t5. Extras - extra information - __OPTIONAL__\n\n![](./6._Intent/pasted_image009.png)\t\t![](./6._Intent/pasted_image010.png)\n\n* All this information is used by the OS select a suitable app.\n\n\n*****\n\n**How to use Intent**\nSteps:\n\n1. Create an Intent object.\n2. Use **setAction()** - pass the action(actions are defined in class **Intent**). This step can be skipped by passing the action as constructor argument.\n3. Use **setData()** - pass in the Data URI, using the **Uri.parse(String)** method\n4. Check if an app is available - **resolveActivity(getPacketManager()) != null **\n5. If true, use **startActivity(intent_obj)**\n\n![](./6._Intent/pasted_image011.png)\n![](./6._Intent/pasted_image012.png)\nNote: \n\n* If action is set to ACTION_VIEW, a suitable app is selected based on the DataURI alone.\n* Nothing happens if the action and DataUri mismatch. e.g setting ACTION_DIAL and a geo URI will lead to inaction.\n* If there's no app to handle the Intent, it is discarded, i.e the app just ignores it and keeps running.\n\n\n*****\n\n[Common Intents Guide](http://developer.android.com/guide/components/intents-common.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics)\n\n",
      "html": "<h1 id=\"6.-intent\">6. Intent <a class=\"heading-anchor-permalink\" href=\"#6.-intent\">#</a></h1>\n<p>Created Wednesday 04 November 2020</p>\n<p>We have this app, but we need to send an email when ‘Order’ is pressed.\n<img src=\"./6._Intent/pasted_image.png\" alt=\"\">\nThere are two ways to do this:</p>\n<ol>\n<li>Write our own email program - Impractical because there are apps which do this better.</li>\n<li>Use an email app - send the summary to the app’s compose activity.</li>\n</ol>\n<p>This handover of data and subsequent switching over is done using intents.\n<img src=\"./6._Intent/pasted_image001.png\" alt=\"\"></p>\n<ul>\n<li>Intent is a powerful feature of the Android OS.</li>\n</ul>\n<hr>\n<p><strong>How Intents work</strong></p>\n<ul>\n<li>Intents are analogous to tossing a ball to someone(thrown to the OS), where the ball is automatically caught by a suitable person(i.e data is given to an app by the OS).</li>\n</ul>\n<p><img src=\"./6._Intent/pasted_image002.png\" alt=\"\"></p>\n<ul>\n<li>Intents can also be directed to a specific component of the recieving app.</li>\n</ul>\n<p>Some examples of Intents\n<img src=\"./6._Intent/pasted_image003.png\" alt=\"\">\t\t<img src=\"./6._Intent/pasted_image004.png\" alt=\"\">\t\t<img src=\"./6._Intent/pasted_image005.png\" alt=\"\"></p>\n<ul>\n<li>The coolest part - we don’t have to specify the reciever app. The OS chooses for us.</li>\n</ul>\n<p><img src=\"./6._Intent/pasted_image006.png\" alt=\"\"><img src=\"./6._Intent/pasted_image007.png\" alt=\"\"></p>\n<ul>\n<li>If multiple apps which are potent, an optional view for choosing an app appears. This view is also called the disambiguation dialog. It appears only if a default app has not been configured by the user.</li>\n</ul>\n<p><img src=\"./6._Intent/pasted_image008.png\" alt=\"\"></p>\n<hr>\n<p><strong>Anatomy of an Intent</strong></p>\n<ul>\n<li>There are 5 things in an Intent, but only 2 are requisite:\n<ol>\n<li>Action - what to do - ACTION_DIAL, EMAIL, CAMERA</li>\n<li>Data URI - Data needed for action - email address, phone number, location coordinates</li>\n<li>Category - Type of recepient app - <strong>OPTIONAL</strong></li>\n<li>Component - <strong>OPTIONAL</strong></li>\n<li>Extras - extra information - <strong>OPTIONAL</strong></li>\n</ol>\n</li>\n</ul>\n<p><img src=\"./6._Intent/pasted_image009.png\" alt=\"\">\t\t<img src=\"./6._Intent/pasted_image010.png\" alt=\"\"></p>\n<ul>\n<li>All this information is used by the OS select a suitable app.</li>\n</ul>\n<hr>\n<p><strong>How to use Intent</strong>\nSteps:</p>\n<ol>\n<li>Create an Intent object.</li>\n<li>Use <strong>setAction()</strong> - pass the action(actions are defined in class <strong>Intent</strong>). This step can be skipped by passing the action as constructor argument.</li>\n<li>Use <strong>setData()</strong> - pass in the Data URI, using the <strong>Uri.parse(String)</strong> method</li>\n<li>Check if an app is available - **resolveActivity(getPacketManager()) != null **</li>\n<li>If true, use <strong>startActivity(intent_obj)</strong></li>\n</ol>\n<p><img src=\"./6._Intent/pasted_image011.png\" alt=\"\">\n<img src=\"./6._Intent/pasted_image012.png\" alt=\"\">\nNote:</p>\n<ul>\n<li>If action is set to ACTION_VIEW, a suitable app is selected based on the DataURI alone.</li>\n<li>Nothing happens if the action and DataUri mismatch. e.g setting ACTION_DIAL and a geo URI will lead to inaction.</li>\n<li>If there’s no app to handle the Intent, it is discarded, i.e the app just ignores it and keeps running.</li>\n</ul>\n<hr>\n<p><a href=\"http://developer.android.com/guide/components/intents-common.html?utm_source=udacity&amp;utm_medium=course&amp;utm_campaign=android_basics\">Common Intents Guide</a></p>\n",
      "id": 57
    },
    {
      "path": "2._Basics_-_User_Input/L5_-_More_details/7._Localization/0_index.md",
      "url": "2._Basics_-_User_Input/L5_-_More_details/7._Localization/0_index.html",
      "content": "# 7. Localization\nCreated Thursday 05 November 2020\n\n[./_App_6](./7._Localization/_App_6)\n\n* Localization means enabling an app to change w.r.t different locales(language, region).\n* This may change our app in some ways, and the strings that appear.\n* Many languages are available in Android, both symbol based(Chinese) and RTL(Arabic, Hebrew).\n\n[Guide for Localization](https://www.youtube.com/watch?v=_b0iU2LzlUo&ab_channel=GoogleDevelopers)\n\n*****\n\n\n#### Localization overview\n\n* Our app has default resources in the **res** directory. These default resources are in English.\n\n![](./7._Localization/pasted_image.png)\n\n* We can also provide alternate resources based on the size, language, resolution and versions of Android. These are loaded **automatically**(awesome!!) according to system settings, i.e the developer doesn't have to mention locale specific resources in the code. \n* Language resources are used when a language is set.\n\n![](./7._Localization/pasted_image001.png)\n\n* Structure of the **res** folder\n\n![](./7._Localization/pasted_image002.png)\n\n* If a specific resource is not available, the app falls back to the default one.\n* Android used two letter IS code. e.g German - de, French - fr, Arabic - ar, Japanese - ja\n\n\n\n#### Details about Localization\n\n* We need to separate the logic of the app and the locale resources that are shown. This means using strings only from the res directory.\n* Add all alternate resources like this - **dirName-fr**. e.g values-fr. These directories are on the same level as the default resource folders. The files are named the same as in the default folders.\n\n![](./7._Localization/pasted_image003.png)\n\n* The resource files, like XML and pictures, need to have all the tags with the same specification as the default resource tags. Only the content must change.\n\n![](./7._Localization/pasted_image004.png)\n\n* The default XML and Java logic remain the same, even after localization.\n\nThe string ``hello_world`` here is selected automatically from the resources based on the locale.\n![](./7._Localization/pasted_image006.png) ![](./7._Localization/pasted_image005.png) \nNote: The default resources are not called 'default' explicitly. Every resource which has no locale specification is a ``default`` resource.\n\n\n#### Steps for Localization\n\n* Duplicate and rename the resource folders(values, layout etc).\n* Replace the content in the files within these new directories. This means replacing all hardcoded strings by @string/string_name in XML and **getString**(R.string.string_name) in Java files. Remember, file names are not changed.\n\nNote: All this can be done using the translator editor in Android Studio. This creates all the folders, files at the right places. Just edit the table\n![](./7._Localization/pasted_image012.png)\n\n\n#### Precautions when localizing\n\n1. Use place holders - To prevent lame translations. This ensures the complete sentences are translated.\n\n![](./7._Localization/pasted_image007.png) ![](./7._Localization/pasted_image008.png)\n\n2. Provide char limit - this will help translators keep the new string under the maximum length. Prevents cut-off text.\n\nThe general rule is to add 30% extra space to UI elements to accommodate other languages. \n![](./7._Localization/pasted_image009.png)![](./7._Localization/pasted_image010.png)\n\n3. If a string does not need translation, set the **translation=\"false\" **attribute.\n4. Don't concatenate strings in a locale sensitive region. For a sentence containing fixed strings such as a name. Use an **xliff** tag, this ensures that the translator can change the order of words based on locale, but 'name' remains the same across all translations.\n\n![](./7._Localization/pasted_image011.png)\n\n* An xliff tag has an **id **and an **example**, with place-holders(like %s for string) being used for content.\n* Using xliff requires a namespace declaration.\n* The Java code changes a little here, the **getString** method also needs the variable here. i.e **getString(R.string.*order_summary*, xliff_id)**. This helps in correct ordering of the words and the name in it.\n* Multiple xliff tags in the same string are okay.\n* This does not work - If order of multiple xliff tags(in the same string) differs for locales. Then all tags are as per default.\n\n\n\n5. Avoid creating more resource files and text strings than you need. e.g If we need British phrases, include only the ones which are different from the default, i.e let the app fallback to default if they are the same in both langs.\n\n\n",
      "html": "<h1 id=\"7.-localization\">7. Localization <a class=\"heading-anchor-permalink\" href=\"#7.-localization\">#</a></h1>\n<p>Created Thursday 05 November 2020</p>\n<p><a href=\"./7._Localization/_App_6\">./_App_6</a></p>\n<ul>\n<li>Localization means enabling an app to change w.r.t different locales(language, region).</li>\n<li>This may change our app in some ways, and the strings that appear.</li>\n<li>Many languages are available in Android, both symbol based(Chinese) and RTL(Arabic, Hebrew).</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=_b0iU2LzlUo&amp;ab_channel=GoogleDevelopers\">Guide for Localization</a></p>\n<hr>\n<h4 id=\"localization-overview\">Localization overview <a class=\"heading-anchor-permalink\" href=\"#localization-overview\">#</a></h4>\n<ul>\n<li>Our app has default resources in the <strong>res</strong> directory. These default resources are in English.</li>\n</ul>\n<p><img src=\"./7._Localization/pasted_image.png\" alt=\"\"></p>\n<ul>\n<li>We can also provide alternate resources based on the size, language, resolution and versions of Android. These are loaded <strong>automatically</strong>(awesome!!) according to system settings, i.e the developer doesn’t have to mention locale specific resources in the code.</li>\n<li>Language resources are used when a language is set.</li>\n</ul>\n<p><img src=\"./7._Localization/pasted_image001.png\" alt=\"\"></p>\n<ul>\n<li>Structure of the <strong>res</strong> folder</li>\n</ul>\n<p><img src=\"./7._Localization/pasted_image002.png\" alt=\"\"></p>\n<ul>\n<li>If a specific resource is not available, the app falls back to the default one.</li>\n<li>Android used two letter IS code. e.g German - de, French - fr, Arabic - ar, Japanese - ja</li>\n</ul>\n<h4 id=\"details-about-localization\">Details about Localization <a class=\"heading-anchor-permalink\" href=\"#details-about-localization\">#</a></h4>\n<ul>\n<li>We need to separate the logic of the app and the locale resources that are shown. This means using strings only from the res directory.</li>\n<li>Add all alternate resources like this - <strong>dirName-fr</strong>. e.g values-fr. These directories are on the same level as the default resource folders. The files are named the same as in the default folders.</li>\n</ul>\n<p><img src=\"./7._Localization/pasted_image003.png\" alt=\"\"></p>\n<ul>\n<li>The resource files, like XML and pictures, need to have all the tags with the same specification as the default resource tags. Only the content must change.</li>\n</ul>\n<p><img src=\"./7._Localization/pasted_image004.png\" alt=\"\"></p>\n<ul>\n<li>The default XML and Java logic remain the same, even after localization.</li>\n</ul>\n<p>The string <code>hello_world</code> here is selected automatically from the resources based on the locale.\n<img src=\"./7._Localization/pasted_image006.png\" alt=\"\"> <img src=\"./7._Localization/pasted_image005.png\" alt=\"\">\nNote: The default resources are not called ‘default’ explicitly. Every resource which has no locale specification is a <code>default</code> resource.</p>\n<h4 id=\"steps-for-localization\">Steps for Localization <a class=\"heading-anchor-permalink\" href=\"#steps-for-localization\">#</a></h4>\n<ul>\n<li>Duplicate and rename the resource folders(values, layout etc).</li>\n<li>Replace the content in the files within these new directories. This means replacing all hardcoded strings by @string/string_name in XML and <strong>getString</strong>(R.string.string_name) in Java files. Remember, file names are not changed.</li>\n</ul>\n<p>Note: All this can be done using the translator editor in Android Studio. This creates all the folders, files at the right places. Just edit the table\n<img src=\"./7._Localization/pasted_image012.png\" alt=\"\"></p>\n<h4 id=\"precautions-when-localizing\">Precautions when localizing <a class=\"heading-anchor-permalink\" href=\"#precautions-when-localizing\">#</a></h4>\n<ol>\n<li>Use place holders - To prevent lame translations. This ensures the complete sentences are translated.</li>\n</ol>\n<p><img src=\"./7._Localization/pasted_image007.png\" alt=\"\"> <img src=\"./7._Localization/pasted_image008.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>Provide char limit - this will help translators keep the new string under the maximum length. Prevents cut-off text.</li>\n</ol>\n<p>The general rule is to add 30% extra space to UI elements to accommodate other languages.\n<img src=\"./7._Localization/pasted_image009.png\" alt=\"\"><img src=\"./7._Localization/pasted_image010.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>If a string does not need translation, set the **translation=“false” **attribute.</li>\n<li>Don’t concatenate strings in a locale sensitive region. For a sentence containing fixed strings such as a name. Use an <strong>xliff</strong> tag, this ensures that the translator can change the order of words based on locale, but ‘name’ remains the same across all translations.</li>\n</ol>\n<p><img src=\"./7._Localization/pasted_image011.png\" alt=\"\"></p>\n<ul>\n<li>An xliff tag has an **id **and an <strong>example</strong>, with place-holders(like %s for string) being used for content.</li>\n<li>Using xliff requires a namespace declaration.</li>\n<li>The Java code changes a little here, the <strong>getString</strong> method also needs the variable here. i.e <strong>getString(R.string.<em>order_summary</em>, xliff_id)</strong>. This helps in correct ordering of the words and the name in it.</li>\n<li>Multiple xliff tags in the same string are okay.</li>\n<li>This does not work - If order of multiple xliff tags(in the same string) differs for locales. Then all tags are as per default.</li>\n</ul>\n<ol start=\"5\">\n<li>Avoid creating more resource files and text strings than you need. e.g If we need British phrases, include only the ones which are different from the default, i.e let the app fallback to default if they are the same in both langs.</li>\n</ol>\n",
      "id": 58
    },
    {
      "path": "2._Basics_-_User_Input/L5_-_More_details/8._Styles/0_index.md",
      "url": "2._Basics_-_User_Input/L5_-_More_details/8._Styles/0_index.html",
      "content": "# 8. Styles\nCreated Thursday 05 November 2020\n\n\n* If we have the same attributes in multiple headers(elements) in the XML, it undermines the DRY principle. To avoid it, we use styles.\n* Styles also helps in separating design and content.\n\n\n#### Style details\n\n* Styles are stored in the **res/values/** directory. Style files can be named anything, but they should be XML files. \n* A **style** contains **item** elements inside it, which is enclosed inside a single root **resources** element.\n* The **style **tag has two attributes:\n\t* *name* - name which will be used in Java/XML files.\n\t* *parent* - specified only if the style inherits from other styles.\n* An **item** tag has two things:\n\t* a *name* attribute indicating the attribute the item specifies.\n\t* content of the tag - value which will be applied.\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<resources>\n\t\t<style name=\"CodeFont\" parent=\"@android:style/TextAppearance.Medium\">\n\t\t\t<item name=\"android:layout_width\">fill_parent</item>\n\t\t\t<item name=\"android:layout_height\">wrap_content</item>\n\t\t\t<item name=\"android:textColor\">#FF0000</item>\n\t\t\t<item name=\"android:layout_width\">fill_parent</item>\n\t\t</style>\n\t</resources>\n\nNote: Styles reside in the **res/values/** folder, so styles can be localized. They are specified in a style.xml file.\n\n#### Using styles\nJust add the style attribute.\n\t<TextView\n\t\tandroid:layout_width=\"match_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:textColor=\"#00FF00\"\n\t\tandroid:typeface=\"monospace\"\n\t\tandroid:text=\"@string/hello\" />\n\t\n\t<!-- With style - CodeFont.xml -->\n\t\n\t<TextView\n\t\tstyle=\"@style/CodeFont\"\n\t\tandroid:text=\"@string/hello\" />\n\nNote: \n\n* the style attribute does not need a namespace.\n\n\n",
      "html": "<h1 id=\"8.-styles\">8. Styles <a class=\"heading-anchor-permalink\" href=\"#8.-styles\">#</a></h1>\n<p>Created Thursday 05 November 2020</p>\n<ul>\n<li>If we have the same attributes in multiple headers(elements) in the XML, it undermines the DRY principle. To avoid it, we use styles.</li>\n<li>Styles also helps in separating design and content.</li>\n</ul>\n<h4 id=\"style-details\">Style details <a class=\"heading-anchor-permalink\" href=\"#style-details\">#</a></h4>\n<ul>\n<li>\n<p>Styles are stored in the <strong>res/values/</strong> directory. Style files can be named anything, but they should be XML files.</p>\n</li>\n<li>\n<p>A <strong>style</strong> contains <strong>item</strong> elements inside it, which is enclosed inside a single root <strong>resources</strong> element.</p>\n</li>\n<li>\n<p>The **style **tag has two attributes:</p>\n<ul>\n<li><em>name</em> - name which will be used in Java/XML files.</li>\n<li><em>parent</em> - specified only if the style inherits from other styles.</li>\n</ul>\n</li>\n<li>\n<p>An <strong>item</strong> tag has two things:</p>\n<ul>\n<li>a <em>name</em> attribute indicating the attribute the item specifies.</li>\n<li>content of the tag - value which will be applied.</li>\n</ul>\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <resources>\n  \t<style name=\"CodeFont\" parent=\"@android:style/TextAppearance.Medium\">\n  \t\t<item name=\"android:layout_width\">fill_parent</item>\n  \t\t<item name=\"android:layout_height\">wrap_content</item>\n  \t\t<item name=\"android:textColor\">#FF0000</item>\n  \t\t<item name=\"android:layout_width\">fill_parent</item>\n  \t</style>\n  </resources>\n</li>\n</ul>\n<p>Note: Styles reside in the <strong>res/values/</strong> folder, so styles can be localized. They are specified in a style.xml file.</p>\n<h4 id=\"using-styles\">Using styles <a class=\"heading-anchor-permalink\" href=\"#using-styles\">#</a></h4>\n<p>Just add the style attribute.\n<TextView\n\t\tandroid:layout_width=\"match_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:textColor=\"#00FF00\"\n\t\tandroid:typeface=\"monospace\"\n\t\tandroid:text=\"@string/hello\" /></p>\n<pre><code>&lt;!-- With style - CodeFont.xml --&gt;\n\n&lt;TextView\n\tstyle=&quot;@style/CodeFont&quot;\n\tandroid:text=&quot;@string/hello&quot; /&gt;\n</code></pre>\n<p>Note:</p>\n<ul>\n<li>the style attribute does not need a namespace.</li>\n</ul>\n",
      "id": 59
    },
    {
      "path": "2._Basics_-_User_Input/L5_-_More_details/9._Themes/0_index.md",
      "url": "2._Basics_-_User_Input/L5_-_More_details/9._Themes/0_index.html",
      "content": "# 9. Themes\nCreated Thursday 05 November 2020\n\nStyle - styles a view\nTheme - styles all views in an activity\n\n* Android OS provides some basic themes out-of-the-box\n* Material themes is an open source theme resource.\n\n\n*****\n\n**How are themes used**\n\n1. Download and place the theme XML files\n2. Add them as parent to the style tags -  All styles will now inherit from the Theme styles.\n\n![](./9._Themes/pasted_image.png)\n\n*****\n\nFor old versions of Android we need to use the support library, viz Theme.AppCompat.Light themes.\n<https://www.materialpalette.com>\n\n",
      "html": "<h1 id=\"9.-themes\">9. Themes <a class=\"heading-anchor-permalink\" href=\"#9.-themes\">#</a></h1>\n<p>Created Thursday 05 November 2020</p>\n<p>Style - styles a view\nTheme - styles all views in an activity</p>\n<ul>\n<li>Android OS provides some basic themes out-of-the-box</li>\n<li>Material themes is an open source theme resource.</li>\n</ul>\n<hr>\n<p><strong>How are themes used</strong></p>\n<ol>\n<li>Download and place the theme XML files</li>\n<li>Add them as parent to the style tags -  All styles will now inherit from the Theme styles.</li>\n</ol>\n<p><img src=\"./9._Themes/pasted_image.png\" alt=\"\"></p>\n<hr>\n<p>For old versions of Android we need to use the support library, viz Theme.AppCompat.Light themes.\n<a href=\"https://www.materialpalette.com\">https://www.materialpalette.com</a></p>\n",
      "id": 60
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/0_index.html",
      "content": "# 3. Basics - Multiscreen Apps\nCreated Wednesday 18 November 2020\n\n[Miwok App](./3._Basics_-_Multiscreen_Apps/_ud839_Miwok)\n\nMultiscreen apps (10 days) - (<https://www.udacity.com/course/android-basics-multiscreen-apps--ud839>)\n\n[./english_miwok.pdf](./3._Basics_-_Multiscreen_Apps/english_miwok.pdf)\n\n",
      "html": "<h1 id=\"3.-basics---multiscreen-apps\">3. Basics - Multiscreen Apps <a class=\"heading-anchor-permalink\" href=\"#3.-basics---multiscreen-apps\">#</a></h1>\n<p>Created Wednesday 18 November 2020</p>\n<p><a href=\"./3._Basics_-_Multiscreen_Apps/_ud839_Miwok\">Miwok App</a></p>\n<p>Multiscreen apps (10 days) - (<a href=\"https://www.udacity.com/course/android-basics-multiscreen-apps--ud839\">https://www.udacity.com/course/android-basics-multiscreen-apps--ud839</a>)</p>\n<p><a href=\"./3._Basics_-_Multiscreen_Apps/english_miwok.pdf\">./english_miwok.pdf</a></p>\n",
      "id": 61
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/1._Intro/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/1._Intro/0_index.html",
      "content": "# 1. Intro\nCreated Wednesday 18 November 2020\n\nIn this course, we'll be building the Miwok language app in 5 stages:\n\n1. Lesson 1\n\t* Show multiple screen in our app.\n\t* Learn how Android handles user touch events.\n\n![](./1._Intro/pasted_image.png)\n\n2. Lesson 2\n\t* Display a list of words.\n\t* Learn about data structures in Java\n\n![](./1._Intro/pasted_image002.png)\n\n3. Lesson 3\n\t* Add images in the list for each word\n\t* Style the app - color, font style, spacing etc\n\n![](./1._Intro/pasted_image003.png)\n\n4. Lesson 4\n\t* Add a 'listen' button for listening to the pronunciation for each word.\n\t* Learn about the media player in Android for playing MP3\n\n![](./1._Intro/pasted_image001.png)\n\n5. Lesson 5\n\t* Integrate all lists to a single activity\n\t* Change the navigation flow by using Activity fragments\n\n![](./1._Intro/pasted_image004.png)\n\n",
      "html": "<h1 id=\"1.-intro\">1. Intro <a class=\"heading-anchor-permalink\" href=\"#1.-intro\">#</a></h1>\n<p>Created Wednesday 18 November 2020</p>\n<p>In this course, we’ll be building the Miwok language app in 5 stages:</p>\n<ol>\n<li>Lesson 1\n<ul>\n<li>Show multiple screen in our app.</li>\n<li>Learn how Android handles user touch events.</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"./1._Intro/pasted_image.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>Lesson 2\n<ul>\n<li>Display a list of words.</li>\n<li>Learn about data structures in Java</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"./1._Intro/pasted_image002.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>Lesson 3\n<ul>\n<li>Add images in the list for each word</li>\n<li>Style the app - color, font style, spacing etc</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"./1._Intro/pasted_image003.png\" alt=\"\"></p>\n<ol start=\"4\">\n<li>Lesson 4\n<ul>\n<li>Add a ‘listen’ button for listening to the pronunciation for each word.</li>\n<li>Learn about the media player in Android for playing MP3</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"./1._Intro/pasted_image001.png\" alt=\"\"></p>\n<ol start=\"5\">\n<li>Lesson 5\n<ul>\n<li>Integrate all lists to a single activity</li>\n<li>Change the navigation flow by using Activity fragments</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"./1._Intro/pasted_image004.png\" alt=\"\"></p>\n",
      "id": 62
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/10._Event_Listeners_-_Intro/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/10._Event_Listeners_-_Intro/0_index.html",
      "content": "# 10. Event Listeners - Intro\nCreated Saturday 21 November 2020\n\n\n* In all our apps so far, we've used the **android:onClick **to execute code when a view is pressed.\n* Professional developers don't use **onClick** to hook up events.\n\n\n#### **Why?**\n\n* Separation of concerns, between the XML and logic(Java/Kotlin).\n* We can attach/change/remove the listener at any time in the Java file.\n* When you define a listener using the onClick attribute, the host view looks for the callback method only within its activity file. In contrast, programmatically setting an ``onClickListener`` allows us to control a button's behavior from anywhere within the logic files.\n* Using listeners is a must when using a Fragment, which we'll learn soon.\n\n\n**How does a touch event work?**\n--------------------------------\n\n* We set up an event listener on a view where we want to listen for the event.\n* The user touches a view on the screen.\n* Screen hardware notifies the OS that a touch event has occurred.\n* The OS locates the view where the event occurred.\n* This means that we are 'listening' for touch events.\n* Each event listener offers a single method to be run when the event occurs, which we can add code for.\n* The function is technically known as the *callback* method, aka *call after* because it is called by other code, and not by the programmer.\n\n![](./10._Event_Listeners_-_Intro/pasted_image.png)\n\n*****\n\nQuestions - from [here](http://developer.android.com/guide/topics/ui/ui-events.html)\n\n1. Why have interfaces instead of functions - Because Java doesn't allow passing functions as arguments, we cannot pass the callback to the event handler. **Detour** - *Lambdas do allow this from Java 8 onwards.*\n2. Why have a 'single function interface' for each type of event? - If we had multiple functions(corresponding to different kinds of events) in the same interface, we'd have to provide empty bodies(stubs) for all types of events that we don't need. This would be very impractical. To avoid this, Android uses SAM(Single Abstract Method) interfaces. **Another** reason is that in the (View, Event) table, we can have a tree data structure. This makes the lookup faster, when an event occurs.\n\n\n* Better use [lambdas](https://mayojava.github.io/android/java/using-java8-lambda-expressions-in-android/) instead, syntax is similar to C++ lambdas.\n\n![](./10._Event_Listeners_-_Intro/pasted_image002.png)\n\n*****\n\nMy understanding of Events in Java\n![](./10._Event_Listeners_-_Intro/pasted_image001.png)\n\n",
      "html": "<h1 id=\"10.-event-listeners---intro\">10. Event Listeners - Intro <a class=\"heading-anchor-permalink\" href=\"#10.-event-listeners---intro\">#</a></h1>\n<p>Created Saturday 21 November 2020</p>\n<ul>\n<li>In all our apps so far, we’ve used the **android:onClick **to execute code when a view is pressed.</li>\n<li>Professional developers don’t use <strong>onClick</strong> to hook up events.</li>\n</ul>\n<h4 id=\"why%3F\"><strong>Why?</strong> <a class=\"heading-anchor-permalink\" href=\"#why%3F\">#</a></h4>\n<ul>\n<li>Separation of concerns, between the XML and logic(Java/Kotlin).</li>\n<li>We can attach/change/remove the listener at any time in the Java file.</li>\n<li>When you define a listener using the onClick attribute, the host view looks for the callback method only within its activity file. In contrast, programmatically setting an <code>onClickListener</code> allows us to control a button’s behavior from anywhere within the logic files.</li>\n<li>Using listeners is a must when using a Fragment, which we’ll learn soon.</li>\n</ul>\n<h2 id=\"how-does-a-touch-event-work%3F\"><strong>How does a touch event work?</strong> <a class=\"heading-anchor-permalink\" href=\"#how-does-a-touch-event-work%3F\">#</a></h2>\n<ul>\n<li>We set up an event listener on a view where we want to listen for the event.</li>\n<li>The user touches a view on the screen.</li>\n<li>Screen hardware notifies the OS that a touch event has occurred.</li>\n<li>The OS locates the view where the event occurred.</li>\n<li>This means that we are ‘listening’ for touch events.</li>\n<li>Each event listener offers a single method to be run when the event occurs, which we can add code for.</li>\n<li>The function is technically known as the <em>callback</em> method, aka <em>call after</em> because it is called by other code, and not by the programmer.</li>\n</ul>\n<p><img src=\"./10._Event_Listeners_-_Intro/pasted_image.png\" alt=\"\"></p>\n<hr>\n<p>Questions - from <a href=\"http://developer.android.com/guide/topics/ui/ui-events.html\">here</a></p>\n<ol>\n<li>Why have interfaces instead of functions - Because Java doesn’t allow passing functions as arguments, we cannot pass the callback to the event handler. <strong>Detour</strong> - <em>Lambdas do allow this from Java 8 onwards.</em></li>\n<li>Why have a ‘single function interface’ for each type of event? - If we had multiple functions(corresponding to different kinds of events) in the same interface, we’d have to provide empty bodies(stubs) for all types of events that we don’t need. This would be very impractical. To avoid this, Android uses SAM(Single Abstract Method) interfaces. <strong>Another</strong> reason is that in the (View, Event) table, we can have a tree data structure. This makes the lookup faster, when an event occurs.</li>\n</ol>\n<ul>\n<li>Better use <a href=\"https://mayojava.github.io/android/java/using-java8-lambda-expressions-in-android/\">lambdas</a> instead, syntax is similar to C++ lambdas.</li>\n</ul>\n<p><img src=\"./10._Event_Listeners_-_Intro/pasted_image002.png\" alt=\"\"></p>\n<hr>\n<p>My understanding of Events in Java\n<img src=\"./10._Event_Listeners_-_Intro/pasted_image001.png\" alt=\"\"></p>\n",
      "id": 63
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/11._Event_Listeners_in_Android_-_Details/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/11._Event_Listeners_in_Android_-_Details/0_index.html",
      "content": "# 11. Event Listeners in Android - Details\nCreated Monday 23 November 2020\n\n\n1. We have our view which is going to handle an event.\n\n![](./11._Event_Listeners_in_Android_-_Details/pasted_image.png)\n\n2. A view has many methods There's one called **setOnClickListener()** which adds an entry in the (View, Event) table.\n\n![](./11._Event_Listeners_in_Android_-_Details/pasted_image001.png)\n\n3. This **setOnClickListener()** takes as argument an implemented object of an Interface(defined in the **View**) called **OnClickListener**.\n\n![](./11._Event_Listeners_in_Android_-_Details/pasted_image002.png)\n\n4. This reference object has a function named **onClick()** which is executed when the event occurs.\n\n![](./11._Event_Listeners_in_Android_-_Details/pasted_image003.png)\n\n5. We add code for **onClick** function, which we override.\n\n![](./11._Event_Listeners_in_Android_-_Details/pasted_image004.png)\nThere are three ways to do so:\n\n1. By using an anoynmous class, for creating the reference of **OnClickListener**\n\n![](./11._Event_Listeners_in_Android_-_Details/pasted_image005.png)\n\n2. By implementing the interface **OnClickListener**, and passing the current object itself as reference.\n\n![](./11._Event_Listeners_in_Android_-_Details/pasted_image006.png)\n\n3. Use Lambda - best. Argument is the host view.\n\n![](./11._Event_Listeners_in_Android_-_Details/pasted_image007.png)\nNote: \n\n* Except for the name, the **onClick** function is exactly the same as a custom callback function for the ``onClick`` attribute: it is **public void** and takes the host **View** as argument.\n\n\n*****\n\nThis is very similar to JavaScript.\nIn JS we do this.\n\tbutton.addEventListener('click', function()\n\t\t\t\t\t\t\t\t\t{ /*code to run*/ }\n\t);\n\nIn Android the reference object specifies both the event and the code as a single unit. i.e we don't have to pass the event separately.\n\tbutton.setOnClickListener(new OnClickListener()\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void onClick(View v)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t/*code to run*/\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t);\n\t\n\t// or better\n\t\n\tbutton.setOnClickListener(v -> System.out.println()); // Type is inferenced\n\n\nDifference between JS and Android Event listeners:\n\n1. JS has a common 'addEventListener' method for all events; Each event has its own eventSetter(**:)**) in Android.\n2. JS specifies the event; Android doesn't need to because the eventSetter method specifies it.\n3. JS takes in a method as argument.\n\n\n",
      "html": "<h1 id=\"11.-event-listeners-in-android---details\">11. Event Listeners in Android - Details <a class=\"heading-anchor-permalink\" href=\"#11.-event-listeners-in-android---details\">#</a></h1>\n<p>Created Monday 23 November 2020</p>\n<ol>\n<li>We have our view which is going to handle an event.</li>\n</ol>\n<p><img src=\"./11._Event_Listeners_in_Android_-_Details/pasted_image.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>A view has many methods There’s one called <strong>setOnClickListener()</strong> which adds an entry in the (View, Event) table.</li>\n</ol>\n<p><img src=\"./11._Event_Listeners_in_Android_-_Details/pasted_image001.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>This <strong>setOnClickListener()</strong> takes as argument an implemented object of an Interface(defined in the <strong>View</strong>) called <strong>OnClickListener</strong>.</li>\n</ol>\n<p><img src=\"./11._Event_Listeners_in_Android_-_Details/pasted_image002.png\" alt=\"\"></p>\n<ol start=\"4\">\n<li>This reference object has a function named <strong>onClick()</strong> which is executed when the event occurs.</li>\n</ol>\n<p><img src=\"./11._Event_Listeners_in_Android_-_Details/pasted_image003.png\" alt=\"\"></p>\n<ol start=\"5\">\n<li>We add code for <strong>onClick</strong> function, which we override.</li>\n</ol>\n<p><img src=\"./11._Event_Listeners_in_Android_-_Details/pasted_image004.png\" alt=\"\">\nThere are three ways to do so:</p>\n<ol>\n<li>By using an anoynmous class, for creating the reference of <strong>OnClickListener</strong></li>\n</ol>\n<p><img src=\"./11._Event_Listeners_in_Android_-_Details/pasted_image005.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>By implementing the interface <strong>OnClickListener</strong>, and passing the current object itself as reference.</li>\n</ol>\n<p><img src=\"./11._Event_Listeners_in_Android_-_Details/pasted_image006.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>Use Lambda - best. Argument is the host view.</li>\n</ol>\n<p><img src=\"./11._Event_Listeners_in_Android_-_Details/pasted_image007.png\" alt=\"\">\nNote:</p>\n<ul>\n<li>Except for the name, the <strong>onClick</strong> function is exactly the same as a custom callback function for the <code>onClick</code> attribute: it is <strong>public void</strong> and takes the host <strong>View</strong> as argument.</li>\n</ul>\n<hr>\n<p>This is very similar to JavaScript.\nIn JS we do this.\nbutton.addEventListener(‘click’, function()\n{ /<em>code to run</em>/ }\n);</p>\n<p>In Android the reference object specifies both the event and the code as a single unit. i.e we don’t have to pass the event separately.\nbutton.setOnClickListener(new OnClickListener()\n{\n@Override\npublic void onClick(View v)\n{\n/<em>code to run</em>/\n}\n}\n);</p>\n<pre><code>// or better\n\nbutton.setOnClickListener(v -&gt; System.out.println()); // Type is inferenced\n</code></pre>\n<p>Difference between JS and Android Event listeners:</p>\n<ol>\n<li>JS has a common ‘addEventListener’ method for all events; Each event has its own eventSetter(<strong>:)</strong>) in Android.</li>\n<li>JS specifies the event; Android doesn’t need to because the eventSetter method specifies it.</li>\n<li>JS takes in a method as argument.</li>\n</ol>\n",
      "id": 64
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/12._Why_use_interfaces.md",
      "url": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/12._Why_use_interfaces.html",
      "content": "# 12. Why use interfaces\nCreated Monday 23 November 2020\n\nThe Android team had this in mind:\n\n1. Developers would want to customize event behavior.\n2. The Team had to standardize how events work in Android.\n3. Java didn't allow lambdas at the time.\n4. Only views trigger events.\n\n\nSAM interfaces in the View class solved all problems.\n\n",
      "html": "<h1 id=\"12.-why-use-interfaces\">12. Why use interfaces <a class=\"heading-anchor-permalink\" href=\"#12.-why-use-interfaces\">#</a></h1>\n<p>Created Monday 23 November 2020</p>\n<p>The Android team had this in mind:</p>\n<ol>\n<li>Developers would want to customize event behavior.</li>\n<li>The Team had to standardize how events work in Android.</li>\n<li>Java didn’t allow lambdas at the time.</li>\n<li>Only views trigger events.</li>\n</ol>\n<p>SAM interfaces in the View class solved all problems.</p>\n",
      "id": 65
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/13._How_to_setup_an_event_listener/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/13._How_to_setup_an_event_listener/0_index.html",
      "content": "# 13. How to setup an event listener\nCreated Monday 23 November 2020\n\nFollow these steps:\n\n1. Define the event listener and it's behavior. Use any of the two ways we've seen before.\n\n![](./13._How_to_setup_an_event_listener/pasted_image.png)\n\n2. Create the reference object using its constructor.\n\n![](./13._How_to_setup_an_event_listener/pasted_image001.png)\n\n3. Attach the clickListener. This is done by passing the reference object to the setOnClickListener\n\n![](./13._How_to_setup_an_event_listener/pasted_image002.png)\n\n*****\n\n\n* There's a better way(a one liner), where we don't need to create another class. We can make an anonymous class implementing View.onClickListener\n\n![](./13._How_to_setup_an_event_listener/pasted_image003.png)\n\n",
      "html": "<h1 id=\"13.-how-to-setup-an-event-listener\">13. How to setup an event listener <a class=\"heading-anchor-permalink\" href=\"#13.-how-to-setup-an-event-listener\">#</a></h1>\n<p>Created Monday 23 November 2020</p>\n<p>Follow these steps:</p>\n<ol>\n<li>Define the event listener and it’s behavior. Use any of the two ways we’ve seen before.</li>\n</ol>\n<p><img src=\"./13._How_to_setup_an_event_listener/pasted_image.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>Create the reference object using its constructor.</li>\n</ol>\n<p><img src=\"./13._How_to_setup_an_event_listener/pasted_image001.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>Attach the clickListener. This is done by passing the reference object to the setOnClickListener</li>\n</ol>\n<p><img src=\"./13._How_to_setup_an_event_listener/pasted_image002.png\" alt=\"\"></p>\n<hr>\n<ul>\n<li>There’s a better way(a one liner), where we don’t need to create another class. We can make an anonymous class implementing View.onClickListener</li>\n</ul>\n<p><img src=\"./13._How_to_setup_an_event_listener/pasted_image003.png\" alt=\"\"></p>\n",
      "id": 66
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/2._Android_app_directory_structure/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/2._Android_app_directory_structure/0_index.html",
      "content": "# 2. Android app directory structure\nCreated Thursday 19 November 2020\n\nThe directory structure for an Android app is as follows:\n**Basic Structure**\n![](./2._Android_app_directory_structure/pasted_image.png)\n\n*****\n\n**Core App structure**\n![](./2._Android_app_directory_structure/pasted_image001.png)\n\n*****\n\nMore resources\n\n* [./android_structure.drawio](./2._Android_app_directory_structure/android_structure.drawio)\n* [Important Files in an Android App, GfG](https://www.geeksforgeeks.org/android-android-apps-file-structure/#:~:text=layout%3A A layout defines the,are written in XML language.&text=mipmap%3A Mipmap folder contains the,used in Android Studio application).\n\n\n",
      "html": "<h1 id=\"2.-android-app-directory-structure\">2. Android app directory structure <a class=\"heading-anchor-permalink\" href=\"#2.-android-app-directory-structure\">#</a></h1>\n<p>Created Thursday 19 November 2020</p>\n<p>The directory structure for an Android app is as follows:\n<strong>Basic Structure</strong>\n<img src=\"./2._Android_app_directory_structure/pasted_image.png\" alt=\"\"></p>\n<hr>\n<p><strong>Core App structure</strong>\n<img src=\"./2._Android_app_directory_structure/pasted_image001.png\" alt=\"\"></p>\n<hr>\n<p>More resources</p>\n<ul>\n<li><a href=\"./2._Android_app_directory_structure/android_structure.drawio\">./android_structure.drawio</a></li>\n<li>[Important Files in an Android App, GfG](<a href=\"https://www.geeksforgeeks.org/android-android-apps-file-structure/#:~:text=layout%3A\">https://www.geeksforgeeks.org/android-android-apps-file-structure/#:~:text=layout%3A</a> A layout defines the,are written in XML language.&amp;text=mipmap%3A Mipmap folder contains the,used in Android Studio application).</li>\n</ul>\n",
      "id": 67
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/3._Overview_of_the_App/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/3._Overview_of_the_App/0_index.html",
      "content": "# 3. Overview of the App\nCreated Wednesday 18 November 2020\n\n\n* There's no splash screen in Android apps - it is discouraged as per the Material Design guidelines.\n* The first view we see is this:\n\n![](./3._Overview_of_the_App/pasted_image.png)\n\n* There are 4 TextViews in a list here, clicking them opens another view for the section.\n\n![](./3._Overview_of_the_App/pasted_image001.png) ![](./3._Overview_of_the_App/pasted_image002.png)\n\n* Insides of the app\n\n![](./3._Overview_of_the_App/pasted_image003.png)\n\t\n\n",
      "html": "<h1 id=\"3.-overview-of-the-app\">3. Overview of the App <a class=\"heading-anchor-permalink\" href=\"#3.-overview-of-the-app\">#</a></h1>\n<p>Created Wednesday 18 November 2020</p>\n<ul>\n<li>There’s no splash screen in Android apps - it is discouraged as per the Material Design guidelines.</li>\n<li>The first view we see is this:</li>\n</ul>\n<p><img src=\"./3._Overview_of_the_App/pasted_image.png\" alt=\"\"></p>\n<ul>\n<li>There are 4 TextViews in a list here, clicking them opens another view for the section.</li>\n</ul>\n<p><img src=\"./3._Overview_of_the_App/pasted_image001.png\" alt=\"\"> <img src=\"./3._Overview_of_the_App/pasted_image002.png\" alt=\"\"></p>\n<ul>\n<li>Insides of the app</li>\n</ul>\n<p><img src=\"./3._Overview_of_the_App/pasted_image003.png\" alt=\"\"></p>\n",
      "id": 68
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/4._Gradle_files.md",
      "url": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/4._Gradle_files.html",
      "content": "# 4. Gradle files\nCreated Friday 20 November 2020\n\n\n* Gradle is used for building the app, before it can be run.\n* When someone else's project is imported, it may require a different SDK version and build tools. All this information is present in the **build.gradle **file.\n* Most important parameters in the build.gradle include:\n\t1. compileSdkVersion\n\t2. buildToolsVersion\n\t3. targetSdkVersion\n\t4. Dependencies\n* Obsolete things are crossed-out or highlighted in yellow.\n\n\n\n",
      "html": "<h1 id=\"4.-gradle-files\">4. Gradle files <a class=\"heading-anchor-permalink\" href=\"#4.-gradle-files\">#</a></h1>\n<p>Created Friday 20 November 2020</p>\n<ul>\n<li>Gradle is used for building the app, before it can be run.</li>\n<li>When someone else’s project is imported, it may require a different SDK version and build tools. All this information is present in the **build.gradle **file.</li>\n<li>Most important parameters in the build.gradle include:\n<ol>\n<li>compileSdkVersion</li>\n<li>buildToolsVersion</li>\n<li>targetSdkVersion</li>\n<li>Dependencies</li>\n</ol>\n</li>\n<li>Obsolete things are crossed-out or highlighted in yellow.</li>\n</ul>\n",
      "id": 69
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/5._Create_New_Activities/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/5._Create_New_Activities/0_index.html",
      "content": "# 5. Create New Activities\nCreated Friday 20 November 2020\n\n\n* We can think of an Activity as a single screen in our app. This is not always true, but the simplification is good for now.\n* In the Just Java app, we sent an Intent to open the email app. Does this means that Intents are always made across apps: No, Intents can also be used within an app, especially for multi-activity apps.\n* We'll send Intents to run other Activities in the same app.\n* This provides a consistent way to communicate between parts of an app.\n\n![](./5._Create_New_Activities/pasted_image.png)\n\n",
      "html": "<h1 id=\"5.-create-new-activities\">5. Create New Activities <a class=\"heading-anchor-permalink\" href=\"#5.-create-new-activities\">#</a></h1>\n<p>Created Friday 20 November 2020</p>\n<ul>\n<li>We can think of an Activity as a single screen in our app. This is not always true, but the simplification is good for now.</li>\n<li>In the Just Java app, we sent an Intent to open the email app. Does this means that Intents are always made across apps: No, Intents can also be used within an app, especially for multi-activity apps.</li>\n<li>We’ll send Intents to run other Activities in the same app.</li>\n<li>This provides a consistent way to communicate between parts of an app.</li>\n</ul>\n<p><img src=\"./5._Create_New_Activities/pasted_image.png\" alt=\"\"></p>\n",
      "id": 70
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/5._Create_New_Activities/xtra.md",
      "url": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/5._Create_New_Activities/xtra.html",
      "content": "# xtra\nCreated Saturday 21 November 2020\n\n\n* App was not running. So had to update these files:\n\t1. build.gradle\n\t2. /app/build.gradle\n\t3. gradle-wrapper.properties\n* Works fine now\n\n\n",
      "html": "<h1 id=\"xtra\">xtra <a class=\"heading-anchor-permalink\" href=\"#xtra\">#</a></h1>\n<p>Created Saturday 21 November 2020</p>\n<ul>\n<li>App was not running. So had to update these files:\n<ol>\n<li>build.gradle</li>\n<li>/app/build.gradle</li>\n<li>gradle-wrapper.properties</li>\n</ol>\n</li>\n<li>Works fine now</li>\n</ul>\n",
      "id": 71
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/6._AndroidManifest.xml_file.md",
      "url": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/6._AndroidManifest.xml_file.html",
      "content": "# 6. AndroidManifest.xml file\nCreated Saturday 21 November 2020\n\n\n* Every app must have an AndroidManifest.xml file.\n\nWhat does it contain?\n\n1. Activity declarations.\n2. Package name  - which is unique\n3. Permissions for the app.\n4. Minimum Android API - i.e KitKat, Nougat, 10 etc\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    package=\"com.example.android.miwok\">\n\t    <application\n\t        android:allowBackup=\"true\"\n\t        android:icon=\"@mipmap/ic_launcher\"\n\t        android:label=\"@string/app_name\"\n\t        android:supportsRtl=\"true\"\n\t        android:theme=\"@style/AppTheme\">\n\t        <activity android:name=\".ColorsActivity\"></activity>\n\t        <activity android:name=\".FamilyActivity\"></activity>\n\t        <activity android:name=\".NumbersActivity\"></activity>\n\t        <activity android:name=\".PhrasesActivity\"></activity>\n\t        <activity android:name=\".MainActivity\">\n\t            <intent-filter>\n\t                <action android:name=\"android.intent.action.MAIN\" />\n\t\n\t                <category android:name=\"android.intent.category.LAUNCHER\" />\n\t            </intent-filter>\n\t        </activity>\n\t    </application>\n\t</manifest>\n\n\n\n* We can also define intents per activity, via an ``intent-filter``\n\n**Intent filter** - specifies details about the kind of Intents that the activity can handle. Here, we've defined action and category.\n\n",
      "html": "<h1 id=\"6.-androidmanifest.xml-file\">6. AndroidManifest.xml file <a class=\"heading-anchor-permalink\" href=\"#6.-androidmanifest.xml-file\">#</a></h1>\n<p>Created Saturday 21 November 2020</p>\n<ul>\n<li>Every app must have an AndroidManifest.xml file.</li>\n</ul>\n<p>What does it contain?</p>\n<ol>\n<li>\n<p>Activity declarations.</p>\n</li>\n<li>\n<p>Package name  - which is unique</p>\n</li>\n<li>\n<p>Permissions for the app.</p>\n</li>\n<li>\n<p>Minimum Android API - i.e KitKat, Nougat, 10 etc</p>\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<p><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     package=\"com.example.android.miwok\">\n<application\n         android:allowBackup=\"true\"\n         android:icon=\"@mipmap/ic_launcher\"\n         android:label=\"@string/app_name\"\n         android:supportsRtl=\"true\"\n         android:theme=\"@style/AppTheme\">\n<activity android:name=\".ColorsActivity\"></activity>\n<activity android:name=\".FamilyActivity\"></activity>\n<activity android:name=\".NumbersActivity\"></activity>\n<activity android:name=\".PhrasesActivity\"></activity>\n<activity android:name=\".MainActivity\">\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" /></p>\n<pre><code>             &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n         &lt;/intent-filter&gt;\n     &lt;/activity&gt;\n &lt;/application&gt;\n</code></pre>\n </manifest>\n</li>\n</ol>\n<ul>\n<li>We can also define intents per activity, via an <code>intent-filter</code></li>\n</ul>\n<p><strong>Intent filter</strong> - specifies details about the kind of Intents that the activity can handle. Here, we’ve defined action and category.</p>\n",
      "id": 72
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/7._Use_an_Intent_to_open_another_Activity/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/7._Use_an_Intent_to_open_another_Activity/0_index.html",
      "content": "# 7. Use an Intent to open another Activity\nCreated Saturday 21 November 2020\n\n\n* Activities started by an activity are called sub-activities. This wording makes it easier to describe activities.\n* Code for starting an in-app Activity using an Intent\n\n\tIntent i = new Intent(this, ActivityTwo.class); // (Context, ActivityClass)\n\tstartActivity(i);\n\n\n* This runs ActivityTwo class, which becomes the new screen on top of the parent activity.\n* Notice that we provided 'this' as context, which helps the app track activities. As contexts are stored in a stack - it allows the user to return to the previous Activity by pressing the 'Back' button. **Nice, we didn't have to program that and it makes using the app very intuitive.**\n\n\n*****\n\n\nExplicit and Implicit Intents\n-----------------------------\n\nThere are two kinds of intents:\n\n1. Explicit - We explicitly provide the Activity(the destination) in the Intent itself. It's deterministic, as there's no decision made by the OS.\n\t* Explicit intents are typically used within an app, as classes within the app are directly accessible to app developer.\n\t* Code for explicit Intents\n\n\tIntent i = new Intent(this, ActivityTwo.class);\n\ti.putExtra(\"Value1\", \"This value one for ActivityTwo \");\n\ti.putExtra(\"Value2\", \"This value two ActivityTwo\");\n\tstartActivity(i);\n\n\n2. Implicit - the OS automatically(by searching the Intent filter database w.r.t the given action and data URI) chooses a capable app activity.\n\t* The OS provides a disambiguation prompt if multiple apps are capable.\n\t* Code for implicit Intent\n\n\tIntent i = new Intent(Intent.ACTION_DIAL, Uri.parse(\"https://www.vogella.com/\"));\n\tif(i.resolveActivity(getPacketManager())!=null) // we need to check if a capable is installed\n\t\tstartActivity(i);\n\n#### **Intents as event triggers**\n\n* Intents can be used to send broadcast messages into the Android system. A broadcast receiver can register to an event and is notified if such an event is sent.\n* An app can register to system events, like \"email has arrived\", \"system boot complete\" or  \"incoming phone call\" and do something accordingly.\n\n\n",
      "html": "<h1 id=\"7.-use-an-intent-to-open-another-activity\">7. Use an Intent to open another Activity <a class=\"heading-anchor-permalink\" href=\"#7.-use-an-intent-to-open-another-activity\">#</a></h1>\n<p>Created Saturday 21 November 2020</p>\n<ul>\n<li>\n<p>Activities started by an activity are called sub-activities. This wording makes it easier to describe activities.</p>\n</li>\n<li>\n<p>Code for starting an in-app Activity using an Intent</p>\n<p>Intent i = new Intent(this, ActivityTwo.class); // (Context, ActivityClass)\nstartActivity(i);</p>\n</li>\n<li>\n<p>This runs ActivityTwo class, which becomes the new screen on top of the parent activity.</p>\n</li>\n<li>\n<p>Notice that we provided ‘this’ as context, which helps the app track activities. As contexts are stored in a stack - it allows the user to return to the previous Activity by pressing the ‘Back’ button. <strong>Nice, we didn’t have to program that and it makes using the app very intuitive.</strong></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"explicit-and-implicit-intents\">Explicit and Implicit Intents <a class=\"heading-anchor-permalink\" href=\"#explicit-and-implicit-intents\">#</a></h2>\n<p>There are two kinds of intents:</p>\n<ol>\n<li>\n<p>Explicit - We explicitly provide the Activity(the destination) in the Intent itself. It’s deterministic, as there’s no decision made by the OS.</p>\n<ul>\n<li>Explicit intents are typically used within an app, as classes within the app are directly accessible to app developer.</li>\n<li>Code for explicit Intents</li>\n</ul>\n<p>Intent i = new Intent(this, ActivityTwo.class);\ni.putExtra(“Value1”, &quot;This value one for ActivityTwo &quot;);\ni.putExtra(“Value2”, “This value two ActivityTwo”);\nstartActivity(i);</p>\n</li>\n<li>\n<p>Implicit - the OS automatically(by searching the Intent filter database w.r.t the given action and data URI) chooses a capable app activity.</p>\n<ul>\n<li>The OS provides a disambiguation prompt if multiple apps are capable.</li>\n<li>Code for implicit Intent</li>\n</ul>\n<p>Intent i = new Intent(Intent.ACTION_DIAL, Uri.parse(“<a href=\"https://www.vogella.com/\">https://www.vogella.com/</a>”));\nif(i.resolveActivity(getPacketManager())!=null) // we need to check if a capable is installed\nstartActivity(i);</p>\n</li>\n</ol>\n<h4 id=\"intents-as-event-triggers\"><strong>Intents as event triggers</strong> <a class=\"heading-anchor-permalink\" href=\"#intents-as-event-triggers\">#</a></h4>\n<ul>\n<li>Intents can be used to send broadcast messages into the Android system. A broadcast receiver can register to an event and is notified if such an event is sent.</li>\n<li>An app can register to system events, like “email has arrived”, “system boot complete” or  “incoming phone call” and do something accordingly.</li>\n</ul>\n",
      "id": 73
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/7._Use_an_Intent_to_open_another_Activity/resources.md",
      "url": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/7._Use_an_Intent_to_open_another_Activity/resources.html",
      "content": "# resources\nCreated Saturday 21 November 2020\n\n<https://www.vogella.com/tutorials/AndroidIntent/article.html#usingintents_call>\n\n",
      "html": "<h1 id=\"resources\">resources <a class=\"heading-anchor-permalink\" href=\"#resources\">#</a></h1>\n<p>Created Saturday 21 November 2020</p>\n<p><a href=\"https://www.vogella.com/tutorials/AndroidIntent/article.html#usingintents_call\">https://www.vogella.com/tutorials/AndroidIntent/article.html#usingintents_call</a></p>\n",
      "id": 74
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/8._Implicit_vs_Explicit_Intents/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/8._Implicit_vs_Explicit_Intents/0_index.html",
      "content": "# 8. Implicit vs Explicit Intents\nCreated Saturday 21 November 2020\n\nThere are two types of Intents:\n\n1. **Implicit Intent** - Create an implicit intent if you don't care which app component handles the intent, as long as they do it right.\n\t* The OS automatically(by searching the Intent filter database) chooses the app component w.r.t the action and data(optional) provided in the intent.\n\t* The OS provides a disambiguation option if multiple apps are capable.\n\n![](./8._Implicit_vs_Explicit_Intents/pasted_image.png)  ![](./8._Implicit_vs_Explicit_Intents/pasted_image001.png)\n\n* Structure of an implicit intent\n\n![](./8._Implicit_vs_Explicit_Intents/pasted_image004.png)\n\n\n* Code for implicit Intent\n\n\tIntent i = new Intent(Intent.ACTION_DIAL, Uri.parse(\"https://www.vogella.com/\"));\n\tif(i.resolveActivity(getPacketManager())!=null)\n\t\tstartActivity(i);\n\n \n\n2. **Explicit Intent** - If you explicitly know the component that must handle the intent.\n\t* Explicit intents are typically used within an app as Activity files are directly accessible to the app developer.\n\t* We should almost never use explicit intents for 3rd party apps, since the app may not be installed.\n\n![](./8._Implicit_vs_Explicit_Intents/pasted_image003.png) ![](./8._Implicit_vs_Explicit_Intents/pasted_image002.png)\n\n* Structure of an explicit intent.\n\n![](./8._Implicit_vs_Explicit_Intents/pasted_image005.png)\n\n* Code for explicit Intents\t\t\n\n\tIntent i = new Intent(this, ActivityTwo.class);\n\tstartActivity(i);\n\n\n*****\n\n\n### Similarities between implict and explicit Intents\n\n* Both change the screen\n* Both can have extras(key, pair)\n\n\n",
      "html": "<h1 id=\"8.-implicit-vs-explicit-intents\">8. Implicit vs Explicit Intents <a class=\"heading-anchor-permalink\" href=\"#8.-implicit-vs-explicit-intents\">#</a></h1>\n<p>Created Saturday 21 November 2020</p>\n<p>There are two types of Intents:</p>\n<ol>\n<li><strong>Implicit Intent</strong> - Create an implicit intent if you don’t care which app component handles the intent, as long as they do it right.\n<ul>\n<li>The OS automatically(by searching the Intent filter database) chooses the app component w.r.t the action and data(optional) provided in the intent.</li>\n<li>The OS provides a disambiguation option if multiple apps are capable.</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"./8._Implicit_vs_Explicit_Intents/pasted_image.png\" alt=\"\">  <img src=\"./8._Implicit_vs_Explicit_Intents/pasted_image001.png\" alt=\"\"></p>\n<ul>\n<li>Structure of an implicit intent</li>\n</ul>\n<p><img src=\"./8._Implicit_vs_Explicit_Intents/pasted_image004.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>Code for implicit Intent</p>\n<p>Intent i = new Intent(Intent.ACTION_DIAL, Uri.parse(“<a href=\"https://www.vogella.com/\">https://www.vogella.com/</a>”));\nif(i.resolveActivity(getPacketManager())!=null)\nstartActivity(i);</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Explicit Intent</strong> - If you explicitly know the component that must handle the intent.\n<ul>\n<li>Explicit intents are typically used within an app as Activity files are directly accessible to the app developer.</li>\n<li>We should almost never use explicit intents for 3rd party apps, since the app may not be installed.</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"./8._Implicit_vs_Explicit_Intents/pasted_image003.png\" alt=\"\"> <img src=\"./8._Implicit_vs_Explicit_Intents/pasted_image002.png\" alt=\"\"></p>\n<ul>\n<li>Structure of an explicit intent.</li>\n</ul>\n<p><img src=\"./8._Implicit_vs_Explicit_Intents/pasted_image005.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>Code for explicit Intents</p>\n<p>Intent i = new Intent(this, ActivityTwo.class);\nstartActivity(i);</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"similarities-between-implict-and-explicit-intents\">Similarities between implict and explicit Intents <a class=\"heading-anchor-permalink\" href=\"#similarities-between-implict-and-explicit-intents\">#</a></h3>\n<ul>\n<li>Both change the screen</li>\n<li>Both can have extras(key, pair)</li>\n</ul>\n",
      "id": 75
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/9._Modifying_the_label(heading)/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/9._Modifying_the_label(heading)/0_index.html",
      "content": "# 9. Modifying the label(heading)\nCreated Saturday 21 November 2020\n\n![](./9._Modifying_the_label(heading)/pasted_image.png) ![](./9._Modifying_the_label(heading)/pasted_image001.png)\n\n* We can see that the heading, technically called a label, remains the same even when we switch activity.\n* For it to change, we need to add a **label** attribute to the respective **activity** tag in the AndroidManifest.xml file.\n\n![](./9._Modifying_the_label(heading)/pasted_image002.png)\n\n* Now, the label changes when activity is switched.\n\n![](./9._Modifying_the_label(heading)/pasted_image003.png)\n\n",
      "html": "<h1 id=\"9.-modifying-the-label(heading)\">9. Modifying the label(heading) <a class=\"heading-anchor-permalink\" href=\"#9.-modifying-the-label(heading)\">#</a></h1>\n<p>Created Saturday 21 November 2020</p>\n<p><img src=\"./9._Modifying_the_label(heading)/pasted_image.png\" alt=\"\"> <img src=\"./9._Modifying_the_label(heading)/pasted_image001.png\" alt=\"\"></p>\n<ul>\n<li>We can see that the heading, technically called a label, remains the same even when we switch activity.</li>\n<li>For it to change, we need to add a <strong>label</strong> attribute to the respective <strong>activity</strong> tag in the AndroidManifest.xml file.</li>\n</ul>\n<p><img src=\"./9._Modifying_the_label(heading)/pasted_image002.png\" alt=\"\"></p>\n<ul>\n<li>Now, the label changes when activity is switched.</li>\n</ul>\n<p><img src=\"./9._Modifying_the_label(heading)/pasted_image003.png\" alt=\"\"></p>\n",
      "id": 76
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/Conclusion.md",
      "url": "3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/Conclusion.html",
      "content": "# Conclusion\nCreated Monday 23 November 2020\n\nWe learnt three things here:\n\n1. Android app codebase structure\n2. Intents for switching activities both within/outside the app.\n3. Event listeners.\n\n\n",
      "html": "<h1 id=\"conclusion\">Conclusion <a class=\"heading-anchor-permalink\" href=\"#conclusion\">#</a></h1>\n<p>Created Monday 23 November 2020</p>\n<p>We learnt three things here:</p>\n<ol>\n<li>Android app codebase structure</li>\n<li>Intents for switching activities both within/outside the app.</li>\n<li>Event listeners.</li>\n</ol>\n",
      "id": 77
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/1._Course_Map.md",
      "url": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/1._Course_Map.html",
      "content": "# 1. Course Map\nCreated Monday 23 November 2020\n\n\n* Learn how to store lists.\n* Display a list of words.\n* Display a list of English/Miwok words.\n\n\n",
      "html": "<h1 id=\"1.-course-map\">1. Course Map <a class=\"heading-anchor-permalink\" href=\"#1.-course-map\">#</a></h1>\n<p>Created Monday 23 November 2020</p>\n<ul>\n<li>Learn how to store lists.</li>\n<li>Display a list of words.</li>\n<li>Display a list of English/Miwok words.</li>\n</ul>\n",
      "id": 78
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/10._Completing_changes_for_all_sections/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/10._Completing_changes_for_all_sections/0_index.html",
      "content": "# 10. Completing changes for all sections\nCreated Friday 01 January 2021\n\nWe have the following files:\n\n1. *Word*\n2. *WordAdapter*\n3. *activity_numbers.xml* with a ``ListView``\n4. list_item.xml\n\n\nOut of these, no. 3 is specific to the NumbersActivity, only due to the ``tools:context=\"NumbersActivity\"`` which is not really important as the activity_numbers.xml has nothing specific to numbers in it because all the words are added to the list dynamically when the app is running via Java code.\n\nSo instead of having 4 different layouts, i.e *activity_numbers*, *activity_phrases* etc, we can have a single layout file called *word_list.xml*.\n\nI've also deleted all the activity_<verb> files. Now there are only three layout files.\n![](./10._Completing_changes_for_all_sections/pasted_image.png)\n\n",
      "html": "<h1 id=\"10.-completing-changes-for-all-sections\">10. Completing changes for all sections <a class=\"heading-anchor-permalink\" href=\"#10.-completing-changes-for-all-sections\">#</a></h1>\n<p>Created Friday 01 January 2021</p>\n<p>We have the following files:</p>\n<ol>\n<li><em>Word</em></li>\n<li><em>WordAdapter</em></li>\n<li><em>activity_numbers.xml</em> with a <code>ListView</code></li>\n<li>list_item.xml</li>\n</ol>\n<p>Out of these, no. 3 is specific to the NumbersActivity, only due to the <code>tools:context=&quot;NumbersActivity&quot;</code> which is not really important as the activity_numbers.xml has nothing specific to numbers in it because all the words are added to the list dynamically when the app is running via Java code.</p>\n<p>So instead of having 4 different layouts, i.e <em>activity_numbers</em>, <em>activity_phrases</em> etc, we can have a single layout file called <em>word_list.xml</em>.</p>\n<p>I’ve also deleted all the activity_<verb> files. Now there are only three layout files.\n<img src=\"./10._Completing_changes_for_all_sections/pasted_image.png\" alt=\"\"></p>\n",
      "id": 79
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/2._Add_views_using_Java.md",
      "url": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/2._Add_views_using_Java.html",
      "content": "# 2. Add views using Java\nCreated Wednesday 25 November 2020\n\nExample of adding views inside a view using Java.\nAssumption - R.id.root_view is a vertical linear layout. It is also the root view.\n\tLinearLayout rootView = (LinearLayout) findViewById(R.id.root_view);\n\tfor(int i=0; i<words.size(); i++)\n\t{\n\t\tTextView tv = new TextView(this);\n\t\ttv.setText(words[i]);\n\t\trootView.addView(tv);\n\t}\n\nNote:\n\n* We need to give all views a context, which is used to apply attributes to the view, given by it's parent, children etc.\n\n\n",
      "html": "<h1 id=\"2.-add-views-using-java\">2. Add views using Java <a class=\"heading-anchor-permalink\" href=\"#2.-add-views-using-java\">#</a></h1>\n<p>Created Wednesday 25 November 2020</p>\n<p>Example of adding views inside a view using Java.\nAssumption - R.id.root_view is a vertical linear layout. It is also the root view.\nLinearLayout rootView = (LinearLayout) findViewById(R.id.root_view);\nfor(int i=0; i&lt;words.size(); i++)\n{\nTextView tv = new TextView(this);\ntv.setText(words[i]);\nrootView.addView(tv);\n}</p>\n<p>Note:</p>\n<ul>\n<li>We need to give all views a context, which is used to apply attributes to the view, given by it’s parent, children etc.</li>\n</ul>\n",
      "id": 80
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/3._Memory_is_Limited/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/3._Memory_is_Limited/0_index.html",
      "content": "# 3. Memory is Limited\nCreated Wednesday 25 November 2020\n\n\n* This is particularly important for views.\n* Suppose in a 'contacts' app, we have the following:\n\n![](./3._Memory_is_Limited/pasted_image.png)\n\n* Notice that only 5 contacts are visible at any time. \n* We can have only five views, whose contents is changed. This way we save a huge amount of memory.\n* This is what the (ListView+Adapter) pattern does.\n\n![](./3._Memory_is_Limited/pasted_image001.png)\n\n",
      "html": "<h1 id=\"3.-memory-is-limited\">3. Memory is Limited <a class=\"heading-anchor-permalink\" href=\"#3.-memory-is-limited\">#</a></h1>\n<p>Created Wednesday 25 November 2020</p>\n<ul>\n<li>This is particularly important for views.</li>\n<li>Suppose in a ‘contacts’ app, we have the following:</li>\n</ul>\n<p><img src=\"./3._Memory_is_Limited/pasted_image.png\" alt=\"\"></p>\n<ul>\n<li>Notice that only 5 contacts are visible at any time.</li>\n<li>We can have only five views, whose contents is changed. This way we save a huge amount of memory.</li>\n<li>This is what the (ListView+Adapter) pattern does.</li>\n</ul>\n<p><img src=\"./3._Memory_is_Limited/pasted_image001.png\" alt=\"\"></p>\n",
      "id": 81
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/4._View_Recycling/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/4._View_Recycling/0_index.html",
      "content": "# 4. View Recycling\nCreated Wednesday 25 November 2020\n\n\n* View Recycling - using Views that are no longer visible on the screen.\n* In Instagram, we do have an infinite(new view are being added everytime) number of stories.\n* If we create new views for each story, we'll run out of memory very quickly.\n\n![](./4._View_Recycling/pasted_image.png)\n\n* Using the ListView and ArrayAdapter, we create only the views that are visible on the screen. i.e If we scroll upwards, we don't need to see the views at the bottom.\n\n\n*****\n\n\n* Recyling actually refers to changing the data of views.\n\n![](./4._View_Recycling/pasted_image001.png)\n\n*****\n\n\n#### Memory usage - comparison\n![](./4._View_Recycling/pasted_image002.png) ![](./4._View_Recycling/pasted_image003.png)\n\n",
      "html": "<h1 id=\"4.-view-recycling\">4. View Recycling <a class=\"heading-anchor-permalink\" href=\"#4.-view-recycling\">#</a></h1>\n<p>Created Wednesday 25 November 2020</p>\n<ul>\n<li>View Recycling - using Views that are no longer visible on the screen.</li>\n<li>In Instagram, we do have an infinite(new view are being added everytime) number of stories.</li>\n<li>If we create new views for each story, we’ll run out of memory very quickly.</li>\n</ul>\n<p><img src=\"./4._View_Recycling/pasted_image.png\" alt=\"\"></p>\n<ul>\n<li>Using the ListView and ArrayAdapter, we create only the views that are visible on the screen. i.e If we scroll upwards, we don’t need to see the views at the bottom.</li>\n</ul>\n<hr>\n<ul>\n<li>Recyling actually refers to changing the data of views.</li>\n</ul>\n<p><img src=\"./4._View_Recycling/pasted_image001.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"memory-usage---comparison\">Memory usage - comparison <a class=\"heading-anchor-permalink\" href=\"#memory-usage---comparison\">#</a></h4>\n<p><img src=\"./4._View_Recycling/pasted_image002.png\" alt=\"\"> <img src=\"./4._View_Recycling/pasted_image003.png\" alt=\"\"></p>\n",
      "id": 82
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/4._View_Recycling/Questions.md",
      "url": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/4._View_Recycling/Questions.html",
      "content": "# Questions\nCreated Monday 14 December 2020\n\n\n17. Okay, only having views that are currently on screen saves a lot of memory. But 'recycling views', i.e setting new content for old views, instead of destroying them(old ones) and creating new ones doesn't contribute to saving space, aren't the two ways equivalent?\n18. Correct, creating new views(and destroying old ones) or replacing content in old views is **asymptotically** equivalent(space). But 'recycling views' is done to save time, not space. We chose recycling(content replacement) because the process of inflating views(i.e creating new Java objects) from XML is a slow process, and we want to avoid it.\n\n\n\n17. Does View Recycling have anything to do with re-rendering?\n18. No, if a list is scrollable, re-rendering is inevitable. Recyling views has got nothing to do with re-rendering.\n\n\n",
      "html": "<h1 id=\"questions\">Questions <a class=\"heading-anchor-permalink\" href=\"#questions\">#</a></h1>\n<p>Created Monday 14 December 2020</p>\n<ol start=\"17\">\n<li>\n<p>Okay, only having views that are currently on screen saves a lot of memory. But ‘recycling views’, i.e setting new content for old views, instead of destroying them(old ones) and creating new ones doesn’t contribute to saving space, aren’t the two ways equivalent?</p>\n</li>\n<li>\n<p>Correct, creating new views(and destroying old ones) or replacing content in old views is <strong>asymptotically</strong> equivalent(space). But ‘recycling views’ is done to save time, not space. We chose recycling(content replacement) because the process of inflating views(i.e creating new Java objects) from XML is a slow process, and we want to avoid it.</p>\n</li>\n<li>\n<p>Does View Recycling have anything to do with re-rendering?</p>\n</li>\n<li>\n<p>No, if a list is scrollable, re-rendering is inevitable. Recyling views has got nothing to do with re-rendering.</p>\n</li>\n</ol>\n",
      "id": 83
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/5._Analogy_for_ListView.md",
      "url": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/5._Analogy_for_ListView.html",
      "content": "# 5. Analogy for ListView\nCreated Tuesday 15 December 2020\n\nView recycling is not used everywhere. It is only used where the number of views are very large(i.e changing rapidly).\n\n",
      "html": "<h1 id=\"5.-analogy-for-listview\">5. Analogy for ListView <a class=\"heading-anchor-permalink\" href=\"#5.-analogy-for-listview\">#</a></h1>\n<p>Created Tuesday 15 December 2020</p>\n<p>View recycling is not used everywhere. It is only used where the number of views are very large(i.e changing rapidly).</p>\n",
      "id": 84
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/6._ListView_and_Array_Adapter/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/6._ListView_and_Array_Adapter/0_index.html",
      "content": "# 6. ListView and Array Adapter\nCreated Wednesday 16 December 2020\n\nDS - Data Source/Structure\n\nThere are 3 components involved here:\n\n1. ``ArrayList`` - a DS containing the data to be displayed.\n2. **CustomAdapter** extends ``ArrayAdapter`` - a generic class(type same as DS) which provides instructions about how to recycle and display elements from the DS. The DS is a data member for this class.\n3. ``ListView`` - an XML view that renders the smart list. Takes as argument a **CustomAdapter** object.\n\n\nThe interaction is like this:\n![](./6._ListView_and_Array_Adapter/pasted_image001.png)\n\nCode is just a mirror of the interaction:\n![](./6._ListView_and_Array_Adapter/ListView_and_ArrayAdapter.jpg)\n\n#### How does ListView+Adapter works\nRequisite\n\n* We pass the DS as argument to a customAdapter(which inherits from the ArrayAdapter class). We also code instructions on how to manipulate and create ListItemView(s) inside the ListView.\n* ListView object is created and a customAdapter object is passed to it.\n\n\n\n1. When we associate the ``customAdapter`` to the ListView, the ListView asks the number of views that will be displayed. The adapter answers and creates a pile of views.\n2. The ListView then requests for views at some index to display, following which the adapter substitutes relevant content and passes the itemview to the ListView.\n3. When the screen is full and the user scrolls, the ListView gives the next position(index) that the user wants. The adapter recycles old views and passes them over to the ListView to display at a comfortable index(i.e 0 to length of ListView).\n\n![](./6._ListView_and_Array_Adapter/pasted_image.png)\nNote:\n\n* ListView is a dumb component, it just displays stuff the customAdapter tells it to. Think of the arrayAdapter as the powerhouse of the whole process.\n* ListView does not interact directly with the Data structure, this reduces coupling which is good.\n* The ListView handles simple indices from 0 to length_of_layout - 1. While the ArrayAdapter handles relatively complicated indices within the array.\n* ArrayAdapter is one of the simplest adapter, it is not the only one. We can change it for say, a GridView or a Spinner.\n\n![](./6._ListView_and_Array_Adapter/pasted_image002.png)\n![](./6._ListView_and_Array_Adapter/pasted_image003.png)\n\n##### Adapter pattern is used abundantly in Android apps, understanding it is critical. Its idea is trivial, we are just saving space.\n\n",
      "html": "<h1 id=\"6.-listview-and-array-adapter\">6. ListView and Array Adapter <a class=\"heading-anchor-permalink\" href=\"#6.-listview-and-array-adapter\">#</a></h1>\n<p>Created Wednesday 16 December 2020</p>\n<p>DS - Data Source/Structure</p>\n<p>There are 3 components involved here:</p>\n<ol>\n<li><code>ArrayList</code> - a DS containing the data to be displayed.</li>\n<li><strong>CustomAdapter</strong> extends <code>ArrayAdapter</code> - a generic class(type same as DS) which provides instructions about how to recycle and display elements from the DS. The DS is a data member for this class.</li>\n<li><code>ListView</code> - an XML view that renders the smart list. Takes as argument a <strong>CustomAdapter</strong> object.</li>\n</ol>\n<p>The interaction is like this:\n<img src=\"./6._ListView_and_Array_Adapter/pasted_image001.png\" alt=\"\"></p>\n<p>Code is just a mirror of the interaction:\n<img src=\"./6._ListView_and_Array_Adapter/ListView_and_ArrayAdapter.jpg\" alt=\"\"></p>\n<h4 id=\"how-does-listview%2Badapter-works\">How does ListView+Adapter works <a class=\"heading-anchor-permalink\" href=\"#how-does-listview%2Badapter-works\">#</a></h4>\n<p>Requisite</p>\n<ul>\n<li>We pass the DS as argument to a customAdapter(which inherits from the ArrayAdapter class). We also code instructions on how to manipulate and create ListItemView(s) inside the ListView.</li>\n<li>ListView object is created and a customAdapter object is passed to it.</li>\n</ul>\n<ol>\n<li>When we associate the <code>customAdapter</code> to the ListView, the ListView asks the number of views that will be displayed. The adapter answers and creates a pile of views.</li>\n<li>The ListView then requests for views at some index to display, following which the adapter substitutes relevant content and passes the itemview to the ListView.</li>\n<li>When the screen is full and the user scrolls, the ListView gives the next position(index) that the user wants. The adapter recycles old views and passes them over to the ListView to display at a comfortable index(i.e 0 to length of ListView).</li>\n</ol>\n<p><img src=\"./6._ListView_and_Array_Adapter/pasted_image.png\" alt=\"\">\nNote:</p>\n<ul>\n<li>ListView is a dumb component, it just displays stuff the customAdapter tells it to. Think of the arrayAdapter as the powerhouse of the whole process.</li>\n<li>ListView does not interact directly with the Data structure, this reduces coupling which is good.</li>\n<li>The ListView handles simple indices from 0 to length_of_layout - 1. While the ArrayAdapter handles relatively complicated indices within the array.</li>\n<li>ArrayAdapter is one of the simplest adapter, it is not the only one. We can change it for say, a GridView or a Spinner.</li>\n</ul>\n<p><img src=\"./6._ListView_and_Array_Adapter/pasted_image002.png\" alt=\"\">\n<img src=\"./6._ListView_and_Array_Adapter/pasted_image003.png\" alt=\"\"></p>\n<h5 id=\"adapter-pattern-is-used-abundantly-in-android-apps%2C-understanding-it-is-critical.-its-idea-is-trivial%2C-we-are-just-saving-space.\">Adapter pattern is used abundantly in Android apps, understanding it is critical. Its idea is trivial, we are just saving space. <a class=\"heading-anchor-permalink\" href=\"#adapter-pattern-is-used-abundantly-in-android-apps%2C-understanding-it-is-critical.-its-idea-is-trivial%2C-we-are-just-saving-space.\">#</a></h5>\n",
      "id": 85
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/7._Code_for_ListView_and_ArrayAdapter/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/7._Code_for_ListView_and_ArrayAdapter/0_index.html",
      "content": "# 7. Code for ListView and ArrayAdapter\nCreated Sunday 20 December 2020\n\nCode is something like this.\n![](./7._Code_for_ListView_and_ArrayAdapter/ListView_and_ArrayAdapter.jpg)\nThe adapter needs two things:\n\n1. DS\n2. A resource(view) which it creates, recycles and passes on to the ListView.\n\n\nWe'll be using a built-in resource named ``android.R.layout.simple_list_item_1`` here. Alternatively, we could have created our own listitem_view layout in an XML file.\n\nThe listview needs one thing only.\n\n1. An adapter.\n\nInclude the listview in XML\n\nFinally, we have\n\t// DS\n\tString[] numbers = {\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"};\n\t\n\t// constructor - context, listitem_view_resource, content array\n\t// we are using a concrete adapter here.\n\tArrayAdapter<String> arrayAdapter = new ArrayAdapter<>(this, R.layout.listitem_view, numbers);\n\t\n\t// Create the listView from \n\tListView lv = (ListView) findViewById(R.id.list_view);\n\t\n\t// pass the ListView the array adapter\n\tlv.setAdapter(arrayAdapter);\n\n\n\n*****\n\nAndroid has the following code for adapters.\n\n* ArrayAdapter is the simplest - it is concrete.\n* BaseAdapter is partially implemented.\n* ListAdapter needs to be implemented from scratch.\n\n![](./7._Code_for_ListView_and_ArrayAdapter/pasted_image.png)\nCheck [this](https://github.com/codepath/android_guides/wiki/Using-an-ArrayAdapter-with-ListView) out.\n\n",
      "html": "<h1 id=\"7.-code-for-listview-and-arrayadapter\">7. Code for ListView and ArrayAdapter <a class=\"heading-anchor-permalink\" href=\"#7.-code-for-listview-and-arrayadapter\">#</a></h1>\n<p>Created Sunday 20 December 2020</p>\n<p>Code is something like this.\n<img src=\"./7._Code_for_ListView_and_ArrayAdapter/ListView_and_ArrayAdapter.jpg\" alt=\"\">\nThe adapter needs two things:</p>\n<ol>\n<li>DS</li>\n<li>A resource(view) which it creates, recycles and passes on to the ListView.</li>\n</ol>\n<p>We’ll be using a built-in resource named <code>android.R.layout.simple_list_item_1</code> here. Alternatively, we could have created our own listitem_view layout in an XML file.</p>\n<p>The listview needs one thing only.</p>\n<ol>\n<li>An adapter.</li>\n</ol>\n<p>Include the listview in XML</p>\n<p>Finally, we have\n// DS\nString[] numbers = {“one”, “two”, “three”, “four”, “five”, “six”, “seven”, “eight”, “nine”, “ten”};</p>\n<pre><code>// constructor - context, listitem_view_resource, content array\n// we are using a concrete adapter here.\nArrayAdapter&lt;String&gt; arrayAdapter = new ArrayAdapter&lt;&gt;(this, R.layout.listitem_view, numbers);\n\n// Create the listView from \nListView lv = (ListView) findViewById(R.id.list_view);\n\n// pass the ListView the array adapter\nlv.setAdapter(arrayAdapter);\n</code></pre>\n<hr>\n<p>Android has the following code for adapters.</p>\n<ul>\n<li>ArrayAdapter is the simplest - it is concrete.</li>\n<li>BaseAdapter is partially implemented.</li>\n<li>ListAdapter needs to be implemented from scratch.</li>\n</ul>\n<p><img src=\"./7._Code_for_ListView_and_ArrayAdapter/pasted_image.png\" alt=\"\">\nCheck <a href=\"https://github.com/codepath/android_guides/wiki/Using-an-ArrayAdapter-with-ListView\">this</a> out.</p>\n",
      "id": 86
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/8._Custom_Adapter_-_Concept/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/8._Custom_Adapter_-_Concept/0_index.html",
      "content": "# 8. Custom Adapter - Concept\nCreated Tuesday 22 December 2020\n\nSince the ``ArrayAdapter`` doesn't know how to work with the ``Word`` class, we need to create our own adapter(called WordAdapter), i.e subclass from the ``ArrayAdapter`` class and override the ``getView`` method.\n![](./8._Custom_Adapter_-_Concept/pasted_image.png)\nThe ListView is like the surgeon and the adapter is like the surgical technician.\n![](./8._Custom_Adapter_-_Concept/pasted_image001.png)\nBecause we want to handle ``Word`` only, we remove the generic argument and subclass ``ArrayAdapter<Word>``. Here's the [code](../_ud839_Miwok/app/src/main/java/com/example/android/miwok/WordAdapter.java).\nCheck [this](https://developer.android.com/reference/android/widget/ArrayAdapter.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics) out \n\n",
      "html": "<h1 id=\"8.-custom-adapter---concept\">8. Custom Adapter - Concept <a class=\"heading-anchor-permalink\" href=\"#8.-custom-adapter---concept\">#</a></h1>\n<p>Created Tuesday 22 December 2020</p>\n<p>Since the <code>ArrayAdapter</code> doesn’t know how to work with the <code>Word</code> class, we need to create our own adapter(called WordAdapter), i.e subclass from the <code>ArrayAdapter</code> class and override the <code>getView</code> method.\n<img src=\"./8._Custom_Adapter_-_Concept/pasted_image.png\" alt=\"\">\nThe ListView is like the surgeon and the adapter is like the surgical technician.\n<img src=\"./8._Custom_Adapter_-_Concept/pasted_image001.png\" alt=\"\">\nBecause we want to handle <code>Word</code> only, we remove the generic argument and subclass <code>ArrayAdapter&lt;Word&gt;</code>. Here’s the <a href=\"../_ud839_Miwok/app/src/main/java/com/example/android/miwok/WordAdapter.java\">code</a>.\nCheck <a href=\"https://developer.android.com/reference/android/widget/ArrayAdapter.html?utm_source=udacity&amp;utm_medium=course&amp;utm_campaign=android_basics\">this</a> out</p>\n",
      "id": 87
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/9._Custom_Adapter_-_Concept.md",
      "url": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/9._Custom_Adapter_-_Concept.html",
      "content": "# 9. Custom Adapter - Concept\nCreated Tuesday 22 December 2020\n\nSince the ``ArrayAdapter`` doesn't know how to work with the ``Word`` class, we need to create our own adapter(called WordAdapter), i.e subclass from the ``ArrayAdapter`` class and override the ``getView`` method.\n![](./9._Custom_Adapter_-_Concept/pasted_image.png)\nThe ListView is like the surgeon and the adapter is like the surgical technician.\n![](./9._Custom_Adapter_-_Concept/pasted_image001.png)\nBecause we want to handle ``Word`` only, we remove the generic argument and subclass ``ArrayAdapter<Word>``. Here's the [code](../_ud839_Miwok/app/src/main/java/com/example/android/miwok/WordAdapter.java).\nCheck [this](https://developer.android.com/reference/android/widget/ArrayAdapter.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics) out \n\n",
      "html": "<h1 id=\"9.-custom-adapter---concept\">9. Custom Adapter - Concept <a class=\"heading-anchor-permalink\" href=\"#9.-custom-adapter---concept\">#</a></h1>\n<p>Created Tuesday 22 December 2020</p>\n<p>Since the <code>ArrayAdapter</code> doesn’t know how to work with the <code>Word</code> class, we need to create our own adapter(called WordAdapter), i.e subclass from the <code>ArrayAdapter</code> class and override the <code>getView</code> method.\n<img src=\"./9._Custom_Adapter_-_Concept/pasted_image.png\" alt=\"\">\nThe ListView is like the surgeon and the adapter is like the surgical technician.\n<img src=\"./9._Custom_Adapter_-_Concept/pasted_image001.png\" alt=\"\">\nBecause we want to handle <code>Word</code> only, we remove the generic argument and subclass <code>ArrayAdapter&lt;Word&gt;</code>. Here’s the <a href=\"../_ud839_Miwok/app/src/main/java/com/example/android/miwok/WordAdapter.java\">code</a>.\nCheck <a href=\"https://developer.android.com/reference/android/widget/ArrayAdapter.html?utm_source=udacity&amp;utm_medium=course&amp;utm_campaign=android_basics\">this</a> out</p>\n",
      "id": 88
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/9._Custom_adapter_-_Practical/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/9._Custom_adapter_-_Practical/0_index.html",
      "content": "# 9. Custom adapter - Practical\nCreated Monday 21 December 2020\n\nPrerequistes - We've added a ListView in the ``numers_activity.xml`` file.\n\n#### Goal\nSince we need to show two strings at a time(default, Miwok).\n\n* We need a new class called [Word.java](../_ud839_Miwok/app/src/main/java/com/example/android/miwok/Word.java) as Java doesn't have a ``pair`` class.\n* We need a custom layout file for the list_item.\n* We need a custom adapter that works with the ``Word`` object and the ``list_item`` view.\n* We also need to change the ``NumbersActivity`` class, where we need to populate the DS, and attach it to the ``WordAdapter`` and attach the adapter to the listView.\n\n\n\n*****\n\n\n#### How to do this?\nTo have a custom ``list_item`` view and non-primitive DS is very common. So we have a standardized approach:\n\n1. Create a class to represent content data.\n2. Create an adapter by subclassing ArrayAdapter.\n3. Modify the getView() function in the custom adapter.\n\n\nDone!!\n\n*****\n\n``list_item.xml``\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    xmlns:tools=\"http://schemas.android.com/tools\"\n\t    android:layout_width=\"match_parent\"\n\t    android:layout_height=\"wrap_content\"\n\t    android:orientation=\"vertical\"\n\t    android:padding=\"10dp\"\n\t    tools:text=\"Sample Text\">\n\t\n\t    <TextView\n\t        android:layout_width=\"match_parent\"\n\t        android:layout_height=\"wrap_content\"\n\t        android:textColor=\"#0000ff\"\n\t        android:textSize=\"16dp\"\n\t        android:textStyle=\"bold\"\n\t        tools:text=\"English Word\" />\n\t\n\t    <TextView\n\t        android:layout_width=\"match_parent\"\n\t        android:layout_height=\"wrap_content\"\n\t        android:textColor=\"#008855\"\n\t        android:textStyle=\"italic\"\n\t        tools:text=\"Miwok Translation\" />\n\t</LinearLayout>\n\n",
      "html": "<h1 id=\"9.-custom-adapter---practical\">9. Custom adapter - Practical <a class=\"heading-anchor-permalink\" href=\"#9.-custom-adapter---practical\">#</a></h1>\n<p>Created Monday 21 December 2020</p>\n<p>Prerequistes - We’ve added a ListView in the <code>numers_activity.xml</code> file.</p>\n<h4 id=\"goal\">Goal <a class=\"heading-anchor-permalink\" href=\"#goal\">#</a></h4>\n<p>Since we need to show two strings at a time(default, Miwok).</p>\n<ul>\n<li>We need a new class called <a href=\"../_ud839_Miwok/app/src/main/java/com/example/android/miwok/Word.java\">Word.java</a> as Java doesn’t have a <code>pair</code> class.</li>\n<li>We need a custom layout file for the list_item.</li>\n<li>We need a custom adapter that works with the <code>Word</code> object and the <code>list_item</code> view.</li>\n<li>We also need to change the <code>NumbersActivity</code> class, where we need to populate the DS, and attach it to the <code>WordAdapter</code> and attach the adapter to the listView.</li>\n</ul>\n<hr>\n<h4 id=\"how-to-do-this%3F\">How to do this? <a class=\"heading-anchor-permalink\" href=\"#how-to-do-this%3F\">#</a></h4>\n<p>To have a custom <code>list_item</code> view and non-primitive DS is very common. So we have a standardized approach:</p>\n<ol>\n<li>Create a class to represent content data.</li>\n<li>Create an adapter by subclassing ArrayAdapter.</li>\n<li>Modify the getView() function in the custom adapter.</li>\n</ol>\n<p>Done!!</p>\n<hr>\n<p><code>list_item.xml</code>\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    xmlns:tools=\"http://schemas.android.com/tools\"\n\t    android:layout_width=\"match_parent\"\n\t    android:layout_height=\"wrap_content\"\n\t    android:orientation=\"vertical\"\n\t    android:padding=\"10dp\"\n\t    tools:text=\"Sample Text\"></p>\n<pre><code>    &lt;TextView\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:textColor=&quot;#0000ff&quot;\n        android:textSize=&quot;16dp&quot;\n        android:textStyle=&quot;bold&quot;\n        tools:text=&quot;English Word&quot; /&gt;\n\n    &lt;TextView\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:textColor=&quot;#008855&quot;\n        android:textStyle=&quot;italic&quot;\n        tools:text=&quot;Miwok Translation&quot; /&gt;\n&lt;/LinearLayout&gt;\n</code></pre>\n",
      "id": 89
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/zConclusion/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/zConclusion/0_index.html",
      "content": "# zConclusion\nCreated Saturday 02 January 2021\n\n#### An example of bad design\nSuppose this is out root view\n![](./zConclusion/pasted_image001.png)\nWe write code which accesses the children\n![](./zConclusion/pasted_image.png)\n\nNow, suppose we change the layout file to to this.\n![](./zConclusion/pasted_image002.png)\nThe code just doesn't work.\n\n**Why did this happen?**\nThis happened because we assumed views would never change, which is a bad assumption. This caused our code to be tightly coupled.\n\n**What's a correct way then?**\nUse ids. But keep in mind that ids usually couple code more. In this case the code was even more coupled.\n\n",
      "html": "<h1 id=\"zconclusion\">zConclusion <a class=\"heading-anchor-permalink\" href=\"#zconclusion\">#</a></h1>\n<p>Created Saturday 02 January 2021</p>\n<h4 id=\"an-example-of-bad-design\">An example of bad design <a class=\"heading-anchor-permalink\" href=\"#an-example-of-bad-design\">#</a></h4>\n<p>Suppose this is out root view\n<img src=\"./zConclusion/pasted_image001.png\" alt=\"\">\nWe write code which accesses the children\n<img src=\"./zConclusion/pasted_image.png\" alt=\"\"></p>\n<p>Now, suppose we change the layout file to to this.\n<img src=\"./zConclusion/pasted_image002.png\" alt=\"\">\nThe code just doesn’t work.</p>\n<p><strong>Why did this happen?</strong>\nThis happened because we assumed views would never change, which is a bad assumption. This caused our code to be tightly coupled.</p>\n<p><strong>What’s a correct way then?</strong>\nUse ids. But keep in mind that ids usually couple code more. In this case the code was even more coupled.</p>\n",
      "id": 90
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L3_-_Report_Card_app/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L3_-_Report_Card_app/0_index.html",
      "content": "# L3 - Report Card app\nCreated Saturday 02 January 2021\n\n[./_ReportCardApp](./L3_-_Report_Card_app/_ReportCardApp)\n\n",
      "html": "<h1 id=\"l3---report-card-app\">L3 - Report Card app <a class=\"heading-anchor-permalink\" href=\"#l3---report-card-app\">#</a></h1>\n<p>Created Saturday 02 January 2021</p>\n<p><a href=\"./L3_-_Report_Card_app/_ReportCardApp\">./_ReportCardApp</a></p>\n",
      "id": 91
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L3_-_Report_Card_app/1._Project_Overview.md",
      "url": "3._Basics_-_Multiscreen_Apps/L3_-_Report_Card_app/1._Project_Overview.html",
      "content": "# 1. Project Overview\nCreated Saturday 02 January 2021\n\nThe following text is a verbatim copy from Udacity\n\t\n\tProject Overview\n\tThis project is a chance for you to combine and practice everything you learned in this course so far. \n\tYou will be making a class to represent a report card.\n\tThe goal is to design and create the structure of a ReportCard Java Class which would allow \n\ta school to store a student’s gradesfor a particular year. \n\tThis project will be just a java class, rather than a full Android app.\n\t\n\tWhy this project?\n\tCustom classes are critical to every object-oriented program you will build going forward.\n\tIt is vital to be able to think about how to design objects which interact with each other and model real-world concepts.\n\t\n\tWhat will I learn?\n\tThis project is about combining various ideas and skills we’ve been practicing throughout the course. They include:\n\t\n\n* ``Designing a custom class``\n* ``Creating that class in Java code.``\n* ``Storing information in an array``\n* ``Looping through an array``\n\n\n",
      "html": "<h1 id=\"1.-project-overview\">1. Project Overview <a class=\"heading-anchor-permalink\" href=\"#1.-project-overview\">#</a></h1>\n<p>Created Saturday 02 January 2021</p>\n<p>The following text is a verbatim copy from Udacity</p>\n<pre><code>Project Overview\nThis project is a chance for you to combine and practice everything you learned in this course so far. \nYou will be making a class to represent a report card.\nThe goal is to design and create the structure of a ReportCard Java Class which would allow \na school to store a student’s gradesfor a particular year. \nThis project will be just a java class, rather than a full Android app.\n\nWhy this project?\nCustom classes are critical to every object-oriented program you will build going forward.\nIt is vital to be able to think about how to design objects which interact with each other and model real-world concepts.\n\nWhat will I learn?\nThis project is about combining various ideas and skills we’ve been practicing throughout the course. They include:\n</code></pre>\n<ul>\n<li><code>Designing a custom class</code></li>\n<li><code>Creating that class in Java code.</code></li>\n<li><code>Storing information in an array</code></li>\n<li><code>Looping through an array</code></li>\n</ul>\n",
      "id": 92
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L3_-_Report_Card_app/2._Building_the_project.md",
      "url": "3._Basics_-_Multiscreen_Apps/L3_-_Report_Card_app/2._Building_the_project.html",
      "content": "# 2. Building the project\nCreated Saturday 02 January 2021\n\nBig blunder happened. Made the project, like 90%, did not commit. Then did 'git reset --hard' by mistake, all work gone.\nSo skipping this.\n\n",
      "html": "<h1 id=\"2.-building-the-project\">2. Building the project <a class=\"heading-anchor-permalink\" href=\"#2.-building-the-project\">#</a></h1>\n<p>Created Saturday 02 January 2021</p>\n<p>Big blunder happened. Made the project, like 90%, did not commit. Then did ‘git reset --hard’ by mistake, all work gone.\nSo skipping this.</p>\n",
      "id": 93
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L4/1._Lesson_Intro/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L4/1._Lesson_Intro/0_index.html",
      "content": "# 1. Lesson Intro\nCreated Saturday 02 January 2021\n\nThings to do in the app:\n\n1. Add acorns in the number category.\n2. Put a color in each row of the color category.\n3. Add pictures for various family members.\n4. Change the styles for text apps.\n\n\nTo summarize, we'll do this:\n![](./1._Lesson_Intro/pasted_image.png)\n![](./1._Lesson_Intro/pasted_image001.png)\nThen style the categories.\n![](./1._Lesson_Intro/pasted_image002.png)\n\n",
      "html": "<h1 id=\"1.-lesson-intro\">1. Lesson Intro <a class=\"heading-anchor-permalink\" href=\"#1.-lesson-intro\">#</a></h1>\n<p>Created Saturday 02 January 2021</p>\n<p>Things to do in the app:</p>\n<ol>\n<li>Add acorns in the number category.</li>\n<li>Put a color in each row of the color category.</li>\n<li>Add pictures for various family members.</li>\n<li>Change the styles for text apps.</li>\n</ol>\n<p>To summarize, we’ll do this:\n<img src=\"./1._Lesson_Intro/pasted_image.png\" alt=\"\">\n<img src=\"./1._Lesson_Intro/pasted_image001.png\" alt=\"\">\nThen style the categories.\n<img src=\"./1._Lesson_Intro/pasted_image002.png\" alt=\"\"></p>\n",
      "id": 94
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L4/10._Different_colors_for_each_activity.md",
      "url": "3._Basics_-_Multiscreen_Apps/L4/10._Different_colors_for_each_activity.html",
      "content": "# 10. Different colors for each activity\nCreated Tuesday 05 January 2021\n\nWe have hardcoded orange as the color for each background.\n![](./9._Visual_Polish/pasted_image001.png)\n\nWe'll need to dynamically set background color. \nThe question is: where should we store the background color information as a variable? And why?\n\n* Word - not good. We'll store many copies and will have to change WordAdapter too, because Word cannot change background of the ListView. ``Memory wastage.``\n* WordAdapter - Good, we can change the inner LinearLayout's background and can work with just a single variable. **We edit only one file here. Reduces the impact of change.**\n* Category Activity files - Bad, we'd have to store all colors in the MainActivity and send the color through the intent. It would require an **if condition**. Also as the category_activity has a fixed color which no one uses, it is best to keep the color in the category_activity itself. **Definitely not scalable.**\n\n\n**We'll change the WordAdapter.**\n\nNote: Realize that we are storing all colors(hex codes) in resources. This is not the 'storing' we are talking of here. We are storing color in the category_activity to avoid an if conditional. Storing hex values in XML or hardcoding(in this case) them is not so different.\n\n#### Doing it\nWe are using the two param constructor for the WordAdapter, so we'll just change that. This is okay for such a small project.\n\n**Important**: \n\n* ``View.setBackgroundResource()`` and ``View.setBackgroundColor()`` are two different things, where the second takes in a color object.\n* Color objects can be created using ``Color.parseColor(\"#e7eecc\")``\n\n\n",
      "html": "<h1 id=\"10.-different-colors-for-each-activity\">10. Different colors for each activity <a class=\"heading-anchor-permalink\" href=\"#10.-different-colors-for-each-activity\">#</a></h1>\n<p>Created Tuesday 05 January 2021</p>\n<p>We have hardcoded orange as the color for each background.\n<img src=\"./9._Visual_Polish/pasted_image001.png\" alt=\"\"></p>\n<p>We’ll need to dynamically set background color.\nThe question is: where should we store the background color information as a variable? And why?</p>\n<ul>\n<li>Word - not good. We’ll store many copies and will have to change WordAdapter too, because Word cannot change background of the ListView. <code>Memory wastage.</code></li>\n<li>WordAdapter - Good, we can change the inner LinearLayout’s background and can work with just a single variable. <strong>We edit only one file here. Reduces the impact of change.</strong></li>\n<li>Category Activity files - Bad, we’d have to store all colors in the MainActivity and send the color through the intent. It would require an <strong>if condition</strong>. Also as the category_activity has a fixed color which no one uses, it is best to keep the color in the category_activity itself. <strong>Definitely not scalable.</strong></li>\n</ul>\n<p><strong>We’ll change the WordAdapter.</strong></p>\n<p>Note: Realize that we are storing all colors(hex codes) in resources. This is not the ‘storing’ we are talking of here. We are storing color in the category_activity to avoid an if conditional. Storing hex values in XML or hardcoding(in this case) them is not so different.</p>\n<h4 id=\"doing-it\">Doing it <a class=\"heading-anchor-permalink\" href=\"#doing-it\">#</a></h4>\n<p>We are using the two param constructor for the WordAdapter, so we’ll just change that. This is okay for such a small project.</p>\n<p><strong>Important</strong>:</p>\n<ul>\n<li><code>View.setBackgroundResource()</code> and <code>View.setBackgroundColor()</code> are two different things, where the second takes in a color object.</li>\n<li>Color objects can be created using <code>Color.parseColor(&quot;#e7eecc&quot;)</code></li>\n</ul>\n",
      "id": 95
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L4/11._Playing_Audio.md",
      "url": "3._Basics_-_Multiscreen_Apps/L4/11._Playing_Audio.html",
      "content": "# 11. Playing Audio\nCreated Wednesday 06 January 2021\n\nAs we are learning a new language, it is crucial to learn the correct prounounciation. We'll add audio to buttons to make this happen.\n\n**For this task, we'll research and come up with a solution on our own.**\n\n#### Approach 1\nThe Android multimedia framework includes support for playing a variety of common media types like audio, video and images. It can do so from media files stored in application's raw resources (``res/res``), from files in the filesystem, or from a data stream arriving over a network connection.\n\nThe [MediaPlayer](https://developer.android.com/guide/topics/media/mediaplayer#mediaplayer) class is used for media playback.\n\tMediaPlayer mp = MediaPlayer.create(context, R.raw.sound_file_1);\n\tmp.start(); // Audio \n\t\n\t// Other methods\n\tmp.isPlaying();\n\tmp.stop();\n\n\nNote: [AudioManager](https://developer.android.com/reference/android/media/AudioManager) class is for managing audio volume, bluetooth etc. It does not play audio per se.\n\n#### Approach 2\nUsing the AudioManager class\n\n",
      "html": "<h1 id=\"11.-playing-audio\">11. Playing Audio <a class=\"heading-anchor-permalink\" href=\"#11.-playing-audio\">#</a></h1>\n<p>Created Wednesday 06 January 2021</p>\n<p>As we are learning a new language, it is crucial to learn the correct prounounciation. We’ll add audio to buttons to make this happen.</p>\n<p><strong>For this task, we’ll research and come up with a solution on our own.</strong></p>\n<h4 id=\"approach-1\">Approach 1 <a class=\"heading-anchor-permalink\" href=\"#approach-1\">#</a></h4>\n<p>The Android multimedia framework includes support for playing a variety of common media types like audio, video and images. It can do so from media files stored in application’s raw resources (<code>res/res</code>), from files in the filesystem, or from a data stream arriving over a network connection.</p>\n<p>The <a href=\"https://developer.android.com/guide/topics/media/mediaplayer#mediaplayer\">MediaPlayer</a> class is used for media playback.\nMediaPlayer mp = MediaPlayer.create(context, R.raw.sound_file_1);\nmp.start(); // Audio</p>\n<pre><code>// Other methods\nmp.isPlaying();\nmp.stop();\n</code></pre>\n<p>Note: <a href=\"https://developer.android.com/reference/android/media/AudioManager\">AudioManager</a> class is for managing audio volume, bluetooth etc. It does not play audio per se.</p>\n<h4 id=\"approach-2\">Approach 2 <a class=\"heading-anchor-permalink\" href=\"#approach-2\">#</a></h4>\n<p>Using the AudioManager class</p>\n",
      "id": 96
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L4/12._Adding_audio.md",
      "url": "3._Basics_-_Multiscreen_Apps/L4/12._Adding_audio.html",
      "content": "# 12. Adding audio\nCreated Sunday 10 January 2021\n\n#### Part 1\nThat's okay, but how will the user 'see' the audio option.\n\n* We'll add a play icon in ``list_item.xml``\n* We'll attach an event listener to the row, which will play the audio.\n\n\n#### Part 2\nHow to we add audio to the Miwok app?\n\n* We'll store the audio files in ``/res/raw``\n* As audio is linked to a Word, we'll add an ``int`` resource in the Word class.\n* We'll initialize this value in the respective category_activity.java file\n\n\n#### Part 3\nWhich class will have the method for playing audio, and setting the listener. There can be several approaches:\n\n1. Change the Word class - we'll have two methods, one for setting the audio_ID and the other for attaching the listener which will play the audio. But WordAdapter handles view, not Word. This will make Word interactive, which is not desired because Word's primary motive is to carry data. We'll have to pass the view to Word from WordAdapter.\n2. Change WordAdapter class - As this controlls the view, it is easier to attach the listener here.\n\n\n#### Part 4\nVisual Polish\n\n",
      "html": "<h1 id=\"12.-adding-audio\">12. Adding audio <a class=\"heading-anchor-permalink\" href=\"#12.-adding-audio\">#</a></h1>\n<p>Created Sunday 10 January 2021</p>\n<h4 id=\"part-1\">Part 1 <a class=\"heading-anchor-permalink\" href=\"#part-1\">#</a></h4>\n<p>That’s okay, but how will the user ‘see’ the audio option.</p>\n<ul>\n<li>We’ll add a play icon in <code>list_item.xml</code></li>\n<li>We’ll attach an event listener to the row, which will play the audio.</li>\n</ul>\n<h4 id=\"part-2\">Part 2 <a class=\"heading-anchor-permalink\" href=\"#part-2\">#</a></h4>\n<p>How to we add audio to the Miwok app?</p>\n<ul>\n<li>We’ll store the audio files in <code>/res/raw</code></li>\n<li>As audio is linked to a Word, we’ll add an <code>int</code> resource in the Word class.</li>\n<li>We’ll initialize this value in the respective category_activity.java file</li>\n</ul>\n<h4 id=\"part-3\">Part 3 <a class=\"heading-anchor-permalink\" href=\"#part-3\">#</a></h4>\n<p>Which class will have the method for playing audio, and setting the listener. There can be several approaches:</p>\n<ol>\n<li>Change the Word class - we’ll have two methods, one for setting the audio_ID and the other for attaching the listener which will play the audio. But WordAdapter handles view, not Word. This will make Word interactive, which is not desired because Word’s primary motive is to carry data. We’ll have to pass the view to Word from WordAdapter.</li>\n<li>Change WordAdapter class - As this controlls the view, it is easier to attach the listener here.</li>\n</ol>\n<h4 id=\"part-4\">Part 4 <a class=\"heading-anchor-permalink\" href=\"#part-4\">#</a></h4>\n<p>Visual Polish</p>\n",
      "id": 97
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L4/13._Trying_out_audio_playback/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L4/13._Trying_out_audio_playback/0_index.html",
      "content": "# 13. Trying out audio playback\nCreated Sunday 10 January 2021\n\nWe'll create a small project for this.\n![](./13._Trying_out_audio_playback/pasted_image.png)\nUser story:\n\n1. Must play an audio. Must play audio from the same position as before.\n2. Pause stops the audio.\n\n\nOk, I made [this](https://github.com/android-repo-sink/audioTrialApp):\nSteps:\n\n* Add an mp3 to ``/res/raw`` \n\n![](./13._Trying_out_audio_playback/pasted_image001.png) ![](./13._Trying_out_audio_playback/pasted_image002.png)\n\n",
      "html": "<h1 id=\"13.-trying-out-audio-playback\">13. Trying out audio playback <a class=\"heading-anchor-permalink\" href=\"#13.-trying-out-audio-playback\">#</a></h1>\n<p>Created Sunday 10 January 2021</p>\n<p>We’ll create a small project for this.\n<img src=\"./13._Trying_out_audio_playback/pasted_image.png\" alt=\"\">\nUser story:</p>\n<ol>\n<li>Must play an audio. Must play audio from the same position as before.</li>\n<li>Pause stops the audio.</li>\n</ol>\n<p>Ok, I made <a href=\"https://github.com/android-repo-sink/audioTrialApp\">this</a>:\nSteps:</p>\n<ul>\n<li>Add an mp3 to <code>/res/raw</code></li>\n</ul>\n<p><img src=\"./13._Trying_out_audio_playback/pasted_image001.png\" alt=\"\"> <img src=\"./13._Trying_out_audio_playback/pasted_image002.png\" alt=\"\"></p>\n",
      "id": 98
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L4/14._MediaPlayer_class.md",
      "url": "3._Basics_-_Multiscreen_Apps/L4/14._MediaPlayer_class.html",
      "content": "# 14. MediaPlayer class\nCreated Sunday 10 January 2021\n\nWe have\n\n",
      "html": "<h1 id=\"14.-mediaplayer-class\">14. MediaPlayer class <a class=\"heading-anchor-permalink\" href=\"#14.-mediaplayer-class\">#</a></h1>\n<p>Created Sunday 10 January 2021</p>\n<p>We have</p>\n",
      "id": 99
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L4/2._Scoping_out_work_for_a_new_feature/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L4/2._Scoping_out_work_for_a_new_feature/0_index.html",
      "content": "# 2. Scoping out work for a new feature\nCreated Sunday 03 January 2021\n\nWe have come to a point which is common for developers. We have the app working and we get a  feature request.\n\nA dev has to decide the following things:\n\n1. Design of the changes.\n2. Determine the scope of the work:\n\t1. Changes in the codebase.\n\t2. Time taken to implement the feature.\n\n\n* Having a rough(but complete) mental model of the app helps in deciding these things.\n\n\n\n*****\n\nHow to implement changes:\n\n1. As each cell is changing, we'll need to create custom classes for each type of data.\n2. We will need to  list_item.xml files.\n3. We also have to create relevant adapters, which handle the custom classes.\n4. We need to change the relevant sections Java code.\n\n\n![](./2._Scoping_out_work_for_a_new_feature/pasted_image.png)\n\n",
      "html": "<h1 id=\"2.-scoping-out-work-for-a-new-feature\">2. Scoping out work for a new feature <a class=\"heading-anchor-permalink\" href=\"#2.-scoping-out-work-for-a-new-feature\">#</a></h1>\n<p>Created Sunday 03 January 2021</p>\n<p>We have come to a point which is common for developers. We have the app working and we get a  feature request.</p>\n<p>A dev has to decide the following things:</p>\n<ol>\n<li>Design of the changes.</li>\n<li>Determine the scope of the work:\n<ol>\n<li>Changes in the codebase.</li>\n<li>Time taken to implement the feature.</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>Having a rough(but complete) mental model of the app helps in deciding these things.</li>\n</ul>\n<hr>\n<p>How to implement changes:</p>\n<ol>\n<li>As each cell is changing, we’ll need to create custom classes for each type of data.</li>\n<li>We will need to  list_item.xml files.</li>\n<li>We also have to create relevant adapters, which handle the custom classes.</li>\n<li>We need to change the relevant sections Java code.</li>\n</ol>\n<p><img src=\"./2._Scoping_out_work_for_a_new_feature/pasted_image.png\" alt=\"\"></p>\n",
      "id": 100
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L4/3._What_Order_to_make_changes_in/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L4/3._What_Order_to_make_changes_in/0_index.html",
      "content": "# 3. What Order to make changes in\nCreated Sunday 03 January 2021\n\n#### Rate of change\nThere are two major ways to implement a feature:\n\n1. Make all changes, then see if the app runs. This method has a high probability of failure because it'll be difficult to pinpoint the error.\n\n![](./3._What_Order_to_make_changes_in/pasted_image.png)\n\n2. Make small incremental changes and keep checking if they work. Note that here, we may spend some extra time running an incomplete feature but is is very less when compared to debugging multiple files at many different places.\n\n![](./3._What_Order_to_make_changes_in/pasted_image001.png)\n**Note**\n\n* **The incremental method is better. **\n* **Although if the feature is very small or straightforward, we can skip to the quicker one. **\n* **In large codebases, the incremental method is better in the long run.**\n\n\n#### Order of change\nIn what order should we make the changes? There are many strategies, like:\n\n1. **Do the riskiest(difficult) first **- This helps us keep a contigency plan, i.e we can change our design if things don't work out. It also reduces coupling in the code, which would have been significant if we had done simple things first.\n2. **Implement what you can based on available data** - It would be stupid to wait for the designers to give us final images, sound etc. We can work with good **stubs** aka placeholder or dummy data. This saves development cost, time and also makes us aware of the variations that are possible with the data, as stubs are not at all final.\n\n\n*****\n\n\n17. In what should we make the [changes](./2._Scoping_out_work_for_a_new_feature.md)?\n18. Based on the data availability and risk, the following order seems good:\n\t1. Modify the ``list_item`` layout.\n\t2. Add the images, stubs or otherwise.\n\t3. Modify the ``Word`` class to include image data as per the ``list_item``.\n\t4. Modify the ``WordAdapter`` to work with the changes in ``Word`` class and ``list_item`` layout.\n\n\n\n",
      "html": "<h1 id=\"3.-what-order-to-make-changes-in\">3. What Order to make changes in <a class=\"heading-anchor-permalink\" href=\"#3.-what-order-to-make-changes-in\">#</a></h1>\n<p>Created Sunday 03 January 2021</p>\n<h4 id=\"rate-of-change\">Rate of change <a class=\"heading-anchor-permalink\" href=\"#rate-of-change\">#</a></h4>\n<p>There are two major ways to implement a feature:</p>\n<ol>\n<li>Make all changes, then see if the app runs. This method has a high probability of failure because it’ll be difficult to pinpoint the error.</li>\n</ol>\n<p><img src=\"./3._What_Order_to_make_changes_in/pasted_image.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>Make small incremental changes and keep checking if they work. Note that here, we may spend some extra time running an incomplete feature but is is very less when compared to debugging multiple files at many different places.</li>\n</ol>\n<p><img src=\"./3._What_Order_to_make_changes_in/pasted_image001.png\" alt=\"\">\n<strong>Note</strong></p>\n<ul>\n<li>**The incremental method is better. **</li>\n<li>**Although if the feature is very small or straightforward, we can skip to the quicker one. **</li>\n<li><strong>In large codebases, the incremental method is better in the long run.</strong></li>\n</ul>\n<h4 id=\"order-of-change\">Order of change <a class=\"heading-anchor-permalink\" href=\"#order-of-change\">#</a></h4>\n<p>In what order should we make the changes? There are many strategies, like:</p>\n<ol>\n<li>**Do the riskiest(difficult) first **- This helps us keep a contigency plan, i.e we can change our design if things don’t work out. It also reduces coupling in the code, which would have been significant if we had done simple things first.</li>\n<li><strong>Implement what you can based on available data</strong> - It would be stupid to wait for the designers to give us final images, sound etc. We can work with good <strong>stubs</strong> aka placeholder or dummy data. This saves development cost, time and also makes us aware of the variations that are possible with the data, as stubs are not at all final.</li>\n</ol>\n<hr>\n<ol start=\"17\">\n<li>In what should we make the <a href=\"./2._Scoping_out_work_for_a_new_feature.html\">changes</a>?</li>\n<li>Based on the data availability and risk, the following order seems good:\n<ol>\n<li>Modify the <code>list_item</code> layout.</li>\n<li>Add the images, stubs or otherwise.</li>\n<li>Modify the <code>Word</code> class to include image data as per the <code>list_item</code>.</li>\n<li>Modify the <code>WordAdapter</code> to work with the changes in <code>Word</code> class and <code>list_item</code> layout.</li>\n</ol>\n</li>\n</ol>\n",
      "id": 101
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L4/4._Modify_list_item_layout/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L4/4._Modify_list_item_layout/0_index.html",
      "content": "# 4. Modify list item layout\nCreated Sunday 03 January 2021\n\n![](./4._Modify_list_item_layout/pasted_image.png)\n\n\n17. Why do we refer to the image as ``@mipmap/ic_launcher`` (instead of ``@drawable/ic_launcher``)\n18. This is because Android handles app launcher icons in a different way. They need to crisp and clear on all devices.\n\n\n",
      "html": "<h1 id=\"4.-modify-list-item-layout\">4. Modify list item layout <a class=\"heading-anchor-permalink\" href=\"#4.-modify-list-item-layout\">#</a></h1>\n<p>Created Sunday 03 January 2021</p>\n<p><img src=\"./4._Modify_list_item_layout/pasted_image.png\" alt=\"\"></p>\n<ol start=\"17\">\n<li>Why do we refer to the image as <code>@mipmap/ic_launcher</code> (instead of <code>@drawable/ic_launcher</code>)</li>\n<li>This is because Android handles app launcher icons in a different way. They need to crisp and clear on all devices.</li>\n</ol>\n",
      "id": 102
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L4/5._Assets/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L4/5._Assets/0_index.html",
      "content": "# 5. Assets\nCreated Sunday 03 January 2021\n\n\n* Assets are media resources(not styles, colors, strings) resources. They refers to photos, audio, video etc used within the app.\n* Assets are kept in ``res`` directory.\n\n\n#### Why does the asset folder have multiple folder of similar files?\n![](./5._Assets/pasted_image001.png)\nEach folder inside stores the same assets but of varying quality, like resolution, bitrate etc. This is done to make the app look the same on different devices. \n\n*****\n\n\n#### Why not compute relevant assets from a single best one?\n\n* ``xxxhdpi`` is a higher resolution than ``hdpi``(on the left). Although it is possible for a higher res image to be displayed on a low res device, this compression may distort the image. So we provide a low resolution image.\n* Having different assets is also useful because it makes the app lightweight in terms of processing. We are trading time(processing power) for space. This is very important for mobile devices, because they run on a battery.\n\n\n#### Density Buckets\nmdpi - medium density device\nhdpi - high density device\nxhdpi - extra high density device\n![](./5._Assets/pasted_image.png)\n\n#### How Android handles different resolutions?\nIf we use ``dp`` the actual size of the photo is the same across all devices.\n![](./5._Assets/pasted_image002.png)\nThis is the case because Android known the screen's pixel density and calculates relevant dimensions based on that. It used this calculated information to select relevant assets.\n![](./5._Assets/pasted_image003.png)\n**Note**\n\n* ``dp`` - Density-independent pixel, it is an abstract unit of length(i.e it makes things look the same on different devices).\n* ``dpi`` - dots per inch, it is a measure of density of dots in printed media.\n* ``ppi`` - pixels per inch, it is a measure of density of dots for digital graphic media.\n* In Android jargon, ``dpi`` is used in place ``ppi``, which is a misnomer.\n\n\n#### Why different resolutions exist?\nDifferent resolution exist due to developments in display technology and a better lifetime of devices, making backwards compatibility a necessity.\n\n#### How are assets kept?\n\n* All the different folders are pasted into the ``/res`` directory. \n* Assets are not grouped by content. They are grouped only by filetype and quality.\n\n![](./5._Assets/pasted_image004.png)\n\n",
      "html": "<h1 id=\"5.-assets\">5. Assets <a class=\"heading-anchor-permalink\" href=\"#5.-assets\">#</a></h1>\n<p>Created Sunday 03 January 2021</p>\n<ul>\n<li>Assets are media resources(not styles, colors, strings) resources. They refers to photos, audio, video etc used within the app.</li>\n<li>Assets are kept in <code>res</code> directory.</li>\n</ul>\n<h4 id=\"why-does-the-asset-folder-have-multiple-folder-of-similar-files%3F\">Why does the asset folder have multiple folder of similar files? <a class=\"heading-anchor-permalink\" href=\"#why-does-the-asset-folder-have-multiple-folder-of-similar-files%3F\">#</a></h4>\n<p><img src=\"./5._Assets/pasted_image001.png\" alt=\"\">\nEach folder inside stores the same assets but of varying quality, like resolution, bitrate etc. This is done to make the app look the same on different devices.</p>\n<hr>\n<h4 id=\"why-not-compute-relevant-assets-from-a-single-best-one%3F\">Why not compute relevant assets from a single best one? <a class=\"heading-anchor-permalink\" href=\"#why-not-compute-relevant-assets-from-a-single-best-one%3F\">#</a></h4>\n<ul>\n<li><code>xxxhdpi</code> is a higher resolution than <code>hdpi</code>(on the left). Although it is possible for a higher res image to be displayed on a low res device, this compression may distort the image. So we provide a low resolution image.</li>\n<li>Having different assets is also useful because it makes the app lightweight in terms of processing. We are trading time(processing power) for space. This is very important for mobile devices, because they run on a battery.</li>\n</ul>\n<h4 id=\"density-buckets\">Density Buckets <a class=\"heading-anchor-permalink\" href=\"#density-buckets\">#</a></h4>\n<p>mdpi - medium density device\nhdpi - high density device\nxhdpi - extra high density device\n<img src=\"./5._Assets/pasted_image.png\" alt=\"\"></p>\n<h4 id=\"how-android-handles-different-resolutions%3F\">How Android handles different resolutions? <a class=\"heading-anchor-permalink\" href=\"#how-android-handles-different-resolutions%3F\">#</a></h4>\n<p>If we use <code>dp</code> the actual size of the photo is the same across all devices.\n<img src=\"./5._Assets/pasted_image002.png\" alt=\"\">\nThis is the case because Android known the screen’s pixel density and calculates relevant dimensions based on that. It used this calculated information to select relevant assets.\n<img src=\"./5._Assets/pasted_image003.png\" alt=\"\">\n<strong>Note</strong></p>\n<ul>\n<li><code>dp</code> - Density-independent pixel, it is an abstract unit of length(i.e it makes things look the same on different devices).</li>\n<li><code>dpi</code> - dots per inch, it is a measure of density of dots in printed media.</li>\n<li><code>ppi</code> - pixels per inch, it is a measure of density of dots for digital graphic media.</li>\n<li>In Android jargon, <code>dpi</code> is used in place <code>ppi</code>, which is a misnomer.</li>\n</ul>\n<h4 id=\"why-different-resolutions-exist%3F\">Why different resolutions exist? <a class=\"heading-anchor-permalink\" href=\"#why-different-resolutions-exist%3F\">#</a></h4>\n<p>Different resolution exist due to developments in display technology and a better lifetime of devices, making backwards compatibility a necessity.</p>\n<h4 id=\"how-are-assets-kept%3F\">How are assets kept? <a class=\"heading-anchor-permalink\" href=\"#how-are-assets-kept%3F\">#</a></h4>\n<ul>\n<li>All the different folders are pasted into the <code>/res</code> directory.</li>\n<li>Assets are not grouped by content. They are grouped only by filetype and quality.</li>\n</ul>\n<p><img src=\"./5._Assets/pasted_image004.png\" alt=\"\"></p>\n",
      "id": 103
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L4/6._Modifying_the_Word_class/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L4/6._Modifying_the_Word_class/0_index.html",
      "content": "# 6. Modifying the Word class\nCreated Sunday 03 January 2021\n\nWe just need an image. \n\n* One idea is to store the image as a file, but this is not a good idea because our code is not stored as is after installing the app.\n* Even if this was possible it would be inefficient in terms of space. It is better if we use a reference.\n* The correct approach is to store the image's resource_name. It is just an ``Integer`` so it is very easy to work with.\n\n![](./6._Modifying_the_Word_class/pasted_image.png)zxcb\n\n#### Changes to the code\n\n* ``private Integer image``\n* ``public Integer getImageResourceId()``\n* Add, not replace the constructor. We are doing this because phrases have no image. So it is better not to mention images while working with them.\n\n\n\n\n",
      "html": "<h1 id=\"6.-modifying-the-word-class\">6. Modifying the Word class <a class=\"heading-anchor-permalink\" href=\"#6.-modifying-the-word-class\">#</a></h1>\n<p>Created Sunday 03 January 2021</p>\n<p>We just need an image.</p>\n<ul>\n<li>One idea is to store the image as a file, but this is not a good idea because our code is not stored as is after installing the app.</li>\n<li>Even if this was possible it would be inefficient in terms of space. It is better if we use a reference.</li>\n<li>The correct approach is to store the image’s resource_name. It is just an <code>Integer</code> so it is very easy to work with.</li>\n</ul>\n<p><img src=\"./6._Modifying_the_Word_class/pasted_image.png\" alt=\"\">zxcb</p>\n<h4 id=\"changes-to-the-code\">Changes to the code <a class=\"heading-anchor-permalink\" href=\"#changes-to-the-code\">#</a></h4>\n<ul>\n<li><code>private Integer image</code></li>\n<li><code>public Integer getImageResourceId()</code></li>\n<li>Add, not replace the constructor. We are doing this because phrases have no image. So it is better not to mention images while working with them.</li>\n</ul>\n",
      "id": 104
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L4/7._Modifying_WordAdapter_class.md",
      "url": "3._Basics_-_Multiscreen_Apps/L4/7._Modifying_WordAdapter_class.html",
      "content": "# 7. Modifying WordAdapter class\nCreated Sunday 03 January 2021\n\n\n* We need to add code for adding the resourceId to the ``ImageView`` in the ``list_item``.\n\nBut remember that PhrasesActivity has ``Word``(s) which don't have an image.\nAs the mImageResourceId is a field and not a local variable, this is not an error In Java: it is initialized to ``null``.\n\n",
      "html": "<h1 id=\"7.-modifying-wordadapter-class\">7. Modifying WordAdapter class <a class=\"heading-anchor-permalink\" href=\"#7.-modifying-wordadapter-class\">#</a></h1>\n<p>Created Sunday 03 January 2021</p>\n<ul>\n<li>We need to add code for adding the resourceId to the <code>ImageView</code> in the <code>list_item</code>.</li>\n</ul>\n<p>But remember that PhrasesActivity has <code>Word</code>(s) which don’t have an image.\nAs the mImageResourceId is a field and not a local variable, this is not an error In Java: it is initialized to <code>null</code>.</p>\n",
      "id": 105
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L4/8._Hiding_the_image_in_the_PhrasesActivity/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L4/8._Hiding_the_image_in_the_PhrasesActivity/0_index.html",
      "content": "# 8. Hiding the image in the PhrasesActivity\nCreated Tuesday 05 January 2021\n\nOur ``list_item.xml`` has an ImageView. This is a problem in PhrasesActivity where ``Word`` has no image. \n\nWhat should we do, set it to ``null``? - This will give cause the app to stop abruptly.\n\nIt would be better if we could get rid of the ImageView in case of null. This is done via the ``visibility`` attribute, it has 3 values, which are all integers:\n\n1. ``View.VISIBLE`` - view renders as normal. This is the default visibility.\n\n![](./8._Hiding_the_image_in_the_PhrasesActivity/pasted_image.png)\n\n2. ``View.INVISIBLE`` - view is invisible, but still takes up space.\n\n![](./8._Hiding_the_image_in_the_PhrasesActivity/pasted_image001.png)\n\n3. ``VIew.GONE`` - view is completely removed. Takes up no space.\n\n![](./8._Hiding_the_image_in_the_PhrasesActivity/pasted_image002.png)\nWe'll be setting the ``visibility`` to ``View.GONE`` by coding this in Java:\n\tcontent_imageView.setVisibility(View.GONE);\n\n",
      "html": "<h1 id=\"8.-hiding-the-image-in-the-phrasesactivity\">8. Hiding the image in the PhrasesActivity <a class=\"heading-anchor-permalink\" href=\"#8.-hiding-the-image-in-the-phrasesactivity\">#</a></h1>\n<p>Created Tuesday 05 January 2021</p>\n<p>Our <code>list_item.xml</code> has an ImageView. This is a problem in PhrasesActivity where <code>Word</code> has no image.</p>\n<p>What should we do, set it to <code>null</code>? - This will give cause the app to stop abruptly.</p>\n<p>It would be better if we could get rid of the ImageView in case of null. This is done via the <code>visibility</code> attribute, it has 3 values, which are all integers:</p>\n<ol>\n<li><code>View.VISIBLE</code> - view renders as normal. This is the default visibility.</li>\n</ol>\n<p><img src=\"./8._Hiding_the_image_in_the_PhrasesActivity/pasted_image.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li><code>View.INVISIBLE</code> - view is invisible, but still takes up space.</li>\n</ol>\n<p><img src=\"./8._Hiding_the_image_in_the_PhrasesActivity/pasted_image001.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li><code>VIew.GONE</code> - view is completely removed. Takes up no space.</li>\n</ol>\n<p><img src=\"./8._Hiding_the_image_in_the_PhrasesActivity/pasted_image002.png\" alt=\"\">\nWe’ll be setting the <code>visibility</code> to <code>View.GONE</code> by coding this in Java:\ncontent_imageView.setVisibility(View.GONE);</p>\n",
      "id": 106
    },
    {
      "path": "3._Basics_-_Multiscreen_Apps/L4/9._Visual_Polish/0_index.md",
      "url": "3._Basics_-_Multiscreen_Apps/L4/9._Visual_Polish/0_index.html",
      "content": "# 9. Visual Polish\nCreated Tuesday 05 January 2021\n\nWhile making the app functional, we should mostly ignore visual elements. But after the app works as accepted, we must add visual polish to the app before releasing the app.\n\n#### Red Lines\nThe designer gives us the screens with red lines drawn on them. This is like a very simple engineering drawing. All dimensions are exact.\n[Here's](./9._Visual_Polish/miwok-redlines.pdf) one redline document.\n![](./9._Visual_Polish/pasted_image.png)\nWe have a different background color for each section.\nFor now let us set the background to orange, we'll change it later.\n\n#### Layout Bounds\nIt is helpful if we could look at the bounds while the app is running, and not just in the XML viewer. Android supports this.\n\n* Enable *Developer Options > Show layout bounds. *It can be disabled later on, this is just for developers.\n\nThe screen will look something like this:\n![](./9._Visual_Polish/pasted_image002.png)\n\n#### Doing it - mentioning only new stuff\nIn list_item.xml\n\n1. Set background to a light \n2. Set background of the LinearLayout containing text to a dark color.\n3. Divide the text height equally.\n4. Use ``gravity`` to ``bottom`` and ``top`` for the ``TextView`` on the top and bottom.\n\n\n* We learn that background is applied to everything inside the Viewgroup.\n\n\n",
      "html": "<h1 id=\"9.-visual-polish\">9. Visual Polish <a class=\"heading-anchor-permalink\" href=\"#9.-visual-polish\">#</a></h1>\n<p>Created Tuesday 05 January 2021</p>\n<p>While making the app functional, we should mostly ignore visual elements. But after the app works as accepted, we must add visual polish to the app before releasing the app.</p>\n<h4 id=\"red-lines\">Red Lines <a class=\"heading-anchor-permalink\" href=\"#red-lines\">#</a></h4>\n<p>The designer gives us the screens with red lines drawn on them. This is like a very simple engineering drawing. All dimensions are exact.\n<a href=\"./9._Visual_Polish/miwok-redlines.pdf\">Here’s</a> one redline document.\n<img src=\"./9._Visual_Polish/pasted_image.png\" alt=\"\">\nWe have a different background color for each section.\nFor now let us set the background to orange, we’ll change it later.</p>\n<h4 id=\"layout-bounds\">Layout Bounds <a class=\"heading-anchor-permalink\" href=\"#layout-bounds\">#</a></h4>\n<p>It is helpful if we could look at the bounds while the app is running, and not just in the XML viewer. Android supports this.</p>\n<ul>\n<li>Enable *Developer Options &gt; Show layout bounds. *It can be disabled later on, this is just for developers.</li>\n</ul>\n<p>The screen will look something like this:\n<img src=\"./9._Visual_Polish/pasted_image002.png\" alt=\"\"></p>\n<h4 id=\"doing-it---mentioning-only-new-stuff\">Doing it - mentioning only new stuff <a class=\"heading-anchor-permalink\" href=\"#doing-it---mentioning-only-new-stuff\">#</a></h4>\n<p>In list_item.xml</p>\n<ol>\n<li>Set background to a light</li>\n<li>Set background of the LinearLayout containing text to a dark color.</li>\n<li>Divide the text height equally.</li>\n<li>Use <code>gravity</code> to <code>bottom</code> and <code>top</code> for the <code>TextView</code> on the top and bottom.</li>\n</ol>\n<ul>\n<li>We learn that background is applied to everything inside the Viewgroup.</li>\n</ul>\n",
      "id": 107
    },
    {
      "path": "Home/0._Prerequisites.md",
      "url": "Home/0._Prerequisites.html",
      "content": "# 0. Prerequisites\nCreated Sunday 03 January 2021\n\n\n1. Java language\n\n\n",
      "html": "<h1 id=\"0.-prerequisites\">0. Prerequisites <a class=\"heading-anchor-permalink\" href=\"#0.-prerequisites\">#</a></h1>\n<p>Created Sunday 03 January 2021</p>\n<ol>\n<li>Java language</li>\n</ol>\n",
      "id": 108
    },
    {
      "path": "Home/0_index.md",
      "url": "Home/0_index.html",
      "content": "# Home\nCreated Wednesday 21 October 2020\n\nGlossary - <https://developers.google.com/android/for-all/vocab-words/?hl=en>\n\n<https://classroom.udacity.com/me>\n\n[3. Basics - Multiscreen Apps:L2 - DS, loops and custom classes:1. Course Map](./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/1._Course_Map.md)\n\n",
      "html": "<h1 id=\"home\">Home <a class=\"heading-anchor-permalink\" href=\"#home\">#</a></h1>\n<p>Created Wednesday 21 October 2020</p>\n<p>Glossary - <a href=\"https://developers.google.com/android/for-all/vocab-words/?hl=en\">https://developers.google.com/android/for-all/vocab-words/?hl=en</a></p>\n<p><a href=\"https://classroom.udacity.com/me\">https://classroom.udacity.com/me</a></p>\n<p><a href=\"./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/1._Course_Map.html\">3. Basics - Multiscreen Apps:L2 - DS, loops and custom classes:1. Course Map</a></p>\n",
      "id": 109
    },
    {
      "path": "Home/1._Roadmap/0_index.md",
      "url": "Home/1._Roadmap/0_index.html",
      "content": "# 1. Roadmap\nCreated Wednesday 21 October 2020\n\n[./road_map_android.md](./1._Roadmap/road_map_android.md)\n\nCourses -> \n\n* Learn Kotlin from (<https://www.coursera.org/learn/kotlin-for-java-developers>)\n* Learn the concepts in Java from Udacity(8 courses)\n\nCourses:\nweeks = days(actually)\n**Basics**\n\n1. User interface - (2 days) - (<https://www.udacity.com/course/android-basics-user-interface--ud834>)\n2. Android User input - (4 days) - (<https://www.udacity.com/course/android-basics-user-input--ud836>)\n3. Multiscreen apps (10 days) - (<https://www.udacity.com/course/android-basics-multiscreen-apps--ud839>)\n4. Networking - (5 days) - (<https://www.udacity.com/course/android-basics-networking--ud843>)\n5. Data Storage - (1 week) - <https://www.udacity.com/course/android-basics-data-storage--ud845>\n\n**Intermediate**\n\n6. Developing Android Apps(~1 week) apps(<https://www.com/course/new-android-fundamentals--ud851>)\n7. Advanced Android App Dev(<https://www.udacity.com/course/advanced-android-app-development--ud855>)\n8. Firebase - (2 days) - (<https://www.udacity.com/course/firebase-in-a-weekend-by-google-android--ud0352>)\n9. Material Design - (1 day) - (optional) - (<https://www.udacity.com/course/material-design-for-android-developers--ud862>)\n10. Gradle for Android and Java - (6 days) - (optional) - <https://www.udacity.com/course/gradle-for-android-and-java--ud867>\n11. Android Wear Development - (2 days) - (optional) - <https://www.udacity.com/course/android-wear-development--ud875A>\n\n\nConcepts of Android\n<https://www.coursera.org/learn/android-programming>\n<https://www.coursera.org/learn/android-programming-2>\n\n*****\n\nAlernatives\n[Android Basics in Kotlin](https://developer.android.com/courses/basic-android-kotlin-training/overview)\n[Android Kotlin Fundamentals](https://developer.android.com/courses/kotlin-android-fundamentals/overview)\n[Kotlin Bootcamps for Programmers](https://developer.android.com/courses/kotlin-bootcamp/overview)\n[Advanced Android in Kotlin](https://developer.android.com/courses/kotlin-android-advanced/overview)\n\n",
      "html": "<h1 id=\"1.-roadmap\">1. Roadmap <a class=\"heading-anchor-permalink\" href=\"#1.-roadmap\">#</a></h1>\n<p>Created Wednesday 21 October 2020</p>\n<p><a href=\"./1._Roadmap/road_map_android.html\">./road_map_android.md</a></p>\n<p>Courses -&gt;</p>\n<ul>\n<li>Learn Kotlin from (<a href=\"https://www.coursera.org/learn/kotlin-for-java-developers\">https://www.coursera.org/learn/kotlin-for-java-developers</a>)</li>\n<li>Learn the concepts in Java from Udacity(8 courses)</li>\n</ul>\n<p>Courses:\nweeks = days(actually)\n<strong>Basics</strong></p>\n<ol>\n<li>User interface - (2 days) - (<a href=\"https://www.udacity.com/course/android-basics-user-interface--ud834\">https://www.udacity.com/course/android-basics-user-interface--ud834</a>)</li>\n<li>Android User input - (4 days) - (<a href=\"https://www.udacity.com/course/android-basics-user-input--ud836\">https://www.udacity.com/course/android-basics-user-input--ud836</a>)</li>\n<li>Multiscreen apps (10 days) - (<a href=\"https://www.udacity.com/course/android-basics-multiscreen-apps--ud839\">https://www.udacity.com/course/android-basics-multiscreen-apps--ud839</a>)</li>\n<li>Networking - (5 days) - (<a href=\"https://www.udacity.com/course/android-basics-networking--ud843\">https://www.udacity.com/course/android-basics-networking--ud843</a>)</li>\n<li>Data Storage - (1 week) - <a href=\"https://www.udacity.com/course/android-basics-data-storage--ud845\">https://www.udacity.com/course/android-basics-data-storage--ud845</a></li>\n</ol>\n<p><strong>Intermediate</strong></p>\n<ol start=\"6\">\n<li>Developing Android Apps(~1 week) apps(<a href=\"https://www.com/course/new-android-fundamentals--ud851\">https://www.com/course/new-android-fundamentals--ud851</a>)</li>\n<li>Advanced Android App Dev(<a href=\"https://www.udacity.com/course/advanced-android-app-development--ud855\">https://www.udacity.com/course/advanced-android-app-development--ud855</a>)</li>\n<li>Firebase - (2 days) - (<a href=\"https://www.udacity.com/course/firebase-in-a-weekend-by-google-android--ud0352\">https://www.udacity.com/course/firebase-in-a-weekend-by-google-android--ud0352</a>)</li>\n<li>Material Design - (1 day) - (optional) - (<a href=\"https://www.udacity.com/course/material-design-for-android-developers--ud862\">https://www.udacity.com/course/material-design-for-android-developers--ud862</a>)</li>\n<li>Gradle for Android and Java - (6 days) - (optional) - <a href=\"https://www.udacity.com/course/gradle-for-android-and-java--ud867\">https://www.udacity.com/course/gradle-for-android-and-java--ud867</a></li>\n<li>Android Wear Development - (2 days) - (optional) - <a href=\"https://www.udacity.com/course/android-wear-development--ud875A\">https://www.udacity.com/course/android-wear-development--ud875A</a></li>\n</ol>\n<p>Concepts of Android\n<a href=\"https://www.coursera.org/learn/android-programming\">https://www.coursera.org/learn/android-programming</a>\n<a href=\"https://www.coursera.org/learn/android-programming-2\">https://www.coursera.org/learn/android-programming-2</a></p>\n<hr>\n<p>Alernatives\n<a href=\"https://developer.android.com/courses/basic-android-kotlin-training/overview\">Android Basics in Kotlin</a>\n<a href=\"https://developer.android.com/courses/kotlin-android-fundamentals/overview\">Android Kotlin Fundamentals</a>\n<a href=\"https://developer.android.com/courses/kotlin-bootcamp/overview\">Kotlin Bootcamps for Programmers</a>\n<a href=\"https://developer.android.com/courses/kotlin-android-advanced/overview\">Advanced Android in Kotlin</a></p>\n",
      "id": 110
    },
    {
      "path": "Home/1._Roadmap/road_map_android.md",
      "url": "Home/1._Roadmap/road_map_android.html",
      "content": "2016 - Kotlin can be used unofficiall7\n2017 - Kotlin support added offcially\n2018 - Kotlin use encouraged by Google\n\nWe must know Java, but apps must be made in Kotlin only.\nAll new code is written in Kotlin\nZomato - codebase is 85% Java\nTarget - 85% Kotlin\n\n* Java is required, but Kotlin is used.\n* New apps are written in Kotlin\n\nOOP - Interface, function overriden, callbacks, Lambdas, Generics, Java Collection\n\nAndroid things\n\nComponents - Activities(foreground), Services(background), Broadcast Recievers(OS events), Content Providers(Rarely used in SDE 2)\n* There's no void main()\n\nAndroid is UI driven, not procedure one\n\n# Chapter 1 - 2 weeks\n\n    Activities - What is it, how is done?\n    Layouts - UI elements\n    View Elements - text view, buttons, Edit text, image view\n\n    Intents - Implicit, explicit - share and select apps. App to app communication\n\n# Chapter 2 - 4 weeks\n\n    Complex UI - List view(infinite scrolls), recycler view, Dialogs, Toast(like subs), sheets,\n        Drawyers, View Pagershorizontal buttons to change sections\n    Everything here is implemented using fragments(lightweight activities)\n\n# Chapter 3 - 2 weeks + 3w(project, mandatory)\n\n    Network Facilities, HTTP dict, Square OK HTTP(img, http request/response), Square Retrofit(REST API), Apollo Android(GraphQL), Glide(image)\n    Gradle - how to add libraries\n\nWe are ready to make apps, realworld.io - clone of Medium, using imgur API and make insta stories clone, daily notes/diary\n\n# Chapter 4 - 2 weeks\n\n    Media - play audio, play in background(using services), Video using Exoplayer, Camera(take photo, record videos - this is difficult)\n\n# Chapter 5 - 2 weeks\n\n    Very important\n    Android Jetpack - toolkit to write Android apps, MVVM(architecture for building models), Work manager, Job-scheduler\n    Saving data - SQLite using Room(which is an ORM - start with this after learning SQL), CameraX\n\n# Deploy/Production - 3\n\n    Firebase - User Auth, Notifications, Data Sync, Cloud\n\nWe can make an end to end app.\n\n# Advanced Stuff - useful for >= SDE2\n\nKotlin has something - corountines (1 weeks)\nRx Java - (2 weeks)\nDependency Injection - Koin(2 weeks) and Dagger(2 weeks)\nJetpack Compose - for UI (4 weeks)\n\n# After SDE2 - for futureproofing\n\n* Flutter(not ignorable and not the future)\n* Native iOS(mental models can be used)\n\n---\n\nCode With Harry\n\n* Native is better than frameworks, for beginners\n* XML is just the design, and Java is the logic. In Web Dev terms - XML = HTML+CSS and Java = JS\n* Android in one video -  Android Studio - Learn the playground - https://www.youtube.com/playlist?list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\n* Android Developer Fundamentals, Advanced Android Development - By Googlehttps://developer.android.com/courses\n* Udacity - Developing Android apps https://www.udacity.com/course/new-android-fundamentals--ud851\n* Documentation - Become good enough to use Google etc(never ending)\n* Android Launcher Iconhttps://romannurik.github.io/AndroidAssetStudio/icons-launcher.html#foreground.type=clipart&foreground.clipart=android&foreground.space.trim=1&foreground.space.pad=0.25&foreColor=rgba(96%2C%20125%2C%20139%2C%200)&backColor=rgb(68%2C%20138%2C%20255)&crop=0&backgroundShape=square&effects=none&name=ic_launcher\n\n* Lean Build Earn Repeat\n\n# How to earn\n\n* Freelancing - Difficult\n* PlayStore and AdMob - 25$\n* Play Store + inApp purchase\n* Job/Internship\n* Social media? Tutoring, Bug fixing - Side income\n\n* Never Ending\n* Visit blog\n\n* Git, CI/CD\n* Database - SQLite, Firebase\n* AdMob API\n* How to make PUBG, GTA5 - Unity game Engine\n* DS/Algo\n\nhttps://www.youtube.com/redirect?redir_token=QUFFLUhqbnUzcC0wci1BWlRJaHBhSWNBazFodWwtTEN6Z3xBQ3Jtc0trVUZ6d3dYdEdHeHNseWliTnh2eDA5d3NzdXU4T1cxTXZDN09SNE5KbXR6UXF3YmpBUWtYOXBOTllmX01VNXNEWUR2QVBLUlBJMUViVGVPWThqelhkSWRhY3p1QzNXamtzN2dBcVVmR2d6OGRoWTgycw%3D%3D&v=A14BLDzNy2k&q=https%3A%2F%2Fdocs.google.com%2Fdocument%2Fd%2F1nl7jAWYmt0zvYmbImp8pT-VLMNdHedoMdvg7qvQ1EV8%2Fedit%3Fusp%3Dsharing&event=video_description\n\n---\n\nLove Babbar - in 2 months\nStarting point - just programming\n\nCourses:\nweeks = days(actually)\nUser interface - (2 days) - https://www.udacity.com/course/android-basics-user-interface--ud834\nAndroid User input - (4 days) - https://www.udacity.com/course/android-basics-user-input--ud836\nMultiscreen apps (10 days) - https://www.udacity.com/course/android-basics-multiscreen-apps--ud839\nNetworking - (5 days) - https://www.udacity.com/course/android-basics-networking--ud843\nData Storage - (1 week) - https://www.udacity.com/course/android-basics-data-storage--ud845\nDeveloping Android Apps(~1 week) - https://www.com/course/new-android-fundamentals--ud851\nAdvanced Android App Devhttps://www.udacity.com/course/advanced-android-app-development--ud855\nFirebase - (2 days) - https://www.udacity.com/course/firebase-in-a-weekend-by-google-android--ud0352\nMaterial Design - (1 day) - (optional) - https://www.udacity.com/course/material-design-for-android-developers--ud862\n",
      "html": "<p>2016 - Kotlin can be used unofficiall7\n2017 - Kotlin support added offcially\n2018 - Kotlin use encouraged by Google</p>\n<p>We must know Java, but apps must be made in Kotlin only.\nAll new code is written in Kotlin\nZomato - codebase is 85% Java\nTarget - 85% Kotlin</p>\n<ul>\n<li>Java is required, but Kotlin is used.</li>\n<li>New apps are written in Kotlin</li>\n</ul>\n<p>OOP - Interface, function overriden, callbacks, Lambdas, Generics, Java Collection</p>\n<p>Android things</p>\n<p>Components - Activities(foreground), Services(background), Broadcast Recievers(OS events), Content Providers(Rarely used in SDE 2)</p>\n<ul>\n<li>There’s no void main()</li>\n</ul>\n<p>Android is UI driven, not procedure one</p>\n<h1 id=\"chapter-1---2-weeks\">Chapter 1 - 2 weeks <a class=\"heading-anchor-permalink\" href=\"#chapter-1---2-weeks\">#</a></h1>\n<pre><code>Activities - What is it, how is done?\nLayouts - UI elements\nView Elements - text view, buttons, Edit text, image view\n\nIntents - Implicit, explicit - share and select apps. App to app communication\n</code></pre>\n<h1 id=\"chapter-2---4-weeks\">Chapter 2 - 4 weeks <a class=\"heading-anchor-permalink\" href=\"#chapter-2---4-weeks\">#</a></h1>\n<pre><code>Complex UI - List view(infinite scrolls), recycler view, Dialogs, Toast(like subs), sheets,\n    Drawyers, View Pagershorizontal buttons to change sections\nEverything here is implemented using fragments(lightweight activities)\n</code></pre>\n<h1 id=\"chapter-3---2-weeks-%2B-3w(project%2C-mandatory)\">Chapter 3 - 2 weeks + 3w(project, mandatory) <a class=\"heading-anchor-permalink\" href=\"#chapter-3---2-weeks-%2B-3w(project%2C-mandatory)\">#</a></h1>\n<pre><code>Network Facilities, HTTP dict, Square OK HTTP(img, http request/response), Square Retrofit(REST API), Apollo Android(GraphQL), Glide(image)\nGradle - how to add libraries\n</code></pre>\n<p>We are ready to make apps, <a href=\"http://realworld.io\">realworld.io</a> - clone of Medium, using imgur API and make insta stories clone, daily notes/diary</p>\n<h1 id=\"chapter-4---2-weeks\">Chapter 4 - 2 weeks <a class=\"heading-anchor-permalink\" href=\"#chapter-4---2-weeks\">#</a></h1>\n<pre><code>Media - play audio, play in background(using services), Video using Exoplayer, Camera(take photo, record videos - this is difficult)\n</code></pre>\n<h1 id=\"chapter-5---2-weeks\">Chapter 5 - 2 weeks <a class=\"heading-anchor-permalink\" href=\"#chapter-5---2-weeks\">#</a></h1>\n<pre><code>Very important\nAndroid Jetpack - toolkit to write Android apps, MVVM(architecture for building models), Work manager, Job-scheduler\nSaving data - SQLite using Room(which is an ORM - start with this after learning SQL), CameraX\n</code></pre>\n<h1 id=\"deploy%2Fproduction---3\">Deploy/Production - 3 <a class=\"heading-anchor-permalink\" href=\"#deploy%2Fproduction---3\">#</a></h1>\n<pre><code>Firebase - User Auth, Notifications, Data Sync, Cloud\n</code></pre>\n<p>We can make an end to end app.</p>\n<h1 id=\"advanced-stuff---useful-for-%3E%3D-sde2\">Advanced Stuff - useful for &gt;= SDE2 <a class=\"heading-anchor-permalink\" href=\"#advanced-stuff---useful-for-%3E%3D-sde2\">#</a></h1>\n<p>Kotlin has something - corountines (1 weeks)\nRx Java - (2 weeks)\nDependency Injection - Koin(2 weeks) and Dagger(2 weeks)\nJetpack Compose - for UI (4 weeks)</p>\n<h1 id=\"after-sde2---for-futureproofing\">After SDE2 - for futureproofing <a class=\"heading-anchor-permalink\" href=\"#after-sde2---for-futureproofing\">#</a></h1>\n<ul>\n<li>Flutter(not ignorable and not the future)</li>\n<li>Native iOS(mental models can be used)</li>\n</ul>\n<hr>\n<p>Code With Harry</p>\n<ul>\n<li>\n<p>Native is better than frameworks, for beginners</p>\n</li>\n<li>\n<p>XML is just the design, and Java is the logic. In Web Dev terms - XML = HTML+CSS and Java = JS</p>\n</li>\n<li>\n<p>Android in one video -  Android Studio - Learn the playground - <a href=\"https://www.youtube.com/playlist?list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7\">https://www.youtube.com/playlist?list=PLu0W_9lII9ahKZ42vg2w9ERPmShYbYAB7</a></p>\n</li>\n<li>\n<p>Android Developer Fundamentals, Advanced Android Development - By Googlehttps://developer.android.com/courses</p>\n</li>\n<li>\n<p>Udacity - Developing Android apps <a href=\"https://www.udacity.com/course/new-android-fundamentals--ud851\">https://www.udacity.com/course/new-android-fundamentals--ud851</a></p>\n</li>\n<li>\n<p>Documentation - Become good enough to use Google etc(never ending)</p>\n</li>\n<li>\n<p>Android Launcher Iconhttps://romannurik.github.io/AndroidAssetStudio/icons-launcher.html#foreground.type=clipart&amp;foreground.clipart=android&amp;foreground.space.trim=1&amp;foreground.space.pad=0.25&amp;foreColor=rgba(96%2C%20125%2C%20139%2C%200)&amp;backColor=rgb(68%2C%20138%2C%20255)&amp;crop=0&amp;backgroundShape=square&amp;effects=none&amp;name=ic_launcher</p>\n</li>\n<li>\n<p>Lean Build Earn Repeat</p>\n</li>\n</ul>\n<h1 id=\"how-to-earn\">How to earn <a class=\"heading-anchor-permalink\" href=\"#how-to-earn\">#</a></h1>\n<ul>\n<li>\n<p>Freelancing - Difficult</p>\n</li>\n<li>\n<p>PlayStore and AdMob - 25$</p>\n</li>\n<li>\n<p>Play Store + inApp purchase</p>\n</li>\n<li>\n<p>Job/Internship</p>\n</li>\n<li>\n<p>Social media? Tutoring, Bug fixing - Side income</p>\n</li>\n<li>\n<p>Never Ending</p>\n</li>\n<li>\n<p>Visit blog</p>\n</li>\n<li>\n<p>Git, CI/CD</p>\n</li>\n<li>\n<p>Database - SQLite, Firebase</p>\n</li>\n<li>\n<p>AdMob API</p>\n</li>\n<li>\n<p>How to make PUBG, GTA5 - Unity game Engine</p>\n</li>\n<li>\n<p>DS/Algo</p>\n</li>\n</ul>\n<p><a href=\"https://www.youtube.com/redirect?redir_token=QUFFLUhqbnUzcC0wci1BWlRJaHBhSWNBazFodWwtTEN6Z3xBQ3Jtc0trVUZ6d3dYdEdHeHNseWliTnh2eDA5d3NzdXU4T1cxTXZDN09SNE5KbXR6UXF3YmpBUWtYOXBOTllmX01VNXNEWUR2QVBLUlBJMUViVGVPWThqelhkSWRhY3p1QzNXamtzN2dBcVVmR2d6OGRoWTgycw%3D%3D&amp;v=A14BLDzNy2k&amp;q=https%3A%2F%2Fdocs.google.com%2Fdocument%2Fd%2F1nl7jAWYmt0zvYmbImp8pT-VLMNdHedoMdvg7qvQ1EV8%2Fedit%3Fusp%3Dsharing&amp;event=video_description\">https://www.youtube.com/redirect?redir_token=QUFFLUhqbnUzcC0wci1BWlRJaHBhSWNBazFodWwtTEN6Z3xBQ3Jtc0trVUZ6d3dYdEdHeHNseWliTnh2eDA5d3NzdXU4T1cxTXZDN09SNE5KbXR6UXF3YmpBUWtYOXBOTllmX01VNXNEWUR2QVBLUlBJMUViVGVPWThqelhkSWRhY3p1QzNXamtzN2dBcVVmR2d6OGRoWTgycw%3D%3D&amp;v=A14BLDzNy2k&amp;q=https%3A%2F%2Fdocs.google.com%2Fdocument%2Fd%2F1nl7jAWYmt0zvYmbImp8pT-VLMNdHedoMdvg7qvQ1EV8%2Fedit%3Fusp%3Dsharing&amp;event=video_description</a></p>\n<hr>\n<p>Love Babbar - in 2 months\nStarting point - just programming</p>\n<p>Courses:\nweeks = days(actually)\nUser interface - (2 days) - <a href=\"https://www.udacity.com/course/android-basics-user-interface--ud834\">https://www.udacity.com/course/android-basics-user-interface--ud834</a>\nAndroid User input - (4 days) - <a href=\"https://www.udacity.com/course/android-basics-user-input--ud836\">https://www.udacity.com/course/android-basics-user-input--ud836</a>\nMultiscreen apps (10 days) - <a href=\"https://www.udacity.com/course/android-basics-multiscreen-apps--ud839\">https://www.udacity.com/course/android-basics-multiscreen-apps--ud839</a>\nNetworking - (5 days) - <a href=\"https://www.udacity.com/course/android-basics-networking--ud843\">https://www.udacity.com/course/android-basics-networking--ud843</a>\nData Storage - (1 week) - <a href=\"https://www.udacity.com/course/android-basics-data-storage--ud845\">https://www.udacity.com/course/android-basics-data-storage--ud845</a>\nDeveloping Android Apps(~1 week) - <a href=\"https://www.com/course/new-android-fundamentals--ud851\">https://www.com/course/new-android-fundamentals--ud851</a>\nAdvanced Android App Devhttps://www.udacity.com/course/advanced-android-app-development–ud855\nFirebase - (2 days) - <a href=\"https://www.udacity.com/course/firebase-in-a-weekend-by-google-android--ud0352\">https://www.udacity.com/course/firebase-in-a-weekend-by-google-android--ud0352</a>\nMaterial Design - (1 day) - (optional) - <a href=\"https://www.udacity.com/course/material-design-for-android-developers--ud862\">https://www.udacity.com/course/material-design-for-android-developers--ud862</a></p>\n",
      "id": 111
    },
    {
      "path": "Home/2._Code.md",
      "url": "Home/2._Code.html",
      "content": "# 2. Code\nCreated Saturday 02 January 2021\n\n\n* All the project code is available online.\n* All projects are git repos. But repos aren't accessible always, viz MEGAsync and Dropbox don't work well with repos. So repos(.git folder) may not be available directly from notes.\n\n\n\n* So I stored all repos at GitHub. Here's the link to all repos - <https://github.com/android-repo-sink>\n\n\n",
      "html": "<h1 id=\"2.-code\">2. Code <a class=\"heading-anchor-permalink\" href=\"#2.-code\">#</a></h1>\n<p>Created Saturday 02 January 2021</p>\n<ul>\n<li>\n<p>All the project code is available online.</p>\n</li>\n<li>\n<p>All projects are git repos. But repos aren’t accessible always, viz MEGAsync and Dropbox don’t work well with repos. So repos(.git folder) may not be available directly from notes.</p>\n</li>\n<li>\n<p>So I stored all repos at GitHub. Here’s the link to all repos - <a href=\"https://github.com/android-repo-sink\">https://github.com/android-repo-sink</a></p>\n</li>\n</ul>\n",
      "id": 112
    },
    {
      "path": "Home/3._References.md",
      "url": "Home/3._References.html",
      "content": "# 3. References\nCreated Sunday 10 January 2021\n\n\n* <https://google-developer-training.github.io/android-developer-fundamentals-course-concepts-v2/>\n* Slides - <https://drive.google.com/drive/folders/1eu-LXxiHocSktGYpG04PfE9Xmr_pBY5P?usp=sharing>\n\n\n",
      "html": "<h1 id=\"3.-references\">3. References <a class=\"heading-anchor-permalink\" href=\"#3.-references\">#</a></h1>\n<p>Created Sunday 10 January 2021</p>\n<ul>\n<li><a href=\"https://google-developer-training.github.io/android-developer-fundamentals-course-concepts-v2/\">https://google-developer-training.github.io/android-developer-fundamentals-course-concepts-v2/</a></li>\n<li>Slides - <a href=\"https://drive.google.com/drive/folders/1eu-LXxiHocSktGYpG04PfE9Xmr_pBY5P?usp=sharing\">https://drive.google.com/drive/folders/1eu-LXxiHocSktGYpG04PfE9Xmr_pBY5P?usp=sharing</a></li>\n</ul>\n",
      "id": 113
    },
    {
      "path": "notebook.md",
      "url": "notebook.html",
      "content": "# Index of Android Development\n\n* [1. Basics - Android UI](./1._Basics_-_Android_UI.md)\n\t* [L0 - About Android](./1._Basics_-_Android_UI/L0_-_About_Android.md)\n\t* [L1 - Building Layouts](./1._Basics_-_Android_UI/L1_-_Building_Layouts.md)\n\t\t* [1. Views](./1._Basics_-_Android_UI/L1_-_Building_Layouts/1._Views.md)\n\t\t* [2. IDE and XML](./1._Basics_-_Android_UI/L1_-_Building_Layouts/2._IDE_and_XML.md)\n\t\t* [3. XML Syntax](./1._Basics_-_Android_UI/L1_-_Building_Layouts/3._XML_Syntax.md)\n\t\t* [4. dp units](./1._Basics_-_Android_UI/L1_-_Building_Layouts/4._dp_units.md)\n\t\t* [5. wrap content](./1._Basics_-_Android_UI/L1_-_Building_Layouts/5._wrap_content.md)\n\t\t* [6. colors](./1._Basics_-_Android_UI/L1_-_Building_Layouts/6._colors.md)\n\t\t* [7. sp units](./1._Basics_-_Android_UI/L1_-_Building_Layouts/7._sp_units.md)\n\t\t* [8. Some attributes](./1._Basics_-_Android_UI/L1_-_Building_Layouts/8._Some_attributes.md)\n\t* [L2 - Building Layouts 2](./1._Basics_-_Android_UI/L2_-_Building_Layouts_2.md)\n\t\t* [1. View groups](./1._Basics_-_Android_UI/L2_-_Building_Layouts_2/1._View_groups.md)\n\t\t* [2. XML namespace declaration](./1._Basics_-_Android_UI/L2_-_Building_Layouts_2/2._XML_namespace_declaration.md)\n\t\t* [3. match parent](./1._Basics_-_Android_UI/L2_-_Building_Layouts_2/3._match_parent.md)\n\t\t* [4. layout weight](./1._Basics_-_Android_UI/L2_-_Building_Layouts_2/4._layout_weight.md)\n\t\t* [5. RelativeLayout](./1._Basics_-_Android_UI/L2_-_Building_Layouts_2/5._RelativeLayout.md)\n\t\t* [6. Padding and Margin](./1._Basics_-_Android_UI/L2_-_Building_Layouts_2/6._Padding_and_Margin.md)\n\t\t* [wqeqewqwe](./1._Basics_-_Android_UI/L2_-_Building_Layouts_2/wqeqewqwe.md)\n\t\t* [zConclusion](./1._Basics_-_Android_UI/L2_-_Building_Layouts_2/zConclusion.md)\n\t* [L3 - Practice - Building Layouts](./1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts.md)\n\t\t* [1. Troubleshooting](./1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/1._Troubleshooting.md)\n\t\t* [2. Hello World App](./1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/2._Hello_World_App.md)\n\t\t* [3. Birthday Card App](./1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/3._Birthday_Card_App.md)\n\t\t\t* [Attributes learned](./1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/3._Birthday_Card_App/Attributes_learned.md)\n\t\t* [4. Overlapping Views](./1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/4._Overlapping_Views.md)\n\t\t* [5. Project](./1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/5._Project.md)\n* [2. Basics - User Input](./2._Basics_-_User_Input.md)\n\t* [L1 - Activities](./2._Basics_-_User_Input/L1_-_Activities.md)\n\t\t* [1. Make the layout](./2._Basics_-_User_Input/L1_-_Activities/1._Make_the_layout.md)\n\t\t* [2. Activities](./2._Basics_-_User_Input/L1_-_Activities/2._Activities.md)\n\t\t* [3. Displaying text using Java](./2._Basics_-_User_Input/L1_-_Activities/3._Displaying_text_using_Java.md)\n\t* [L1 - Making An App interactive 1](./2._Basics_-_User_Input/L1_-_Making_An_App_interactive_1.md)\n\t* [L2 - Making An App interactive 2](./2._Basics_-_User_Input/L2_-_Making_An_App_interactive_2.md)\n\t* [L2 - Nested ViewGroups](./2._Basics_-_User_Input/L2_-_Nested_ViewGroups.md)\n\t\t* [1. Changing the layout](./2._Basics_-_User_Input/L2_-_Nested_ViewGroups/1._Changing_the_layout.md)\n\t\t* [2. Nested Viewgroups](./2._Basics_-_User_Input/L2_-_Nested_ViewGroups/2._Nested_Viewgroups.md)\n\t* [L3 - Making an App Interactive 3](./2._Basics_-_User_Input/L3_-_Making_an_App_Interactive_3.md)\n\t* [L3 - Steps for making an app](./2._Basics_-_User_Input/L3_-_Steps_for_making_an_app.md)\n\t\t* [1. Making the layout](./2._Basics_-_User_Input/L3_-_Steps_for_making_an_app/1._Making_the_layout.md)\n\t* [L4 - Details of an Android app](./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app.md)\n\t\t* [1. Anatomy of an Android app](./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/1._Anatomy_of_an_Android_app.md)\n\t\t* [2. Resource IDs](./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/2._Resource_IDs.md)\n\t\t* [2. Resources](./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/2._Resources.md)\n\t\t* [3. Relation between Java and XML](./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/3._Relation_between_Java_and_XML.md)\n\t\t* [4. Java objects](./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/4._Java_objects.md)\n\t\t* [5. setContentView method](./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/5._setContentView_method.md)\n\t\t* [6. Capturing views](./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/6._Capturing_views.md)\n\t\t* [7. Get data from views](./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/7._Get_data_from_views.md)\n\t\t* [8. Logging events](./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/8._Logging_events.md)\n\t* [L4 - Details of the workflow](./2._Basics_-_User_Input/L4_-_Details_of_the_workflow.md)\n\t* [L5 - More details](./2._Basics_-_User_Input/L5_-_More_details.md)\n\t\t* [1. CheckBox](./2._Basics_-_User_Input/L5_-_More_details/1._CheckBox.md)\n\t\t* [2. RadioGroup](./2._Basics_-_User_Input/L5_-_More_details/2._RadioGroup.md)\n\t\t* [3. Scrolling](./2._Basics_-_User_Input/L5_-_More_details/3._Scrolling.md)\n\t\t* [4. Googler suggestions](./2._Basics_-_User_Input/L5_-_More_details/4._Googler_suggestions.md)\n\t\t* [5. TextInput](./2._Basics_-_User_Input/L5_-_More_details/5._TextInput.md)\n\t\t* [6. Intent](./2._Basics_-_User_Input/L5_-_More_details/6._Intent.md)\n\t\t* [7. Localization](./2._Basics_-_User_Input/L5_-_More_details/7._Localization.md)\n\t\t* [8. Styles](./2._Basics_-_User_Input/L5_-_More_details/8._Styles.md)\n\t\t* [9. Themes](./2._Basics_-_User_Input/L5_-_More_details/9._Themes.md)\n\t\t* [10. Final Lecture](./2._Basics_-_User_Input/L5_-_More_details/10._Final_Lecture.md)\n* [3. Basics - Multiscreen Apps](./3._Basics_-_Multiscreen_Apps.md)\n\t* [L1 - Intents and Activities](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities.md)\n\t\t* [1. Intro](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/1._Intro.md)\n\t\t* [2. Android app directory structure](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/2._Android_app_directory_structure.md)\n\t\t* [3. Overview of the App](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/3._Overview_of_the_App.md)\n\t\t* [4. Gradle files](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/4._Gradle_files.md)\n\t\t* [5. Create New Activities](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/5._Create_New_Activities.md)\n\t\t\t* [xtra](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/5._Create_New_Activities/xtra.md)\n\t\t* [6. AndroidManifest.xml file](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/6._AndroidManifest.xml_file.md)\n\t\t* [7. Use an Intent to open another Activity](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/7._Use_an_Intent_to_open_another_Activity.md)\n\t\t\t* [resources](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/7._Use_an_Intent_to_open_another_Activity/resources.md)\n\t\t* [8. Implicit vs Explicit Intents](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/8._Implicit_vs_Explicit_Intents.md)\n\t\t* [9. Modifying the label(heading)](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/9._Modifying_the_label(heading).md)\n\t\t* [10. Event Listeners - Intro](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/10._Event_Listeners_-_Intro.md)\n\t\t* [11. Event Listeners in Android - Details](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/11._Event_Listeners_in_Android_-_Details.md)\n\t\t* [12. Why use interfaces](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/12._Why_use_interfaces.md)\n\t\t* [13. How to setup an event listener](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/13._How_to_setup_an_event_listener.md)\n\t\t* [Conclusion](./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/Conclusion.md)\n\t* [L2 - DS, loops and custom classes](./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes.md)\n\t\t* [1. Course Map](./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/1._Course_Map.md)\n\t\t* [2. Add views using Java](./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/2._Add_views_using_Java.md)\n\t\t* [3. Memory is Limited](./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/3._Memory_is_Limited.md)\n\t\t* [4. View Recycling](./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/4._View_Recycling.md)\n\t\t\t* [Questions](./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/4._View_Recycling/Questions.md)\n\t\t* [5. Analogy for ListView](./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/5._Analogy_for_ListView.md)\n\t\t* [6. ListView and Array Adapter](./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/6._ListView_and_Array_Adapter.md)\n\t\t* [7. Code for ListView and ArrayAdapter](./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/7._Code_for_ListView_and_ArrayAdapter.md)\n\t\t* [8. Custom Adapter - Concept](./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/8._Custom_Adapter_-_Concept.md)\n\t\t* [9. Custom Adapter - Concept](./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/9._Custom_Adapter_-_Concept.md)\n\t\t* [9. Custom adapter - Practical](./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/9._Custom_adapter_-_Practical.md)\n\t\t* [10. Completing changes for all sections](./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/10._Completing_changes_for_all_sections.md)\n\t\t* [zConclusion](./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/zConclusion.md)\n\t* [L3 - Report Card app](./3._Basics_-_Multiscreen_Apps/L3_-_Report_Card_app.md)\n\t\t* [1. Project Overview](./3._Basics_-_Multiscreen_Apps/L3_-_Report_Card_app/1._Project_Overview.md)\n\t\t* [2. Building the project](./3._Basics_-_Multiscreen_Apps/L3_-_Report_Card_app/2._Building_the_project.md)\n\t* [L4](./3._Basics_-_Multiscreen_Apps/L4.md)\n\t\t* [1. Lesson Intro](./3._Basics_-_Multiscreen_Apps/L4/1._Lesson_Intro.md)\n\t\t* [2. Scoping out work for a new feature](./3._Basics_-_Multiscreen_Apps/L4/2._Scoping_out_work_for_a_new_feature.md)\n\t\t* [3. What Order to make changes in](./3._Basics_-_Multiscreen_Apps/L4/3._What_Order_to_make_changes_in.md)\n\t\t* [4. Modify list item layout](./3._Basics_-_Multiscreen_Apps/L4/4._Modify_list_item_layout.md)\n\t\t* [5. Assets](./3._Basics_-_Multiscreen_Apps/L4/5._Assets.md)\n\t\t* [6. Modifying the Word class](./3._Basics_-_Multiscreen_Apps/L4/6._Modifying_the_Word_class.md)\n\t\t* [7. Modifying WordAdapter class](./3._Basics_-_Multiscreen_Apps/L4/7._Modifying_WordAdapter_class.md)\n\t\t* [8. Hiding the image in the PhrasesActivity](./3._Basics_-_Multiscreen_Apps/L4/8._Hiding_the_image_in_the_PhrasesActivity.md)\n\t\t* [9. Visual Polish](./3._Basics_-_Multiscreen_Apps/L4/9._Visual_Polish.md)\n\t\t* [10. Different colors for each activity](./3._Basics_-_Multiscreen_Apps/L4/10._Different_colors_for_each_activity.md)\n\t\t* [11. Playing Audio](./3._Basics_-_Multiscreen_Apps/L4/11._Playing_Audio.md)\n\t\t* [12. Adding audio](./3._Basics_-_Multiscreen_Apps/L4/12._Adding_audio.md)\n\t\t* [13. Trying out audio playback](./3._Basics_-_Multiscreen_Apps/L4/13._Trying_out_audio_playback.md)\n\t\t* [14. MediaPlayer class](./3._Basics_-_Multiscreen_Apps/L4/14._MediaPlayer_class.md)\n* [Home](./Home.md)\n\t* [0. Prerequisites](./Home/0._Prerequisites.md)\n\t* [1. Roadmap](./Home/1._Roadmap.md)\n\t* [2. Code](./Home/2._Code.md)\n\t* [3. References](./Home/3._References.md)\n\n\n",
      "html": "<h1 id=\"index-of-android-development\">Index of Android Development <a class=\"heading-anchor-permalink\" href=\"#index-of-android-development\">#</a></h1>\n<ul>\n<li><a href=\"./1._Basics_-_Android_UI.html\">1. Basics - Android UI</a>\n<ul>\n<li><a href=\"./1._Basics_-_Android_UI/L0_-_About_Android.html\">L0 - About Android</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L1_-_Building_Layouts.html\">L1 - Building Layouts</a>\n<ul>\n<li><a href=\"./1._Basics_-_Android_UI/L1_-_Building_Layouts/1._Views.html\">1. Views</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L1_-_Building_Layouts/2._IDE_and_XML.html\">2. IDE and XML</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L1_-_Building_Layouts/3._XML_Syntax.html\">3. XML Syntax</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L1_-_Building_Layouts/4._dp_units.html\">4. dp units</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L1_-_Building_Layouts/5._wrap_content.html\">5. wrap content</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L1_-_Building_Layouts/6._colors.html\">6. colors</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L1_-_Building_Layouts/7._sp_units.html\">7. sp units</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L1_-_Building_Layouts/8._Some_attributes.html\">8. Some attributes</a></li>\n</ul>\n</li>\n<li><a href=\"./1._Basics_-_Android_UI/L2_-_Building_Layouts_2.html\">L2 - Building Layouts 2</a>\n<ul>\n<li><a href=\"./1._Basics_-_Android_UI/L2_-_Building_Layouts_2/1._View_groups.html\">1. View groups</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L2_-_Building_Layouts_2/2._XML_namespace_declaration.html\">2. XML namespace declaration</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L2_-_Building_Layouts_2/3._match_parent.html\">3. match parent</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L2_-_Building_Layouts_2/4._layout_weight.html\">4. layout weight</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L2_-_Building_Layouts_2/5._RelativeLayout.html\">5. RelativeLayout</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L2_-_Building_Layouts_2/6._Padding_and_Margin.html\">6. Padding and Margin</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L2_-_Building_Layouts_2/wqeqewqwe.html\">wqeqewqwe</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L2_-_Building_Layouts_2/zConclusion.html\">zConclusion</a></li>\n</ul>\n</li>\n<li><a href=\"./1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts.html\">L3 - Practice - Building Layouts</a>\n<ul>\n<li><a href=\"./1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/1._Troubleshooting.html\">1. Troubleshooting</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/2._Hello_World_App.html\">2. Hello World App</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/3._Birthday_Card_App.html\">3. Birthday Card App</a>\n<ul>\n<li><a href=\"./1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/3._Birthday_Card_App/Attributes_learned.html\">Attributes learned</a></li>\n</ul>\n</li>\n<li><a href=\"./1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/4._Overlapping_Views.html\">4. Overlapping Views</a></li>\n<li><a href=\"./1._Basics_-_Android_UI/L3_-_Practice_-_Building_Layouts/5._Project.html\">5. Project</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"./2._Basics_-_User_Input.html\">2. Basics - User Input</a>\n<ul>\n<li><a href=\"./2._Basics_-_User_Input/L1_-_Activities.html\">L1 - Activities</a>\n<ul>\n<li><a href=\"./2._Basics_-_User_Input/L1_-_Activities/1._Make_the_layout.html\">1. Make the layout</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L1_-_Activities/2._Activities.html\">2. Activities</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L1_-_Activities/3._Displaying_text_using_Java.html\">3. Displaying text using Java</a></li>\n</ul>\n</li>\n<li><a href=\"./2._Basics_-_User_Input/L1_-_Making_An_App_interactive_1.html\">L1 - Making An App interactive 1</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L2_-_Making_An_App_interactive_2.html\">L2 - Making An App interactive 2</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L2_-_Nested_ViewGroups.html\">L2 - Nested ViewGroups</a>\n<ul>\n<li><a href=\"./2._Basics_-_User_Input/L2_-_Nested_ViewGroups/1._Changing_the_layout.html\">1. Changing the layout</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L2_-_Nested_ViewGroups/2._Nested_Viewgroups.html\">2. Nested Viewgroups</a></li>\n</ul>\n</li>\n<li><a href=\"./2._Basics_-_User_Input/L3_-_Making_an_App_Interactive_3.html\">L3 - Making an App Interactive 3</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L3_-_Steps_for_making_an_app.html\">L3 - Steps for making an app</a>\n<ul>\n<li><a href=\"./2._Basics_-_User_Input/L3_-_Steps_for_making_an_app/1._Making_the_layout.html\">1. Making the layout</a></li>\n</ul>\n</li>\n<li><a href=\"./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app.html\">L4 - Details of an Android app</a>\n<ul>\n<li><a href=\"./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/1._Anatomy_of_an_Android_app.html\">1. Anatomy of an Android app</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/2._Resource_IDs.html\">2. Resource IDs</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/2._Resources.html\">2. Resources</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/3._Relation_between_Java_and_XML.html\">3. Relation between Java and XML</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/4._Java_objects.html\">4. Java objects</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/5._setContentView_method.html\">5. setContentView method</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/6._Capturing_views.html\">6. Capturing views</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/7._Get_data_from_views.html\">7. Get data from views</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L4_-_Details_of_an_Android_app/8._Logging_events.html\">8. Logging events</a></li>\n</ul>\n</li>\n<li><a href=\"./2._Basics_-_User_Input/L4_-_Details_of_the_workflow.html\">L4 - Details of the workflow</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L5_-_More_details.html\">L5 - More details</a>\n<ul>\n<li><a href=\"./2._Basics_-_User_Input/L5_-_More_details/1._CheckBox.html\">1. CheckBox</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L5_-_More_details/2._RadioGroup.html\">2. RadioGroup</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L5_-_More_details/3._Scrolling.html\">3. Scrolling</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L5_-_More_details/4._Googler_suggestions.html\">4. Googler suggestions</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L5_-_More_details/5._TextInput.html\">5. TextInput</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L5_-_More_details/6._Intent.html\">6. Intent</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L5_-_More_details/7._Localization.html\">7. Localization</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L5_-_More_details/8._Styles.html\">8. Styles</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L5_-_More_details/9._Themes.html\">9. Themes</a></li>\n<li><a href=\"./2._Basics_-_User_Input/L5_-_More_details/10._Final_Lecture.html\">10. Final Lecture</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps.html\">3. Basics - Multiscreen Apps</a>\n<ul>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities.html\">L1 - Intents and Activities</a>\n<ul>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/1._Intro.html\">1. Intro</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/2._Android_app_directory_structure.html\">2. Android app directory structure</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/3._Overview_of_the_App.html\">3. Overview of the App</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/4._Gradle_files.html\">4. Gradle files</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/5._Create_New_Activities.html\">5. Create New Activities</a>\n<ul>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/5._Create_New_Activities/xtra.html\">xtra</a></li>\n</ul>\n</li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/6._AndroidManifest.xml_file.html\">6. AndroidManifest.xml file</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/7._Use_an_Intent_to_open_another_Activity.html\">7. Use an Intent to open another Activity</a>\n<ul>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/7._Use_an_Intent_to_open_another_Activity/resources.html\">resources</a></li>\n</ul>\n</li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/8._Implicit_vs_Explicit_Intents.html\">8. Implicit vs Explicit Intents</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/9._Modifying_the_label(heading).html\">9. Modifying the label(heading)</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/10._Event_Listeners_-_Intro.html\">10. Event Listeners - Intro</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/11._Event_Listeners_in_Android_-_Details.html\">11. Event Listeners in Android - Details</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/12._Why_use_interfaces.html\">12. Why use interfaces</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/13._How_to_setup_an_event_listener.html\">13. How to setup an event listener</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L1_-_Intents_and_Activities/Conclusion.html\">Conclusion</a></li>\n</ul>\n</li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes.html\">L2 - DS, loops and custom classes</a>\n<ul>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/1._Course_Map.html\">1. Course Map</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/2._Add_views_using_Java.html\">2. Add views using Java</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/3._Memory_is_Limited.html\">3. Memory is Limited</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/4._View_Recycling.html\">4. View Recycling</a>\n<ul>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/4._View_Recycling/Questions.html\">Questions</a></li>\n</ul>\n</li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/5._Analogy_for_ListView.html\">5. Analogy for ListView</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/6._ListView_and_Array_Adapter.html\">6. ListView and Array Adapter</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/7._Code_for_ListView_and_ArrayAdapter.html\">7. Code for ListView and ArrayAdapter</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/8._Custom_Adapter_-_Concept.html\">8. Custom Adapter - Concept</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/9._Custom_Adapter_-_Concept.html\">9. Custom Adapter - Concept</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/9._Custom_adapter_-_Practical.html\">9. Custom adapter - Practical</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/10._Completing_changes_for_all_sections.html\">10. Completing changes for all sections</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L2_-_DS,_loops_and_custom_classes/zConclusion.html\">zConclusion</a></li>\n</ul>\n</li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L3_-_Report_Card_app.html\">L3 - Report Card app</a>\n<ul>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L3_-_Report_Card_app/1._Project_Overview.html\">1. Project Overview</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L3_-_Report_Card_app/2._Building_the_project.html\">2. Building the project</a></li>\n</ul>\n</li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L4.html\">L4</a>\n<ul>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L4/1._Lesson_Intro.html\">1. Lesson Intro</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L4/2._Scoping_out_work_for_a_new_feature.html\">2. Scoping out work for a new feature</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L4/3._What_Order_to_make_changes_in.html\">3. What Order to make changes in</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L4/4._Modify_list_item_layout.html\">4. Modify list item layout</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L4/5._Assets.html\">5. Assets</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L4/6._Modifying_the_Word_class.html\">6. Modifying the Word class</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L4/7._Modifying_WordAdapter_class.html\">7. Modifying WordAdapter class</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L4/8._Hiding_the_image_in_the_PhrasesActivity.html\">8. Hiding the image in the PhrasesActivity</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L4/9._Visual_Polish.html\">9. Visual Polish</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L4/10._Different_colors_for_each_activity.html\">10. Different colors for each activity</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L4/11._Playing_Audio.html\">11. Playing Audio</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L4/12._Adding_audio.html\">12. Adding audio</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L4/13._Trying_out_audio_playback.html\">13. Trying out audio playback</a></li>\n<li><a href=\"./3._Basics_-_Multiscreen_Apps/L4/14._MediaPlayer_class.html\">14. MediaPlayer class</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"./Home.html\">Home</a>\n<ul>\n<li><a href=\"./Home/0._Prerequisites.html\">0. Prerequisites</a></li>\n<li><a href=\"./Home/1._Roadmap.html\">1. Roadmap</a></li>\n<li><a href=\"./Home/2._Code.html\">2. Code</a></li>\n<li><a href=\"./Home/3._References.html\">3. References</a></li>\n</ul>\n</li>\n</ul>\n",
      "id": 114
    }
  ]
}